{
    "course": {
        "title": {
            "he": "קורס React - מהבסיס ועד מתקדם",
            "ar": "دورة React - من الأساسيات إلى المتقدم"
        },
        "description": {
            "he": "לימוד מקיף של React.js עם כל התכונות החדשות",
            "ar": "تعلم شامل لـ React.js مع جميع الميزات الجديدة"
        },
        "totalSlides": 455,
        "slides": [
            {
                "id": 1,
                "title": {
                    "he": "Definition",
                    "ar": "التعريف"
                },
                "type": "definition",
                "icon": "🔍",
                "content": {
                    "he": "React is a free and open-source front-end JavaScript library for building user interfaces based on UI components. It is maintained by Meta (formerly Facebook) and a community of individual developers and companies. React is only concerned with state management and rendering that state to the DOM creating React applications usually requires the use of additional libraries for routing, as well as certain client-side functionality.",
                    "ar": "React هي مكتبة JavaScript مجانية ومفتوحة المصدر لبناء واجهات المستخدم بناءً على مكونات واجهة المستخدم. يتم الحفاظ عليها من قبل Meta (فيسبوك سابقاً) ومجتمع من المطورين والشركات. React تهتم فقط بإدارة الحالة وعرض هذه الحالة في DOM إنشاء تطبيقات React عادة ما يتطلب استخدام مكتبات إضافية للتوجيه، وكذلك وظائف معينة من جانب العميل."
                },
                "backgroundColor": "linear-gradient(135deg, #1e3c72 0%, #2a5298 100%)"
            },
            {
                "id": 2,
                "title": {
                    "he": "Benefits",
                    "ar": "الفوائد"
                },
                "type": "benefits",
                "icon": "👍",
                "items": [
                    {
                        "he": "Virtual DOM",
                        "ar": "Virtual DOM"
                    },
                    {
                        "he": "User Experience",
                        "ar": "تجربة المستخدم"
                    },
                    {
                        "he": "State Handle",
                        "ar": "إدارة الحالة"
                    },
                    {
                        "he": "Components",
                        "ar": "المكونات"
                    },
                    {
                        "he": "No Explicit Data Binding",
                        "ar": "لا يوجد ربط بيانات صريح"
                    },
                    {
                        "he": "Life cycle hooks",
                        "ar": "خطافات دورة الحياة"
                    },
                    {
                        "he": "Open source",
                        "ar": "مفتوح المصدر"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 3,
                "title": {
                    "he": "Virtual DOM implementations",
                    "ar": "تطبيقات Virtual DOM"
                },
                "type": "implementations",
                "icon": "⚡",
                "items": [
                    {
                        "he": "State",
                        "ar": "الحالة",
                        "icon": "🏛️"
                    },
                    {
                        "he": "Life cycle hooks",
                        "ar": "خطافات دورة الحياة",
                        "icon": "🔄"
                    },
                    {
                        "he": "Components",
                        "ar": "المكونات",
                        "icon": "🧩"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 4,
                "title": {
                    "he": "Virtual DOM",
                    "ar": "Virtual DOM"
                },
                "type": "explanation",
                "icon": "🌐",
                "content": {
                    "he": "החידוש והקונספט המרכזי אותו מביאה ריאקט הוא את ה - Virtual DOM. React תעקוב אחר השינויים בדום וירטואלי ותעדכן את הדום האמיתי רק במקומות שבהם התרחשו השינויים. שיטה זאת יוצרת חיסכון אדיר במשאבים ומהירות תגובה גבוהה לכל שינוי.",
                    "ar": "الابتكار والمفهوم المركزي الذي تجلبه React هو Virtual DOM. سيتتبع React التغييرات في DOM الافتراضي ويحدث DOM الحقيقي فقط في الأماكن التي حدثت فيها التغييرات. هذه الطريقة توفر توفيراً هائلاً في الموارد وسرعة استجابة عالية لكل تغيير."
                },
                "link": "https://reactjs.org/docs/faq-internals.html",
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 5,
                "title": {
                    "he": "Installation",
                    "ar": "التثبيت"
                },
                "type": "installation",
                "icon": "⚙️",
                "command": "npm i -g create-react-app",
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 6,
                "title": {
                    "he": "New React Project",
                    "ar": "مشروع React جديد"
                },
                "type": "project-creation",
                "icon": "🚀",
                "steps": [
                    {
                        "he": "לאחר שהורדנו והתקנו את התוסף create-react-app נוכל להשתמש בו כדי לפתוח פרויקט חדש ב - React",
                        "ar": "بعد تحميل وتثبيت إضافة create-react-app يمكننا استخدامها لفتح مشروع جديد في React"
                    },
                    {
                        "he": "ניכנס לתוך התיקייה בה אנו מעוניינים ליצור פרויקט חדש של React",
                        "ar": "سندخل إلى المجلد الذي نريد إنشاء مشروع React جديد فيه"
                    },
                    {
                        "he": "נקיש בטרמינל את הפקודה create-react-app client",
                        "ar": "سنكتب في الطرفية الأمر create-react-app client"
                    },
                    {
                        "he": "כשפעולת ה - CLI תסתיים ונראה את הכיתוב \"Happy hacking!\"",
                        "ar": "عندما تنتهي عملية CLI ونرى النص \"Happy hacking!\""
                    }
                ],
                "terminalOutput": {
                    "he": "Success! Created client at C:\\Users\\DELL\\Desktop\\HackerU\\lecturer-work\\Lessons\\REACT\\REACT-HOOKS\\bcard-app\\client\n\nInside that directory, you can run several commands:\n\n  npm start\n    Starts the development server.\n\n  npm run build\n    Bundles the app into static files for production.\n\n  npm test\n    Starts the test runner.\n\n  npm run eject\n    Removes this tool and copies build dependencies, configuration files and scripts into the app directory. If you do this, you can't go back!\n\nWe suggest that you begin by typing:\n\n  cd client\n  npm start\n\nHappy hacking!",
                    "ar": "نجح! تم إنشاء العميل في C:\\Users\\DELL\\Desktop\\HackerU\\lecturer-work\\Lessons\\REACT\\REACT-HOOKS\\bcard-app\\client\n\nداخل هذا المجلد، يمكنك تشغيل عدة أوامر:\n\n  npm start\n    يبدأ خادم التطوير.\n\n  npm run build\n    يحزم التطبيق في ملفات ثابتة للإنتاج.\n\n  npm test\n    يبدأ مشغل الاختبارات.\n\n  npm run eject\n    يزيل هذه الأداة وينسخ تبعيات البناء وملفات التكوين والنصوص البرمجية في مجلد التطبيق. إذا فعلت هذا، لا يمكنك العودة!\n\nنقترح أن تبدأ بكتابة:\n\n  cd client\n  npm start\n\nHappy hacking!"
                },
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 7,
                "title": {
                    "he": "Getting Started",
                    "ar": "البداية"
                },
                "type": "getting-started",
                "icon": "⚡",
                "items": [
                    {
                        "he": "Babel",
                        "ar": "Babel",
                        "icon": "🔨"
                    },
                    {
                        "he": "Component",
                        "ar": "مكون",
                        "icon": "🧩"
                    },
                    {
                        "he": "Template",
                        "ar": "قالب",
                        "icon": "📄"
                    },
                    {
                        "he": "Compilation Error",
                        "ar": "خطأ في التجميع",
                        "icon": "⚠️"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)"
            },
            {
                "id": 8,
                "title": {
                    "he": "Logic & Styling",
                    "ar": "المنطق والتنسيق"
                },
                "type": "logic-styling",
                "icon": "🎨",
                "items": [
                    {
                        "he": "String Interpolation",
                        "ar": "استيفاء النص",
                        "icon": "🔗"
                    },
                    {
                        "he": "Inline Style",
                        "ar": "التنسيق المضمن",
                        "icon": "🎨"
                    },
                    {
                        "he": "Styles from Module",
                        "ar": "التنسيق من الوحدة",
                        "icon": "📦"
                    },
                    {
                        "he": "External Libraries",
                        "ar": "المكتبات الخارجية",
                        "icon": "📚"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)"
            },
            {
                "id": 9,
                "title": {
                    "he": "Props",
                    "ar": "الخصائص"
                },
                "type": "props",
                "icon": "📦",
                "items": [
                    {
                        "he": "Passing String",
                        "ar": "تمرير نص",
                        "icon": "📝"
                    },
                    {
                        "he": "Passing Object",
                        "ar": "تمرير كائن",
                        "icon": "📦"
                    },
                    {
                        "he": "Sending Two Keys",
                        "ar": "إرسال مفتاحين",
                        "icon": "🔑"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #a18cd1 0%, #fbc2eb 100%)"
            },
            {
                "id": 10,
                "title": {
                    "he": "Loops & Events",
                    "ar": "الحلقات والأحداث"
                },
                "type": "loops-events",
                "icon": "🔄",
                "items": [
                    {
                        "he": "Loops",
                        "ar": "الحلقات",
                        "icon": "🔄"
                    },
                    {
                        "he": "Conditional Rendering",
                        "ar": "العرض الشرطي",
                        "icon": "❓"
                    },
                    {
                        "he": "Events",
                        "ar": "الأحداث",
                        "icon": "🎯"
                    },
                    {
                        "he": "Function Invocation",
                        "ar": "استدعاء الدالة",
                        "icon": "⚡"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #fad0c4 0%, #ffd1ff 100%)"
            },
            {
                "id": 11,
                "title": {
                    "he": "PropTypes",
                    "ar": "PropTypes"
                },
                "type": "proptypes",
                "icon": "🔍",
                "items": [
                    {
                        "he": "Main Types",
                        "ar": "الأنواع الرئيسية",
                        "icon": "📋"
                    },
                    {
                        "he": "Array & Object Types",
                        "ar": "أنواع المصفوفة والكائن",
                        "icon": "📊"
                    },
                    {
                        "he": "oneOfType vs oneOf",
                        "ar": "oneOfType مقابل oneOf",
                        "icon": "🔄"
                    },
                    {
                        "he": "isRequired",
                        "ar": "مطلوب",
                        "icon": "✅"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)"
            },
            {
                "id": 12,
                "title": {
                    "he": "React Hooks",
                    "ar": "React Hooks"
                },
                "type": "hooks",
                "icon": "🎣",
                "items": [
                    {
                        "he": "useState",
                        "ar": "useState",
                        "icon": "🎣"
                    },
                    {
                        "he": "useEffect",
                        "ar": "useEffect",
                        "icon": "⚡"
                    },
                    {
                        "he": "Custom Hooks",
                        "ar": "Hooks مخصصة",
                        "icon": "🔧"
                    },
                    {
                        "he": "useCallback",
                        "ar": "useCallback",
                        "icon": "🚀"
                    },
                    {
                        "he": "useMemo",
                        "ar": "useMemo",
                        "icon": "💾"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 13,
                "title": {
                    "he": "React Router",
                    "ar": "React Router"
                },
                "type": "router",
                "icon": "🧭",
                "items": [
                    {
                        "he": "Routes",
                        "ar": "المسارات",
                        "icon": "🛣️"
                    },
                    {
                        "he": "BrowserRouter",
                        "ar": "BrowserRouter",
                        "icon": "🌐"
                    },
                    {
                        "he": "Link & NavLink",
                        "ar": "Link و NavLink",
                        "icon": "🔗"
                    },
                    {
                        "he": "useNavigate",
                        "ar": "useNavigate",
                        "icon": "🧭"
                    },
                    {
                        "he": "Nested Routes",
                        "ar": "المسارات المتداخلة",
                        "icon": "🔀"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 14,
                "title": {
                    "he": "Axios & API",
                    "ar": "Axios و API"
                },
                "type": "api",
                "icon": "🌐",
                "items": [
                    {
                        "he": "axios",
                        "ar": "axios",
                        "icon": "🌐"
                    },
                    {
                        "he": "cardApiService",
                        "ar": "cardApiService",
                        "icon": "🃏"
                    },
                    {
                        "he": "useCards",
                        "ar": "useCards",
                        "icon": "🎴"
                    },
                    {
                        "he": "axios interceptors",
                        "ar": "مقاطعات axios",
                        "icon": "🔄"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 15,
                "title": {
                    "he": "File Structure",
                    "ar": "هيكل الملفات"
                },
                "type": "file-structure",
                "icon": "📁",
                "content": {
                    "he": "תשתית הקבצים שה-CLI יצר:",
                    "ar": "بنية الملفات التي أنشأها CLI:"
                },
                "items": [
                    {
                        "he": "node_modules - תיקייה השומרת בתוכה את הספריות שהורדנו לפרויקט",
                        "ar": "node_modules - مجلد يحفظ المكتبات التي حملناها للمشروع",
                        "icon": "📦"
                    },
                    {
                        "he": "public - תיקייה השומרת את הקבצים הסטאטיים",
                        "ar": "public - مجلد يحفظ الملفات الثابتة",
                        "icon": "🌐"
                    },
                    {
                        "he": "src - תיקייה בה רוב הקוד של הפרויקט ייכתב",
                        "ar": "src - مجلد حيث سيتم كتابة معظم كود المشروع",
                        "icon": "💻"
                    },
                    {
                        "he": ".gitignore - קובץ קונפיגורציות של git",
                        "ar": ".gitignore - ملف تكوين git",
                        "icon": "🚫"
                    },
                    {
                        "he": "package.json - קובץ קונפיגורציות הכולל פקודות ותלויות",
                        "ar": "package.json - ملف تكوين يتضمن الأوامر والتبعيات",
                        "icon": "⚙️"
                    },
                    {
                        "he": "package-lock.json - קובץ השומר את גרסאות הספריות",
                        "ar": "package-lock.json - ملف يحفظ إصدارات المكتبات",
                        "icon": "🔒"
                    },
                    {
                        "he": "README.md - קובץ בו ניתן לכתוב פרטים על הפרויקט",
                        "ar": "README.md - ملف يمكن كتابة تفاصيل المشروع فيه",
                        "icon": "📖"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 16,
                "title": {
                    "he": "Public Folder",
                    "ar": "مجلد Public"
                },
                "type": "public-folder",
                "icon": "🌐",
                "content": {
                    "he": "תוכן תיקיית public:",
                    "ar": "محتويات مجلد public:"
                },
                "items": [
                    {
                        "he": "favicon.ico - קובץ התמונה שריאקט משתמשת בו באופן דיפולטיבי",
                        "ar": "favicon.ico - ملف الصورة الذي تستخدمه React افتراضياً",
                        "icon": "⭐"
                    },
                    {
                        "he": "index.html - קובץ ה-HTML המרכזי של הפרויקט",
                        "ar": "index.html - ملف HTML الرئيسي للمشروع",
                        "icon": "📄"
                    },
                    {
                        "he": "logo192.png - הלוגו של ריאקט קטן",
                        "ar": "logo192.png - شعار React الصغير",
                        "icon": "🖼️"
                    },
                    {
                        "he": "logo512.png - הלוגו של ריאקט בגדול יותר",
                        "ar": "logo512.png - شعار React الأكبر",
                        "icon": "🖼️"
                    },
                    {
                        "he": "manifest.json - קובץ קונפיגורציות לאפליקציה של מובייל או דסקטופ",
                        "ar": "manifest.json - ملف تكوين لتطبيق الهاتف المحمول أو سطح المكتب",
                        "icon": "📱"
                    },
                    {
                        "he": "robots.txt - קובץ העוזר למנוע החיפוש google בסריקת האפליקציה",
                        "ar": "robots.txt - ملف يساعد محرك البحث Google في فحص التطبيق",
                        "icon": "🤖"
                    }
                ],
                "link": "https://www.youtube.com/watch?v=fzm-zYHjlgY",
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 17,
                "title": {
                    "he": "index.html",
                    "ar": "index.html"
                },
                "type": "index-html",
                "icon": "📄",
                "content": {
                    "he": "מבנה קובץ index.html:",
                    "ar": "هيكل ملف index.html:"
                },
                "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <meta name=\"theme-color\" content=\"#000000\" />\n  <meta name=\"description\" content=\"Web site created using create-react-app\" />\n  <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n  <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n  <title>React App</title>\n</head>\n<body>\n  <noscript>You need to enable JavaScript to run this app.</noscript>\n  <div id=\"root\"></div>\n</body>\n</html>",
                "explanations": [
                    {
                        "he": "קישור למיקום תמונת ה-favicon",
                        "ar": "رابط لموقع صورة favicon"
                    },
                    {
                        "he": "קישור למיקום התמונה ל-Apple",
                        "ar": "رابط لموقع الصورة لـ Apple"
                    },
                    {
                        "he": "קישור מיקום קובץ manifest.json",
                        "ar": "رابط موقع ملف manifest.json"
                    },
                    {
                        "he": "כותרת האפליקציה",
                        "ar": "عنوان التطبيق"
                    },
                    {
                        "he": "האלמנט אליו יוזרקו כל שאר הקומפוננטות",
                        "ar": "العنصر الذي سيتم حقن جميع المكونات الأخرى فيه"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 18,
                "title": {
                    "he": "src Folder",
                    "ar": "مجلد src"
                },
                "type": "src-folder",
                "icon": "💻",
                "content": {
                    "he": "תוכן תיקיית src:",
                    "ar": "محتويات مجلد src:"
                },
                "items": [
                    {
                        "he": "App.css - קובץ העיצוב של הקומפוננט app",
                        "ar": "App.css - ملف التصميم لمكون app",
                        "icon": "🎨"
                    },
                    {
                        "he": "App.js - קובץ הלוגיקה של הקומפוננט app",
                        "ar": "App.js - ملف منطق مكون app",
                        "icon": "⚡"
                    },
                    {
                        "he": "App.test.js - קובץ הבדיקות של הקומפוננט app",
                        "ar": "App.test.js - ملف اختبارات مكون app",
                        "icon": "🧪"
                    },
                    {
                        "he": "index.css - קובץ העיצוב של הקומפוננט index",
                        "ar": "index.css - ملف التصميم لمكون index",
                        "icon": "🎨"
                    },
                    {
                        "he": "index.js - קובץ הלוגיקה של קומפוננט index",
                        "ar": "index.js - ملف منطق مكون index",
                        "icon": "⚡"
                    },
                    {
                        "he": "logo.svg - קובץ הלוגו של ריאקט",
                        "ar": "logo.svg - ملف شعار React",
                        "icon": "🖼️"
                    },
                    {
                        "he": "reportWebVitals.js - בדיקת אופטימיזציה של האפליקציה",
                        "ar": "reportWebVitals.js - فحص تحسين التطبيق",
                        "icon": "📊"
                    },
                    {
                        "he": "setupTests.js - קובץ הבדיקות המרכזי של האפליקציה",
                        "ar": "setupTests.js - ملف الاختبارات الرئيسي للتطبيق",
                        "icon": "🧪"
                    }
                ],
                "link": "https://www.youtube.com/watch?v=00RoZfIFE34",
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 19,
                "title": {
                    "he": "App.js",
                    "ar": "App.js"
                },
                "type": "app-js",
                "icon": "⚡",
                "content": {
                    "he": "מבנה קובץ App.js:",
                    "ar": "هيكل ملف App.js:"
                },
                "code": "import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Edit <code>src/App.js</code> and save to reload.</p>\n        <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;",
                "explanations": [
                    {
                        "he": "ייבוא קובץ ה-logo לקומפוננט",
                        "ar": "استيراد ملف الشعار للمكون"
                    },
                    {
                        "he": "ייבוא קובץ העיצוב לקומפוננט",
                        "ar": "استيراد ملف التصميم للمكون"
                    },
                    {
                        "he": "יצירת הקומפוננט App",
                        "ar": "إنشاء مكون App"
                    },
                    {
                        "he": "התצוגה לגולש (מה שהפונקציה מחזירה)",
                        "ar": "العرض للمستخدم (ما ترجعه الدالة)"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 20,
                "title": {
                    "he": "index.js",
                    "ar": "index.js"
                },
                "type": "index-js",
                "icon": "⚡",
                "content": {
                    "he": "קובץ הלוגיקה המרכזי של האפליקציה:",
                    "ar": "ملف المنطق الرئيسي للتطبيق:"
                },
                "code": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\nreportWebVitals();",
                "explanations": [
                    {
                        "he": "ייבוא מודולים: React, ReactDOM, index.css, App, reportWebVitals",
                        "ar": "استيراد الوحدات: React, ReactDOM, index.css, App, reportWebVitals"
                    },
                    {
                        "he": "יצירת קבוע בשם root שערכו שווה להפעלת ReactDOM.createRoot",
                        "ar": "إنشاء ثابت باسم root قيمته تساوي تشغيل ReactDOM.createRoot"
                    },
                    {
                        "he": "הפעלת root.render אשר תזריק את הקומפוננטות",
                        "ar": "تشغيل root.render الذي سيقوم بحقن المكونات"
                    },
                    {
                        "he": "עטיפת האפליקציה ב-React.StrictMode",
                        "ar": "لف التطبيق في React.StrictMode"
                    },
                    {
                        "he": "הצבת קומפוננט App כך שתוצג לגולש",
                        "ar": "وضع مكون App ليتم عرضه للمستخدم"
                    },
                    {
                        "he": "הפעלת reportWebVitals",
                        "ar": "تشغيل reportWebVitals"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 21,
                "title": {
                    "he": "React Server",
                    "ar": "خادم React"
                },
                "type": "react-server",
                "icon": "🖥️",
                "content": {
                    "he": "בעזרת הפקודה בטרמינל npm start נפעיל את השרת הזמני של ריאקט ונוכל לראות את התצוגה הראשונית של האפליקציה",
                    "ar": "باستخدام الأمر في الطرفية npm start سنقوم بتشغيل الخادم المؤقت لـ React ويمكننا رؤية العرض الأولي للتطبيق"
                },
                "command": "npm start",
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 22,
                "title": {
                    "he": "React Developer Tools - Components",
                    "ar": "أدوات مطور React - المكونات"
                },
                "type": "dev-tools-components",
                "icon": "🔧",
                "content": {
                    "he": "לשונית Components מראה לנו נתונים נוספים על קומפוננט נבחרת:",
                    "ar": "تبويب Components يظهر لنا بيانات إضافية حول المكون المحدد:"
                },
                "items": [
                    {
                        "he": "בחלק זה של הדף נראה איפה עומדת הקומפוננט בהיררכיה של האפליקציה",
                        "ar": "في هذا الجزء من الصفحة سنرى مكان المكون في تسلسل التطبيق",
                        "icon": "🌳"
                    },
                    {
                        "he": "props - נתונים שהועברו לקומפוננט",
                        "ar": "props - البيانات المرسلة للمكون",
                        "icon": "📦"
                    },
                    {
                        "he": "state - משתנים ש-React תגיב לשינויים בערכיהם",
                        "ar": "state - متغيرات سيتفاعل معها React عند تغيير قيمها",
                        "icon": "🔄"
                    },
                    {
                        "he": "rendered by - הפונקציה שאחראית על טעינה וטעינה מחדש של הקומפוננט",
                        "ar": "rendered by - الدالة المسؤولة عن تحميل وإعادة تحميل المكون",
                        "icon": "⚡"
                    },
                    {
                        "he": "source - קובץ המקור",
                        "ar": "source - ملف المصدر",
                        "icon": "📄"
                    }
                ],
                "note": {
                    "he": "בגלל שאנו לא מנהלים state בקומפוננט הזה אני לא רואה את הנתונים הללו",
                    "ar": "لأننا لا ندير state في هذا المكون لا أرى هذه البيانات"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 23,
                "title": {
                    "he": "React Developer Tools - Profiler",
                    "ar": "أدوات مطور React - المحلل"
                },
                "type": "dev-tools-profiler",
                "icon": "📊",
                "content": {
                    "he": "בלשונית Profiler נוכל לעשות בדיקות אופטימיזציה:",
                    "ar": "في تبويب Profiler يمكننا إجراء اختبارات التحسين:"
                },
                "steps": [
                    {
                        "he": "לחיצה על כפתור record תתחיל להאזין לאירועים שקורים ב-DOM",
                        "ar": "النقر على زر record سيبدأ في الاستماع للأحداث التي تحدث في DOM"
                    },
                    {
                        "he": "לחיצה נוספת תעצור את ההקלטה ובמידה ויהיו נתונים להצגה החלקים הללו יוצגו לנו",
                        "ar": "نقرة أخرى ستوقف التسجيل وإذا كانت هناك بيانات للعرض ستظهر لنا هذه الأجزاء"
                    },
                    {
                        "he": "לחיצה על אחד מהאירועים תיתן לנו פרטים עליו",
                        "ar": "النقر على أحد الأحداث سيعطينا تفاصيل عنه"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 24,
                "title": {
                    "he": "Cleaning App.js",
                    "ar": "تنظيف App.js"
                },
                "type": "cleaning-app",
                "icon": "🧹",
                "content": {
                    "he": "ניקוי קובץ App.js:",
                    "ar": "تنظيف ملف App.js:"
                },
                "steps": [
                    {
                        "he": "מחיקת ייבוא קובץ הלוגו של ריאקט",
                        "ar": "حذف استيراد ملف شعار React"
                    },
                    {
                        "he": "מחיקת תוכן האלמנט div עם המחלקה העיצובית App",
                        "ar": "حذف محتوى عنصر div مع فئة التصميم App"
                    },
                    {
                        "he": "התוצאה - קובץ App.js נקי ומוכן לפיתוח",
                        "ar": "النتيجة - ملف App.js نظيف وجاهز للتطوير"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 25,
                "title": {
                    "he": "CSS Setup",
                    "ar": "إعداد CSS"
                },
                "type": "css-setup",
                "icon": "🎨",
                "content": {
                    "he": "הגדרת CSS בפרויקט:",
                    "ar": "إعداد CSS في المشروع:"
                },
                "steps": [
                    {
                        "he": "מחיקת תוכן הקובץ index.css",
                        "ar": "حذف محتوى ملف index.css"
                    },
                    {
                        "he": "יצירה של מחלקות עיצוביות משלנו",
                        "ar": "إنشاء فئات تصميم خاصة بنا"
                    },
                    {
                        "he": "מחיקת התוכן של הקובץ App.css",
                        "ar": "حذف محتوى ملف App.css"
                    }
                ],
                "cssExample": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.cursor {\n  cursor: pointer;\n}",
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 26,
                "title": {
                    "he": "Customizing index.html",
                    "ar": "تخصيص index.html"
                },
                "type": "customizing-index",
                "icon": "⚙️",
                "content": {
                    "he": "התאמה אישית של קובץ index.html:",
                    "ar": "تخصيص ملف index.html:"
                },
                "steps": [
                    {
                        "he": "החלפת ה-icon לתמונת ה-icon שייבאנו לפרויקט",
                        "ar": "استبدال الأيقونة بصورة الأيقونة التي استوردناها للمشروع"
                    },
                    {
                        "he": "החלפת ה-icon למקרה ומשתמשים ב-Apple",
                        "ar": "استبدال الأيقونة لحالة استخدام Apple"
                    },
                    {
                        "he": "שינוי הכיתוב באלמנט ה-title לשם האפליקציה",
                        "ar": "تغيير النص في عنصر title لاسم التطبيق"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 27,
                "title": {
                    "he": "Customizing manifest.json",
                    "ar": "تخصيص manifest.json"
                },
                "type": "customizing-manifest",
                "icon": "📱",
                "content": {
                    "he": "התאמה אישית של קובץ manifest.json:",
                    "ar": "تخصيص ملف manifest.json:"
                },
                "steps": [
                    {
                        "he": "שינוי השם המקוצר של האפליקציה",
                        "ar": "تغيير الاسم المختصر للتطبيق"
                    },
                    {
                        "he": "קביעת השם המלא של האפליקציה",
                        "ar": "تحديد الاسم الكامل للتطبيق"
                    },
                    {
                        "he": "שינוי מיקום התמונות בשביל ה-icons",
                        "ar": "تغيير موقع الصور للأيقونات"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 28,
                "title": {
                    "he": "Initial App Task",
                    "ar": "مهمة التطبيق الأولية"
                },
                "type": "initial-task",
                "icon": "📋",
                "content": {
                    "he": "משימת initial app - Business-cards-app:",
                    "ar": "مهمة التطبيق الأولية - Business-cards-app:"
                },
                "steps": [
                    {
                        "he": "הורד את ה-CLI של create-react-app באופן גלובלי",
                        "ar": "قم بتحميل CLI الخاص بـ create-react-app بشكل عام"
                    },
                    {
                        "he": "פתח פרויקט חדש בעזרת create-react-app בשם client",
                        "ar": "افتح مشروع جديد باستخدام create-react-app باسم client"
                    },
                    {
                        "he": "הכן את הפרויקט לעבודה על ידי ניקוי הקבצים והתיקיות הלא רלוונטיות לפרויקט",
                        "ar": "جهز المشروع للعمل من خلال تنظيف الملفات والمجلدات غير ذات الصلة بالمشروع"
                    },
                    {
                        "he": "הוסף קבצים ותיקיות שיידרשו לפרויקט כמו שמופיע בשקפים הקודמים",
                        "ar": "أضف الملفات والمجلدات المطلوبة للمشروع كما هو موضح في الشرائح السابقة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 29,
                "title": {
                    "he": "Babel.js",
                    "ar": "Babel.js"
                },
                "type": "babel-intro",
                "icon": "🔧",
                "content": {
                    "he": "A JavaScript compiler",
                    "ar": "مترجم JavaScript"
                },
                "link": "https://babeljs.io",
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 30,
                "title": {
                    "he": "Babel Definition",
                    "ar": "تعريف Babel"
                },
                "type": "babel-definition",
                "icon": "🔍",
                "content": {
                    "he": "Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments",
                    "ar": "Babel هو سلسلة أدوات تُستخدم بشكل أساسي لتحويل كود ECMAScript 2015+ إلى إصدار متوافق مع الإصدارات السابقة من JavaScript في المتصفحات أو البيئات الحالية والأقدم"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 31,
                "title": {
                    "he": "Babel Benefits",
                    "ar": "فوائد Babel"
                },
                "type": "babel-benefits",
                "icon": "👍",
                "content": {
                    "he": "היתרונות של Babel:",
                    "ar": "فوائد Babel:"
                },
                "items": [
                    {
                        "he": "Source code transformations",
                        "ar": "تحويلات الكود المصدري",
                        "icon": "🔄"
                    },
                    {
                        "he": "Shows compilation errors clearly",
                        "ar": "يظهر أخطاء التجميع بوضوح",
                        "icon": "⚠️"
                    },
                    {
                        "he": "Compatibility with all types of browsers",
                        "ar": "التوافق مع جميع أنواع المتصفحات",
                        "icon": "🌐"
                    },
                    {
                        "he": "Allows writing declarative code",
                        "ar": "يسمح بكتابة كود تصريحي",
                        "icon": "📝"
                    },
                    {
                        "he": "Polyfill features that are missing in your target environment through a third-party polyfill",
                        "ar": "ملء الميزات المفقودة في بيئتك المستهدفة من خلال polyfill طرف ثالث",
                        "icon": "🔧"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 32,
                "title": {
                    "he": "Babel Sandbox",
                    "ar": "صندوق رمل Babel"
                },
                "type": "babel-sandbox",
                "icon": "🏖️",
                "content": {
                    "he": "דוגמה לתהליך המרת הקוד באמצעות babel.js ניתן לראות באתר שלהם תחת הלשונית https://babeljs.io/ בתפריט הניווט של Try it out",
                    "ar": "مثال على عملية تحويل الكود باستخدام babel.js يمكن رؤيته على موقعهم تحت التبويب https://babeljs.io/ في قائمة التنقل Try it out"
                },
                "parts": [
                    {
                        "he": "מסך ימני – מציג את הקוד לאחר תהליך הקומפילציה",
                        "ar": "الشاشة اليمنى - تعرض الكود بعد عملية التجميع",
                        "icon": "📺"
                    },
                    {
                        "he": "מסך אמצעי – משמש לכתיבת קוד javascript דקלרטיבי ועדכני",
                        "ar": "الشاشة الوسطى - تُستخدم لكتابة كود JavaScript تصريحي وحديث",
                        "icon": "💻"
                    },
                    {
                        "he": "תפריט צידי – ובו אפשרויות שונות לתצוגת הקוד לאחר קומפילציה",
                        "ar": "القائمة الجانبية - وتحتوي على خيارات مختلفة لعرض الكود بعد التجميع",
                        "icon": "⚙️"
                    }
                ],
                "link": "https://www.youtube.com/watch?v=UeVq_U5obnE&t=149s",
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 33,
                "title": {
                    "he": "Component",
                    "ar": "المكون"
                },
                "type": "component-intro",
                "icon": "🧩",
                "content": {
                    "he": "יחידת קוד עצמאית ואחת מאבני היסוד של ספריית React",
                    "ar": "وحدة كود مستقلة وأحد اللبنات الأساسية لمكتبة React"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 34,
                "title": {
                    "he": "Component Definition",
                    "ar": "تعريف المكون"
                },
                "type": "component-definition",
                "icon": "🔍",
                "content": {
                    "he": "Components let you split the UI into independent, reusable pieces, and think about each piece in isolation",
                    "ar": "المكونات تسمح لك بتقسيم واجهة المستخدم إلى قطع مستقلة وقابلة لإعادة الاستخدام، والتفكير في كل قطعة بمعزل عن غيرها"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 35,
                "title": {
                    "he": "Components Structure",
                    "ar": "هيكل المكونات"
                },
                "type": "components-structure",
                "icon": "🏗️",
                "content": {
                    "he": "מבנה המרכיבים:",
                    "ar": "هيكل المكونات:"
                },
                "items": [
                    {
                        "he": "Template - HTML",
                        "ar": "القالب - HTML",
                        "icon": "📄"
                    },
                    {
                        "he": "Logic - JavaScript",
                        "ar": "المنطق - JavaScript",
                        "icon": "🧠"
                    },
                    {
                        "he": "Styles - CSS",
                        "ar": "التنسيق - CSS",
                        "icon": "🎨"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 36,
                "title": {
                    "he": "Components Types",
                    "ar": "أنواع المكونات"
                },
                "type": "components-types",
                "icon": "🔀",
                "content": {
                    "he": "סוגי המרכיבים:",
                    "ar": "أنواع المكونات:"
                },
                "items": [
                    {
                        "he": "Function",
                        "ar": "الدالة",
                        "icon": "⚡"
                    },
                    {
                        "he": "Class",
                        "ar": "الفئة",
                        "icon": "🏛️"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 37,
                "title": {
                    "he": "Infrastructure Preparation",
                    "ar": "إعداد البنية التحتية"
                },
                "type": "infrastructure-prep",
                "icon": "🏗️",
                "content": {
                    "he": "הכנת תשתית:",
                    "ar": "إعداد البنية التحتية:"
                },
                "steps": [
                    {
                        "he": "בתוך תיקיית src ניצור תיקייה חדשה בשם components",
                        "ar": "داخل مجلد src سنقوم بإنشاء مجلد جديد باسم components"
                    },
                    {
                        "he": "בתוכה ניצור קובץ בשם PageHeader.jsx",
                        "ar": "داخله سنقوم بإنشاء ملف باسم PageHeader.jsx"
                    },
                    {
                        "he": "קומפוננט תמיד תתחיל באות גדולה",
                        "ar": "المكون دائماً يبدأ بحرف كبير"
                    },
                    {
                        "he": "סיומת tsx / jsx אילו הסיומות של babel",
                        "ar": "امتداد tsx / jsx هي امتدادات babel"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 38,
                "title": {
                    "he": "Template",
                    "ar": "القالب"
                },
                "type": "template",
                "icon": "📄",
                "content": {
                    "he": "ניצור קומפוננט מסוג פונקציה שתחזיר אלמנט של HTML אותו נציג לגולש",
                    "ar": "سنقوم بإنشاء مكون من نوع دالة سترجع عنصر HTML سنعرضه للمستخدم"
                },
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 39,
                "title": {
                    "he": "Creating Components",
                    "ar": "إنشاء المكونات"
                },
                "type": "creating-components",
                "icon": "⚡",
                "content": {
                    "he": "יצירת קומפוננטים:",
                    "ar": "إنشاء المكونات:"
                },
                "code": {
                    "pageHeader": "const PageHeader = () => {\n  return <h2>pageHeader works!</h2>;\n};\n\nexport default PageHeader;",
                    "app": "import \"./App.css\";\nimport PageHeader from \"./components/PageHeader\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageHeader />\n    </div>\n  );\n}\n\nexport default App;"
                },
                "explanations": [
                    {
                        "he": "ניצור קבוע בשם PageHeader שערכו יהיה שווה לפונקציה אנונימית",
                        "ar": "سنقوم بإنشاء ثابت باسم PageHeader قيمته ستكون دالة مجهولة"
                    },
                    {
                        "he": "הפונקציה תחזיר אלמנט של HTML מסוג H2 עם הכיתוב בתוכו",
                        "ar": "الدالة سترجع عنصر HTML من نوع H2 مع النص بداخله"
                    },
                    {
                        "he": "לבסוף נייצא את הפונקציה מהמודול באמצעות export default",
                        "ar": "أخيراً سنصدر الدالة من الوحدة باستخدام export default"
                    },
                    {
                        "he": "נייבא את הקומפוננט שיצרנו",
                        "ar": "سنستورد المكون الذي أنشأناه"
                    },
                    {
                        "he": "נציב אותה בתוך החלק של ה-HTML אותה הפונקציה של הקומפוננט App מחזירה",
                        "ar": "سنضعها داخل جزء HTML الذي ترجعه دالة مكون App"
                    }
                ],
                "notes": [
                    {
                        "he": "במצגת זאת נתמקד בקומפוננטות מסוג functional components",
                        "ar": "في هذه العروض التقديمية سنركز على المكونات من نوع functional components"
                    },
                    {
                        "he": "חובה לעטוף את כל האלמנטים שהפונקציה מחזירה באלמנט או של React או של HTML",
                        "ar": "من الضروري لف جميع العناصر التي ترجعها الدالة في عنصر واحد من React أو HTML"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 40,
                "title": {
                    "he": "Browser Result",
                    "ar": "النتيجة في المتصفح"
                },
                "type": "browser-result",
                "icon": "🌐",
                "content": {
                    "he": "התוצאה בדפדפן:",
                    "ar": "النتيجة في المتصفح:"
                },
                "result": "pageHeader works!",
                "explanation": {
                    "he": "ניתן לראות שהטקסט שהחזרנו מהקומפוננט שיצרנו Pageheader מוצג לגולש עם העיצוב של אלמנט ה-H2 שנתנו לו",
                    "ar": "يمكن رؤية أن النص الذي أرجعناه من المكون الذي أنشأناه Pageheader معروض للمستخدم مع تصميم عنصر H2 الذي أعطيناه له"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 41,
                "title": {
                    "he": "Compilation Error",
                    "ar": "خطأ في التجميع"
                },
                "type": "compilation-error",
                "icon": "⚠️",
                "content": {
                    "he": "במידה ותהיה שגיאה בקוד Babel תתריע לי על כך במספר מקומות",
                    "ar": "إذا كان هناك خطأ في الكود، Babel سينبهني لذلك في عدة أماكن"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 42,
                "title": {
                    "he": "Error Detection",
                    "ar": "كشف الأخطاء"
                },
                "type": "error-detection",
                "icon": "🔍",
                "content": {
                    "he": "איתור שגיאה:",
                    "ar": "كشف الأخطاء:"
                },
                "errorIndicators": [
                    {
                        "he": "עץ התיקייה והקובץ ייצבע באדום",
                        "ar": "شجرة المجلدات والملف ستلون بالأحمر",
                        "icon": "📁"
                    },
                    {
                        "he": "לצד הקובץ בו נעשתה השגיאה יופיע מס' השגיאות בדף",
                        "ar": "بجانب الملف الذي حدثت فيه الخطأ سيظهر رقم الأخطاء في الصفحة",
                        "icon": "🔢"
                    },
                    {
                        "he": "הלשונית של המודול תיצבע אדום",
                        "ar": "تبويب الوحدة سيُلون بالأحمر",
                        "icon": "🏷️"
                    },
                    {
                        "he": "מתחת לקטעי הקוד שדורשים תיקון יופיע קו אדום משונן",
                        "ar": "تحت أجزاء الكود التي تحتاج إصلاح سيظهر خط أحمر متعرج",
                        "icon": "〰️"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
            },
            {
                "id": 43,
                "title": {
                    "he": "VS Code Terminal",
                    "ar": "طرفية VS Code"
                },
                "type": "vscode-terminal",
                "icon": "💻",
                "content": {
                    "he": "בטרמינל של VS Code:",
                    "ar": "في طرفية VS Code:"
                },
                "terminalErrors": [
                    {
                        "he": "תופיע השגיאה Failed to compile",
                        "ar": "ستظهر الخطأ Failed to compile",
                        "icon": "❌"
                    },
                    {
                        "he": "פירוט השגיאה",
                        "ar": "تفاصيل الخطأ",
                        "icon": "📋"
                    },
                    {
                        "he": "באיזה נתיב היא נמצאת",
                        "ar": "في أي مسار هي موجودة",
                        "icon": "📍"
                    }
                ],
                "problemsTab": [
                    {
                        "he": "יופיע באופן מקוצר מיקום השגיאה",
                        "ar": "سيظهر بشكل مختصر موقع الخطأ",
                        "icon": "📍"
                    },
                    {
                        "he": "מהות השגיאה",
                        "ar": "جوهر الخطأ",
                        "icon": "🔍"
                    },
                    {
                        "he": "סוג השגיאה",
                        "ar": "نوع الخطأ",
                        "icon": "🏷️"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 44,
                "title": {
                    "he": "Adding Logic",
                    "ar": "إضافة المنطق"
                },
                "type": "adding-logic",
                "icon": "🧠",
                "content": {
                    "he": "הוספת לוגיקה:",
                    "ar": "إضافة المنطق:"
                },
                "explanation": {
                    "he": "כפי שניתן לראות הקומפוננט מתנהגת כפונקציה לכל דבר ועניין. בדוגמה שלהלן:",
                    "ar": "كما يمكن رؤيته، المكون يتصرف كدالة في كل شيء. في المثال التالي:"
                },
                "code": {
                    "component": "const PageHeader = () => {\n  const sum = 6 * 5;\n  console.log(sum);\n  \n  return (\n    <>\n      <h2>pageHeader works!</h2>\n      <p>hallo world</p>\n    </>\n  );\n};\n\nexport default PageHeader;"
                },
                "steps": [
                    {
                        "he": "אני יוצר קבוע בשם sum ומשווה אותו להכפלת הספרה 6 בספרה 5",
                        "ar": "أقوم بإنشاء ثابت باسم sum وأساويه لضرب الرقم 6 في الرقم 5"
                    },
                    {
                        "he": "אני מדפיס את התוצאה בקונסול",
                        "ar": "أقوم بطباعة النتيجة في الكونسول"
                    }
                ],
                "browserResult": {
                    "he": "התוצאה בדפדפן:",
                    "ar": "النتيجة في المتصفح:"
                },
                "results": [
                    {
                        "he": "הדפסת ערכו של המשתנה sum שיצרתי בקונסול",
                        "ar": "طباعة قيمة المتغير sum الذي أنشأته في الكونسول"
                    },
                    {
                        "he": "לצד תצוגת ה-HTML לגולש",
                        "ar": "بجانب عرض HTML للمستخدم"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 45,
                "title": {
                    "he": "String Interpolation",
                    "ar": "استيفاء النص"
                },
                "type": "string-interpolation",
                "icon": "🔗",
                "content": {
                    "he": "יצירת אזור JAVASCRIPT באזור המוגדר HTML בקומפוננט",
                    "ar": "إنشاء منطقة JAVASCRIPT في المنطقة المحددة HTML في المكون"
                },
                "explanation": {
                    "he": "פתיחת אזור JAVASCRIPT באזור המוגדר HTML מתבצעת על ידי פתיחה וסגירה של סוגריים מסולסלים",
                    "ar": "فتح منطقة JAVASCRIPT في المنطقة المحددة HTML يتم عن طريق فتح وإغلاق الأقواس المجعدة"
                },
                "code": {
                    "component": "const PageHeader = () => {\n  const text = \"Hallo world\";\n\n  return (\n    <>\n      <h2>pageHeader works!</h2>\n      <p>{text}</p>\n      <p>{5 * 6}</p>\n    </>\n  );\n};\n\nexport default PageHeader;"
                },
                "steps": [
                    {
                        "he": "בתוך היקף הקומפוננט אני יוצר קבוע בשם text ומשווה את ערכו למחרוזת תווים",
                        "ar": "داخل نطاق المكون أقوم بإنشاء ثابت باسم text وأساوي قيمته لسلسلة أحرف"
                    },
                    {
                        "he": "באזור המוגדר ל-HTML אני פותח אזור JAVASCRIPT באמצעות פתיחת סוגריים מסולסלים, ובתוכם אני מניח את השם של הקבוע שיצרתי",
                        "ar": "في المنطقة المحددة لـ HTML أفتح منطقة JAVASCRIPT باستخدام فتح الأقواس المجعدة، وبداخلها أضع اسم الثابت الذي أنشأته"
                    },
                    {
                        "he": "בנוסף, באמצעות string interpolation אני גם פותח אזור JAVASCRIPT בתוך אלמנט HTML אחר, והפעם אני מבצע חישוב כפי ששפת JAVASCRIPT יודעת לעשות",
                        "ar": "بالإضافة إلى ذلك، باستخدام استيفاء النص أفتح أيضاً منطقة JAVASCRIPT داخل عنصر HTML آخر، وهذه المرة أقوم بإجراء حساب كما تعرف لغة JAVASCRIPT أن تفعل"
                    }
                ],
                "browserResult": {
                    "he": "התוצאה בדפדפן:",
                    "ar": "النتيجة في المتصفح:"
                },
                "results": [
                    {
                        "he": "כפי שניתן לראות, הטקסט הוצב במקום שהגדרתי אותו",
                        "ar": "كما يمكن رؤيته، النص وُضع في المكان الذي حددته له"
                    },
                    {
                        "he": "החישוב בוצע במקום שהגדרתי אותו",
                        "ar": "تم إجراء الحساب في المكان الذي حددته له"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 46,
                "title": {
                    "he": "Styles",
                    "ar": "التنسيقات"
                },
                "type": "styles",
                "icon": "🎨",
                "content": {
                    "he": "הוספת עיצוב לקומפוננט",
                    "ar": "إضافة تصميم للمكون"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 47,
                "title": {
                    "he": "Styles Types",
                    "ar": "أنواع التنسيقات"
                },
                "type": "styles-types",
                "icon": "🎨",
                "content": {
                    "he": "סוגי העיצוב:",
                    "ar": "أنواع التصميم:"
                },
                "items": [
                    {
                        "he": "INLINE",
                        "ar": "مضمن",
                        "icon": "📝"
                    },
                    {
                        "he": "IMPORT STYLES FROM MODULE",
                        "ar": "استيراد التنسيقات من الوحدة",
                        "icon": "📥"
                    },
                    {
                        "he": "EXTERNAL LIBRARIES",
                        "ar": "المكتبات الخارجية",
                        "icon": "📚"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 48,
                "title": {
                    "he": "Inline Style",
                    "ar": "التنسيق المضمن"
                },
                "type": "inline-style",
                "icon": "📝",
                "content": {
                    "he": "הדרך להזריק inline style לאלמנט HTML בקומפוננט של ריאקט היא על ידי הוספת המאפיין style ולהשוות את הערך שלו לאזור javascript שלתוכו נעביר אובייקט עם קונפיגורציות העיצוב שאנו מעוניינים לשנות",
                    "ar": "الطريقة لحقن inline style في عنصر HTML في مكون React هي عن طريق إضافة الخاصية style وتساوي قيمتها لمنطقة javascript نمرر إليها كائن مع تكوينات التصميم التي نريد تغييرها"
                },
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 49,
                "title": {
                    "he": "External Libraries",
                    "ar": "المكتبات الخارجية"
                },
                "type": "external-libraries",
                "icon": "📚",
                "content": {
                    "he": "הדרך השלישית לעיצוב אלמנטים של HTML בקומפוננטות של ריאקט היא באמצעות הבאת ספריות עיצוב חיצוניות ושימוש במחלקות העיצוביות שלהן",
                    "ar": "الطريقة الثالثة لتصميم عناصر HTML في مكونات React هي عن طريق جلب مكتبات التصميم الخارجية واستخدام فئاتها التصميمية"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 50,
                "title": {
                    "he": "Material UI",
                    "ar": "Material UI"
                },
                "type": "material-ui",
                "icon": "🎨",
                "content": {
                    "he": "The Material Design library adapted to work with React",
                    "ar": "مكتبة Material Design المتكيفة للعمل مع React"
                },
                "link": "https://mui.com/",
                "note": {
                    "he": "יש לעבור על מצגת material-UI לפני שממשיכים במצגת זאת",
                    "ar": "يجب المرور على عرض Material-UI قبل المتابعة في هذا العرض"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 51,
                "title": {
                    "he": "Authentication",
                    "ar": "المصادقة"
                },
                "type": "auth",
                "icon": "🔐",
                "items": [
                    {
                        "he": "Login",
                        "ar": "تسجيل الدخول",
                        "icon": "🔑"
                    },
                    {
                        "he": "JWT",
                        "ar": "JWT",
                        "icon": "🎫"
                    },
                    {
                        "he": "localStorage",
                        "ar": "localStorage",
                        "icon": "💾"
                    },
                    {
                        "he": "Signup",
                        "ar": "التسجيل",
                        "icon": "📝"
                    },
                    {
                        "he": "Logout",
                        "ar": "تسجيل الخروج",
                        "icon": "🚪"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 27,
                "title": {
                    "he": "Customizing index.html",
                    "ar": "تخصيص index.html"
                },
                "type": "customizing-index",
                "icon": "⚙️",
                "content": {
                    "he": "התאמה אישית של קובץ index.html:",
                    "ar": "تخصيص ملف index.html:"
                },
                "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <link rel=\"icon\" href=\"%PUBLIC_URL%/assets/images/business-card.png\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <meta name=\"theme-color\" content=\"#000000\" />\n  <meta name=\"description\" content=\"Web site created using create-react-app\" />\n  <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/assets/images/business-card.png\" />\n  <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n  <title>Business Cards App</title>\n</head>\n<body>\n  <div id=\"root\"></div>\n</body>\n</html>",
                "explanations": [
                    {
                        "he": "החלפת ה-icon לתמונת ה-icon שייבאנו לפרויקט",
                        "ar": "استبدال الأيقونة بصورة الأيقونة التي استوردناها للمشروع"
                    },
                    {
                        "he": "החלפת ה-icon למקרה ומשתמשים ב-Apple",
                        "ar": "استبدال الأيقونة لحالة مستخدمي Apple"
                    },
                    {
                        "he": "שינוי הכיתוב באלמנט ה-title לשם האפליקציה",
                        "ar": "تغيير النص في عنصر title لاسم التطبيق"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 28,
                "title": {
                    "he": "Customizing manifest.json",
                    "ar": "تخصيص manifest.json"
                },
                "type": "customizing-manifest",
                "icon": "📱",
                "content": {
                    "he": "התאמה אישית של קובץ manifest.json:",
                    "ar": "تخصيص ملف manifest.json:"
                },
                "code": "{\n  \"short_name\": \"Business cards app\",\n  \"name\": \"Business card application for business and clients\",\n  \"icons\": [\n    {\n      \"src\": \"./assets/images/business-card.png\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    },\n    {\n      \"src\": \"./assets/images/business-card.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"./assets/images/business-card.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}",
                "explanations": [
                    {
                        "he": "שינוי השם המקוצר של האפליקציה",
                        "ar": "تغيير الاسم المختصر للتطبيق"
                    },
                    {
                        "he": "קביעת השם המלא של האפליקציה",
                        "ar": "تحديد الاسم الكامل للتطبيق"
                    },
                    {
                        "he": "שינוי מיקום התמונות בשביל ה-icons",
                        "ar": "تغيير موقع الصور للأيقونات"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 29,
                "title": {
                    "he": "Initial App Task",
                    "ar": "مهمة التطبيق الأولية"
                },
                "type": "initial-task",
                "icon": "📋",
                "content": {
                    "he": "משימת initial app - Business-cards-app:",
                    "ar": "مهمة التطبيق الأولية - Business-cards-app:"
                },
                "steps": [
                    {
                        "he": "הורד את ה-CLI של create-react-app באופן גלובלי",
                        "ar": "تحميل CLI الخاص بـ create-react-app بشكل عام"
                    },
                    {
                        "he": "פתח פרויקט חדש בעזרת create-react-app בשם client",
                        "ar": "فتح مشروع جديد باستخدام create-react-app باسم client"
                    },
                    {
                        "he": "הכן את הפרויקט לעבודה על ידי ניקוי הקבצים והתיקיות הלא רלוונטיות לפרויקט",
                        "ar": "تحضير المشروع للعمل من خلال تنظيف الملفات والمجلدات غير ذات الصلة بالمشروع"
                    },
                    {
                        "he": "הוסף קבצים ותיקיות שיידרשו לפרויקט כמו שמופיע בשקפים הקודמים",
                        "ar": "إضافة الملفات والمجلدات المطلوبة للمشروع كما يظهر في الشرائح السابقة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 52,
                "type": "props-intro",
                "icon": "📦",
                "title": {
                    "he": "Props",
                    "ar": "Props"
                },
                "content": {
                    "he": "הדרך להזריק נתונים מקומפוננט אב לקומפוננט בן",
                    "ar": "الطريقة لحقن البيانات من مكون الأب إلى مكون الابن"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 53,
                "type": "passing-string",
                "icon": "📝",
                "title": {
                    "he": "Passing string",
                    "ar": "تمرير النص"
                },
                "content": {
                    "he": "העברת מחרוזת תווים מקומפוננט אב לקומפוננט בן בקומפוננט מסוג פונקציה",
                    "ar": "تمرير سلسلة أحرف من مكون الأب إلى مكون الابن في مكون من نوع دالة"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 54,
                "type": "child-component",
                "icon": "👶",
                "title": {
                    "he": "Child Component",
                    "ar": "مكون الابن"
                },
                "code": {
                    "component": "import { Typography, Box } from \"@mui/material\";\nimport React from \"react\";\n\nconst ChildComp = props => {\n  const { string } = props;\n  return (\n    <Box\n      sx={{\n        backgroundColor: \"primary.dark\",\n        width: 100,\n        height: 100,\n        \"&:hover\": {\n          backgroundColor: \"primary.main\",\n          opacity: [0.9, 0.8, 0.7]\n        }\n      }}\n    >\n      <Typography variant=\"body1\">child Component</Typography>\n      <Typography>{string}</Typography>\n    </Box>\n  );\n};\n\nexport default ChildComp;"
                },
                "notes": [
                    {
                        "he": "ניצור קומפוננט מסוג פונקציה שתקבל בפרמטר אובייקט של props",
                        "ar": "سننشئ مكوناً من نوع دالة يستقبل كائن props كمعامل"
                    },
                    {
                        "he": "נחלץ את מפתח string מאובייקט props",
                        "ar": "سنستخرج مفتاح string من كائن props"
                    },
                    {
                        "he": "נפתח אזור של JAVASCRIPT בתוך החלק המיועד ל-HTML בקומפוננט ונציב בתוכו את הערך של המפתח שחילצנו מתוך אובייקט הפרופס",
                        "ar": "سنفتح منطقة JAVASCRIPT داخل الجزء المخصص لـ HTML في المكون ونضع فيه قيمة المفتاح الذي استخرجناه من كائن props"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 55,
                "type": "father-component",
                "icon": "👨",
                "title": {
                    "he": "Father Component",
                    "ar": "مكون الأب"
                },
                "code": {
                    "component": "import { Box, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport ChildComp from \"./ChildComp\";\n\nconst FatherComp = () => {\n  const string = \"string from father\";\n  return (\n    <>\n      <Typography variant=\"body1\" m={2}>\n        Father Component - passing string\n      </Typography>\n      <Box\n        sx={{\n          m: 2,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          width: 300,\n          height: 300,\n          backgroundColor: \"secondary.dark\"\n        }}\n      >\n        <ChildComp string={string} />\n      </Box>\n    </>\n  );\n};\n\nexport default FatherComp;"
                },
                "notes": [
                    {
                        "he": "ניצור קומפוננט בשם FatherComp",
                        "ar": "سننشئ مكوناً باسم FatherComp"
                    },
                    {
                        "he": "ניצור קבוע בשם string שערכו יהיה מחרוזת תווים",
                        "ar": "سننشئ ثابتاً باسم string تكون قيمته سلسلة أحرف"
                    },
                    {
                        "he": "נציב את קומפוננט הבן ChildComp בתוך החלק המיועד ל-HTML בקומפוננט האב ונעשה השמה למפתח string בתוך אובייקט ה-props ונקבע את ערכו לקבוע string שיצרנו",
                        "ar": "سنضع مكون الابن ChildComp داخل الجزء المخصص لـ HTML في مكون الأب ونقوم بتعيين مفتاح string داخل كائن props ونحدد قيمته للثابت string الذي أنشأناه"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 56,
                "type": "passing-object",
                "icon": "📦",
                "title": {
                    "he": "Passing Object",
                    "ar": "تمرير الكائن"
                },
                "content": {
                    "he": "העברת אובייקט מקומפוננט אב לקומפוננט בן בקומפוננט מסוג פונקציה וחילוץ המפתחות והערכים ממנו",
                    "ar": "تمرير كائن من مكون الأب إلى مكون الابن في مكون من نوع دالة واستخراج المفاتيح والقيم منه"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 57,
                "type": "child-component-object",
                "icon": "👶",
                "title": {
                    "he": "Child Component",
                    "ar": "مكون الابن"
                },
                "code": {
                    "component": "import { Typography, Box } from \"@mui/material\";\nimport React from \"react\";\n\nconst ChildComp = ({ name }) => {\n  const { first, last } = name;\n  return (\n    <>\n      <Box\n        sx={{\n          backgroundColor: \"primary.dark\",\n          width: 100,\n          height: 100,\n          \"&:hover\": {\n            backgroundColor: \"primary.main\",\n            opacity: [0.9, 0.8, 0.7]\n          }\n        }}\n      >\n        <Typography>{first}</Typography>\n        <Typography>{last}</Typography>\n      </Box>\n    </>\n  );\n};\n\nexport default ChildComp;"
                },
                "notes": [
                    {
                        "he": "בגלל שקומפוננט מסוג פונקציה מתנהגת כמו כל פונקציה ב-JAVASCRIPT אני יכול לחלץ מאובייקט props את המפתחות הרלוונטיים ישר בתוך הפרמטר של הפונקציה",
                        "ar": "لأن مكون من نوع دالة يتصرف مثل أي دالة في JAVASCRIPT يمكنني استخراج المفاتيح ذات الصلة من كائن props مباشرة داخل معامل الدالة"
                    },
                    {
                        "he": "נחלץ את מפתחות first, last מתוך המפתח name שבאובייקט ה-props",
                        "ar": "سنستخرج المفاتيح first, last من المفتاح name في كائن props"
                    },
                    {
                        "he": "נפתח אזור של JAVASCRIPT בתוך החלק המיועד ל-HTML בקומפוננט ונציב בתוכו את הערכים של המפתחות שחילצנו מתוך אובייקט הפרופס",
                        "ar": "سنفتح منطقة JAVASCRIPT داخل الجزء المخصص لـ HTML في المكون ونضع فيه قيم المفاتيح التي استخرجناه من كائن props"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 58,
                "type": "father-component-object",
                "icon": "👨",
                "title": {
                    "he": "Father Component",
                    "ar": "مكون الأب"
                },
                "code": {
                    "component": "import { Box, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport ChildComp from \"./ChildComp\";\n\nconst FatherComp = () => {\n  const name = { first: \"david\", last: \"yakin\" };\n  return (\n    <>\n      <Typography variant=\"body1\" m={2}>\n        Father Component - passing object\n      </Typography>\n      <Box\n        sx={{\n          m: 2,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          width: 300,\n          height: 300,\n          backgroundColor: \"secondary.dark\"\n        }}\n      >\n        <ChildComp name={name} />\n      </Box>\n    </>\n  );\n};\n\nexport default FatherComp;"
                },
                "notes": [
                    {
                        "he": "ניצור קבוע בשם name שערכו יהיה אובייקט עם מפתחות וערכים",
                        "ar": "سننشئ ثابتاً باسم name تكون قيمته كائناً مع مفاتيح وقيم"
                    },
                    {
                        "he": "נעשה השמה למפתח name בתוך אובייקט ה-props ונקבע את ערכו לקבוע name שיצרנו",
                        "ar": "سنقوم بتعيين المفتاح name داخل كائن props ونحدد قيمته للثابت name الذي أنشأناه"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 59,
                "type": "browser-result-object",
                "icon": "🌐",
                "title": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "content": {
                    "he": "ניתן את הכיתוב שהעברנו מקומפוננט האב לקומפוננט הבן בתוך אובייקט מוצג בקומפוננט הבן וכי אובייקט ה-props מכיל כעת מפתח בשם name שהערך שלו זה האובייקט שיצרנו",
                    "ar": "النص الذي مررناه من مكون الأب إلى مكون الابن داخل كائن معروض في مكون الابن وأن كائن props يحتوي الآن على مفتاح باسم name قيمته هي الكائن الذي أنشأناه"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 60,
                "type": "sending-two-keys",
                "icon": "🔑",
                "title": {
                    "he": "Sending two keys",
                    "ar": "إرسال مفتاحين"
                },
                "content": {
                    "he": "הדרך להעביר יותר ממפתח אחד לאובייקט הפרופס",
                    "ar": "الطريقة لتمرير أكثر من مفتاح واحد إلى كائن props"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 61,
                "type": "child-component-two-keys",
                "icon": "👶",
                "title": {
                    "he": "Child Component",
                    "ar": "مكون الابن"
                },
                "code": {
                    "component": "import { Typography, Box } from \"@mui/material\";\nimport React from \"react\";\n\nconst ChildComp = ({ first, last }) => {\n  return (\n    <>\n      <Box\n        sx={{\n          backgroundColor: \"primary.dark\",\n          width: 100,\n          height: 100,\n          \"&:hover\": {\n            backgroundColor: \"primary.main\",\n            opacity: [0.9, 0.8, 0.7]\n          }\n        }}\n      >\n        <Typography>{first}</Typography>\n        <Typography>{last}</Typography>\n      </Box>\n    </>\n  );\n};\n\nexport default ChildComp;"
                },
                "notes": [
                    {
                        "he": "בגלל שקומפוננט מסוג פונקציה מתנהגת כמו כל פונקציה ב-JAVASCRIPT נוכל לחלץ מאובייקט props מספר מפתחות first, last",
                        "ar": "لأن مكون من نوع دالة يتصرف مثل أي دالة في JAVASCRIPT يمكننا استخراج عدة مفاتيح من كائن props: first, last"
                    },
                    {
                        "he": "נפתח אזור של JAVASCRIPT בתוך החלק המיועד ל-HTML בקומפוננט ונציב בתוכו את הערכים של המפתחות שחילצנו מתוך אובייקט הפרופס",
                        "ar": "سنفتح منطقة JAVASCRIPT داخل الجزء المخصص لـ HTML في المكون ونضع فيه قيم المفاتيح التي استخرجناه من كائن props"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 62,
                "type": "father-component-two-keys",
                "icon": "👨",
                "title": {
                    "he": "Father Component",
                    "ar": "مكون الأب"
                },
                "code": {
                    "component": "import { Box, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport ChildComp from \"./ChildComp\";\n\nconst FatherComp = () => {\n  const name = { first: \"david\", last: \"yakin\" };\n  return (\n    <>\n      <Typography variant=\"body1\" m={2}>\n        Father Component - passing two props\n      </Typography>\n      <Box\n        sx={{\n          m: 2,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          width: 300,\n          height: 300,\n          backgroundColor: \"secondary.dark\"\n        }}\n      >\n        <ChildComp first={name.first} last={name.last} />\n      </Box>\n    </>\n  );\n};\n\nexport default FatherComp;"
                },
                "notes": [
                    {
                        "he": "ניצור קבוע בשם name שערכו יהיה אובייקט עם מפתחות וערכים",
                        "ar": "سننشئ ثابتاً باسم name تكون قيمته كائناً مع مفاتيح وقيم"
                    },
                    {
                        "he": "הפעם נעביר כל מפתח מהאובייקט שיצרנו לתוך מפתח משלו באובייקט הפרופס",
                        "ar": "هذه المرة سنمرر كل مفتاح من الكائن الذي أنشأناه إلى مفتاحه الخاص في كائن props"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 63,
                "type": "browser-result-two-keys",
                "icon": "🌐",
                "title": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "content": {
                    "he": "ניתן את הכיתוב שהעברנו מקומפוננט האב לקומפוננט הבן בתוך אובייקט מוצג בקומפוננט הבן וכי אובייקט ה-props מכיל כעת מפתח בשם name שהערך שלו זה האובייקט שיצרנו",
                    "ar": "النص الذي مررناه من مكون الأب إلى مكون الابن داخل كائن معروض في مكون الابن وأن كائن props يحتوي الآن على مفتاح باسم name قيمته هي الكائن الذي أنشأناه"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 64,
                "type": "props-task-business-card",
                "icon": "📋",
                "title": {
                    "he": "משימת Props",
                    "ar": "مهمة Props"
                },
                "content": {
                    "he": "בהמשך למשימת Card במצגת Material-UI צור שלושה קבצים נוספים בתיקייה בנתיב src/cards/components/card",
                    "ar": "تتمة لمهمة Card في عرض Material-UI أنشئ ثلاثة ملفات إضافية في المجلد في المسار src/cards/components/card"
                },
                "items": [
                    {
                        "he": "קבצים נוספים:",
                        "ar": "ملفات إضافية:"
                    },
                    {
                        "he": "CardHead - קומפוננט שיקבל image url ו-alt values מאובייקט props",
                        "ar": "CardHead - مكون سيستقبل image url و alt values من كائن props"
                    },
                    {
                        "he": "CardBody - קומפוננט שיכלול כותרת ראשית ומשנית, divider ושלושה שורות טקסט לכרטיס, יקבל values מהאובייקט card תחת המפתח props",
                        "ar": "CardBody - مكون سيحتوي على عنوان رئيسي وثانوي، divider وثلاثة أسطر نص للبطاقة، سيستقبل values من كائن card تحت المفتاح props"
                    },
                    {
                        "he": "CardActionBar - אזור בכרטיס שיכלול אייקון לב",
                        "ar": "CardActionBar - منطقة في البطاقة ستتضمن أيقونة قلب"
                    },
                    {
                        "he": "בקובץ Card:",
                        "ar": "في ملف Card:"
                    },
                    {
                        "he": "צור קבוע בשם card עם המפתחות והערכים שמופיעים בדוגמה",
                        "ar": "أنشئ ثابتاً باسم card مع المفاتيح والقيم التي تظهر في المثال"
                    },
                    {
                        "he": "הצב את שלושת הקומפוננטים שיצרת בתוך הקומפוננט Card הראשי",
                        "ar": "ضع المكونات الثلاثة التي أنشأتها داخل مكون Card الرئيسي"
                    },
                    {
                        "he": "העבר את המידע הנדרש לקומפוננטים הבנים באמצעות אובייקט הפרופס לתצוגה",
                        "ar": "مرر المعلومات المطلوبة للمكونات الفرعية باستخدام كائن props للعرض"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 65,
                "type": "loops-intro",
                "icon": "🔄",
                "title": {
                    "he": "Loops",
                    "ar": "الحلقات"
                },
                "content": {
                    "he": "הדרך לבצע לולאות ב-React",
                    "ar": "الطريقة لتنفيذ الحلقات في React"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 66,
                "type": "map-loop",
                "icon": "🗺️",
                "title": {
                    "he": "Map Loop",
                    "ar": "حلقة Map"
                },
                "content": {
                    "he": "React בחרה להשתמש במטודת map בשביל לבצע לולאות על מערכים באזור המיועד ל-HTML",
                    "ar": "React اختارت استخدام طريقة map لتنفيذ الحلقات على المصفوفات في المنطقة المخصصة لـ HTML"
                },
                "code": {
                    "component": "import React from \"react\";\nimport { Box } from \"@mui/material\";\n\nconst Loops = () => {\n  const arrayOfString = [\"one\", \"two\", \"three\"];\n  return (\n    <Box m={2}>\n      {arrayOfString.map((item, index, array) => {\n        console.log(array);\n        return <div key={index}>item: {item}</div>;\n      })}\n    </Box>\n  );\n};\n\nexport default Loops;"
                },
                "notes": [
                    {
                        "he": "יצרנו קבוע בשם arrayOfString והשווינו את ערכו למערך של מחרוזות תווים",
                        "ar": "أنشأنا ثابتاً باسم arrayOfString وعيننا قيمته لمصفوفة من سلاسل الأحرف"
                    },
                    {
                        "he": "בחלק המיועד ל-HTML אנחנו מבצעים לולאה על הקבוע arrayOfString באמצעות מטודת map שמקבלת עד שלושה פרמטרים: Item – האיבר במערך, Index - מספר האינדקס של האיבר במערך, array - המערך שעליו נערכת האיטרציה",
                        "ar": "في الجزء المخصص لـ HTML نقوم بتنفيذ حلقة على الثابت arrayOfString باستخدام طريقة map التي تستقبل حتى ثلاثة معاملات: Item – العنصر في المصفوفة، Index - رقم الفهرس للعنصر في المصفوفة، array - المصفوفة التي يتم التكرار عليها"
                    },
                    {
                        "he": "בתוך הלולאה אני מדפיס את המערך ומציג לגולש כיתוב שמקורו במערך",
                        "ar": "داخل الحلقة أطبع المصفوفة وأعرض للمستخدم نصاً مصدره المصفوفة"
                    },
                    {
                        "he": "כל אלמנט שאנו מכפילים באיטרציה צריך לקבל את המאפיין key שצריך להיות ייחודי",
                        "ar": "كل عنصر نضاعفه في التكرار يحتاج إلى الحصول على الخاصية key التي يجب أن تكون فريدة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 67,
                "type": "browser-result-loops",
                "icon": "🌐",
                "title": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "content": {
                    "he": "React בחרה להשתמש במטודת map בשביל לבצע לולאות על מערכים באזור המיועד ל-HTML וכי אובייקט ה-props מכיל כעת מפתח בשם name שהערך שלו זה האובייקט שיצרנו",
                    "ar": "React اختارت استخدام طريقة map لتنفيذ الحلقات على المصفوفات في المنطقة المخصصة لـ HTML وأن كائن props يحتوي الآن على مفتاح باسم name قيمته هي الكائن الذي أنشأناه"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 68,
                "type": "map-task",
                "icon": "📋",
                "title": {
                    "he": "משימת Map",
                    "ar": "مهمة Map"
                },
                "content": {
                    "he": "Business-cards-app",
                    "ar": "Business-cards-app"
                },
                "steps": [
                    {
                        "he": "צור את הנתיב הבא: src/cards/components/Cards.jsx",
                        "ar": "أنشئ المسار التالي: src/cards/components/Cards.jsx"
                    },
                    {
                        "he": "צור מערך עם שלושה אובייקטים שמייצגים כרטיסים (המפתחות האובייקטים הללו צריכים להיות תואמים למפתחות של אובייקט הכרטיס מהתרגיל הקודם)",
                        "ar": "أنشئ مصفوفة مع ثلاثة كائنات تمثل البطاقات (مفاتيح هذه الكائنات يجب أن تتطابق مع مفاتيح كائن البطاقة من التمرين السابق)"
                    },
                    {
                        "he": "השתמש במטודת map כך שעל כל איבר במערך תציג לגולש כרטיס בעזרת הקומפוננט Card.jsx",
                        "ar": "استخدم طريقة map بحيث لكل عنصر في المصفوفة تعرض للمستخدم بطاقة باستخدام مكون Card.jsx"
                    },
                    {
                        "he": "בדוק בדפדפן כי אכן הכרטיסים מוצגים לגולש",
                        "ar": "تحقق في المتصفح أن البطاقات معروضة فعلاً للمستخدم"
                    },
                    {
                        "he": "על הקומפוננט Card לקבל באובייקט ה-props כרטיס card במקום הקבוע card שיצרנו בתרגיל הקודם",
                        "ar": "يجب أن يستقبل مكون Card في كائن props بطاقة card بدلاً من الثابت card الذي أنشأناه في التمرين السابق"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 69,
                "type": "conditional-rendering",
                "icon": "🔀",
                "title": {
                    "he": "Conditional Rendering",
                    "ar": "العرض الشرطي"
                },
                "content": {
                    "he": "תצוגות מידע שונות כאשר יש מידע להצגה וכאשר אין",
                    "ar": "عروض معلومات مختلفة عندما توجد معلومات للعرض وعندما لا توجد"
                },
                "note": {
                    "he": "יש לעבור על החלק של Layout במצגת של MUI בטרם ממשיכים במצגת הזאת",
                    "ar": "يجب المرور على قسم Layout في عرض MUI قبل المتابعة في هذا العرض"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 70,
                "type": "onclick-event",
                "icon": "🖱️",
                "title": {
                    "he": "onClick event",
                    "ar": "حدث onClick"
                },
                "code": {
                    "component": "import React from \"react\";\nimport Button from \"@mui/material/Button\";\n\nconst OnClick = () => {\n  const handleClick = () => console.log(\"you clicked!\");\n  return (\n    <Button\n      onClick={handleClick}\n      variant=\"outlined\"\n      sx={{ m: 2 }}\n    >\n      Click\n    </Button>\n  );\n};\n\nexport default OnClick;"
                },
                "notes": [
                    {
                        "he": "יצרנו קומפוננט בשם OnClick",
                        "ar": "أنشأنا مكوناً باسم OnClick"
                    },
                    {
                        "he": "יצרנו קבוע בשם handleClick ששווה ערך לפונקציה אנונימית כשתופעל תדפיס בקונסול מחרוזת תווים",
                        "ar": "أنشأنا ثابتاً باسم handleClick يساوي دالة مجهولة عند تفعيلها ستطبع في الكونسول سلسلة أحرف"
                    },
                    {
                        "he": "יצרנו כפתור שיאזין לאירוע onClick ויפעיל את הפונקציה handleClick ברגע שהאירוע יקרה",
                        "ar": "أنشأنا زراً سيستمع لحدث onClick ويفعل الدالة handleClick في اللحظة التي يحدث فيها الحدث"
                    },
                    {
                        "he": "כשנלחץ על הכפתור תודפס בקונסול מחרוזת התווים מתוך הפונקציה handleClick",
                        "ar": "عند النقر على الزر ستطبع في الكونسول سلسلة الأحرف من الدالة handleClick"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 71,
                "type": "function-with-parameters",
                "icon": "🧪",
                "title": {
                    "he": "Function invocation with parameters",
                    "ar": "استدعاء الدالة مع المعاملات"
                },
                "content": {
                    "he": "הפעלת פונקציה עם פרמטרים",
                    "ar": "تفعيل الدالة مع المعاملات"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 72,
                "type": "function-with-parameters-code",
                "icon": "🧪",
                "title": {
                    "he": "Function with parameters",
                    "ar": "دالة مع معاملات"
                },
                "code": {
                    "component": "import React from \"react\";\nimport Button from \"@mui/material/Button\";\n\nconst OnClick = () => {\n  const handleClick = text => console.log(text);\n  return (\n    <Button\n      onClick={() => handleClick(\"text from button!\")}\n      variant=\"outlined\"\n      sx={{ m: 2 }}\n    >\n      Click\n    </Button>\n  );\n};\n\nexport default OnClick;"
                },
                "notes": [
                    {
                        "he": "הקבוע handleClick שווה לפונקציה אנונימית שמקבלת פרמטר text מסוג מחרוזת תווים ומדפיסה אותו בקונסול",
                        "ar": "الثابت handleClick يساوي دالة مجهولة تستقبل معامل text من نوع سلسلة أحرف وتطبعه في الكونسول"
                    },
                    {
                        "he": "אני מעביר בערך של האירוע onClick פונקציה call back אנונימית שכשהאירוע יקרה היא תופעל ובתוך הפונקציה אני מפעיל את הפונקציה handleClick עם הערך שאני מעוניין שיודפס בקונסול",
                        "ar": "أمرر في قيمة الحدث onClick دالة call back مجهولة عندما يحدث الحدث ستتفعل وداخل الدالة أفعّل الدالة handleClick بالقيمة التي أريد أن تطبع في الكونسول"
                    },
                    {
                        "he": "כשנלחץ על הכפתור תודפס בקונסול מחרוזת התווים מתוך הפונקציה handleClick",
                        "ar": "عند النقر على الزر ستطبع في الكونسول سلسلة الأحرف من الدالة handleClick"
                    },
                    {
                        "he": "אם אעביר לאירוע ישירות את הפעלת המטודה handleClick עם הפרמטר ללא הפונקציה האנונימית היא תופעל עם יצירת הקומפוננט ולא מתי שהאירוע יקרה!",
                        "ar": "إذا مررت للحدث مباشرة تفعيل الطريقة handleClick مع المعامل بدون الدالة المجهولة ستتفعل مع إنشاء المكون وليس عندما يحدث الحدث!"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 73,
                "type": "catching-event",
                "icon": "✋",
                "title": {
                    "he": "Catching the event and passing it to the function",
                    "ar": "التقاط الحدث وتمريره للدالة"
                },
                "content": {
                    "he": "תפיסה האירוע והעברתו לפונקציית ה-call back",
                    "ar": "التقاط الحدث وتمريره لدالة call back"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 74,
                "type": "catching-event-code",
                "icon": "✋",
                "title": {
                    "he": "Catching event",
                    "ar": "التقاط الحدث"
                },
                "code": {
                    "component": "import React from \"react\";\nimport Button from \"@mui/material/Button\";\n\nconst OnClick = () => {\n  const handleClick = e => console.log(e.target);\n  return (\n    <Button\n      onClick={e => handleClick(e)}\n      variant=\"outlined\"\n      sx={{ m: 2 }}\n    >\n      Click\n    </Button>\n  );\n};\n\nexport default OnClick;"
                },
                "notes": [
                    {
                        "he": "הקבוע handleClick שווה לפונקציה אנונימית שמקבלת פרמטר e מסוג אירוע ומדפיסה אותו בקונסול את האלמנט שתפס את האירוע",
                        "ar": "الثابت handleClick يساوي دالة مجهولة تستقبل معامل e من نوع حدث وتطبعه في الكونسول العنصر الذي التقط الحدث"
                    },
                    {
                        "he": "אני מעביר בערך של האירוע onClick פונקציה call back אנונימית שמקבלת את האירוע ומפעילה את הפונקציה עימו handleClick",
                        "ar": "أمرر في قيمة الحدث onClick دالة call back مجهولة تستقبل الحدث وتفعّل الدالة معه handleClick"
                    },
                    {
                        "he": "כשנלחץ על הכפתור יודפס בקונסול האובייקט שהאזין לאירוע והפעיל את הפונקציה handleClick",
                        "ar": "عند النقر على الزر سيُطبع في الكونسول الكائن الذي استمع للحدث وفعّل الدالة handleClick"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 75,
                "type": "parent-method-activation",
                "icon": "🔄",
                "title": {
                    "he": "הפעלת מטודה בקומפוננט האב מקומפוננט הבן",
                    "ar": "تفعيل طريقة في مكون الأب من مكون الابن"
                },
                "content": {
                    "he": "יהיו מקרים בהם נרצה שקומפוננט הבן יוכל להפעיל מטודה בקומפוננט האב",
                    "ar": "ستكون هناك حالات نريد فيها أن يتمكن مكون الابن من تفعيل طريقة في مكون الأب"
                },
                "code": {
                    "component": "// FatherComp\nconst FatherComp = () => {\n  const handleClick = () => console.log(\"you clicked!\");\n  return (\n    <Box\n      sx={{\n        m: 2,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        width: 300,\n        height: 300,\n        backgroundColor: \"secondary.dark\"\n      }}\n    >\n      <ChildComp handleClick={handleClick} />\n    </Box>\n  );\n};\n\n// ChildComp\nconst ChildComp = ({ handleClick }) => {\n  return (\n    <Button\n      onClick={handleClick}\n      variant=\"contained\"\n    >\n      click me!\n    </Button>\n  );\n};"
                },
                "notes": [
                    {
                        "he": "בקומפוננט האב:",
                        "ar": "في مكون الأب:"
                    },
                    {
                        "he": "אני יוצר קבוע בשם handleClick ששווה ערך לפונקציה אנונימית שמדפיסה בקונסול מחרוזת תווים",
                        "ar": "أنشئ ثابتاً باسم handleClick يساوي دالة مجهولة تطبع في الكونسول سلسلة أحرف"
                    },
                    {
                        "he": "אני עושה השמה למפתח בשם handleClick באובייקט הפרופס ומשווה את הערך שלו למטודת handleClick שיצרתי לעיל",
                        "ar": "أقوم بتعيين مفتاح باسم handleClick في كائن props وأساوي قيمته بالطريقة handleClick التي أنشأتها أعلاه"
                    },
                    {
                        "he": "בקומפוננט הבן:",
                        "ar": "في مكون الابن:"
                    },
                    {
                        "he": "אני מחלץ את המפתח handleClick מאובייקט הפרופס",
                        "ar": "أستخرج المفتاح handleClick من كائن props"
                    },
                    {
                        "he": "אני מאזין לאירוע onClick שתפעיל את handleClick מטודה",
                        "ar": "أستمع لحدث onClick الذي سيفعّل طريقة handleClick"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 76,
                "type": "browser-result-parent-method",
                "icon": "🌐",
                "title": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "content": {
                    "he": "כשאני לוחץ על הכפתור בקומפוננט הבן מופעלת המטודה handleClick שמדפיסה בקונסול את מחרוזת התווים שקבעתי מראש",
                    "ar": "عندما أضغط على الزر في مكون الابن تتفعل الطريقة handleClick التي تطبع في الكونسول سلسلة الأحرف التي حددتها مسبقاً"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 77,
                "type": "events-task",
                "icon": "📋",
                "title": {
                    "he": "משימת Events",
                    "ar": "مهمة الأحداث"
                },
                "content": {
                    "he": "Business-cards-app",
                    "ar": "Business-cards-app"
                },
                "steps": [
                    {
                        "he": "צור פונקציה בשם handleCardDelete בקובץ Cards.jsx שמקבלת פרמטר מסוג פונקציה אנונימית. הפונקציה תקבל _id מסוג number ותדפיס בקונסול את המחרוזת you deleted card no. ואחריה את המספר מהמפתח _id",
                        "ar": "أنشئ دالة باسم handleCardDelete في ملف Cards.jsx تستقبل معامل من نوع دالة مجهولة. الدالة ستستقبل _id من نوع number وستطبع في الكونسول السلسلة you deleted card no. وبعدها الرقم من المفتاح _id"
                    },
                    {
                        "he": "העבר את המטודות onLike ו-onDelete מהקומפוננט האב Cards.jsx דרך הקומפוננט הבן Card.jsx למטה לקומפוננט Action Buttons",
                        "ar": "مرر الطرق onLike و onDelete من مكون الأب Cards.jsx عبر مكون الابن Card.jsx إلى أسفل لمكون Action Buttons"
                    },
                    {
                        "he": "בהקלקה על אייקון הלב תודפס בקונסול המחרוזת you liked card no: ואחריה את הערך מהמפתח _id",
                        "ar": "عند النقر على أيقونة القلب ستُطبع في الكونسول السلسلة you liked card no: وبعدها القيمة من المفتاح _id"
                    },
                    {
                        "he": "בהקלקה על אייקון הפח תודפס בקונסול המחרוזת you deleted card no: ואחריה את הערך מהמפתח _id",
                        "ar": "عند النقر على أيقونة سلة المهملات ستُطبع في الكونسول السلسلة you deleted card no: وبعدها القيمة من المفتاح _id"
                    },
                    {
                        "he": "בהקלקה על אייקון עריכת הכרטיס תודפס בקונסול המחרוזת you edit card no. ואחריה את הערך מהמפתח _id",
                        "ar": "عند النقر على أيقونة تحرير البطاقة ستُطبع في الكونسول السلسلة you edit card no. وبعدها القيمة من المفتاح _id"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 78,
                "type": "proptypes-intro",
                "icon": "🔍",
                "title": {
                    "he": "propTypes",
                    "ar": "propTypes"
                },
                "content": {
                    "he": "Strong Typing in React",
                    "ar": "الكتابة القوية في React"
                },
                "link": "https://reactjs.org/docs/typechecking-with-proptypes.html",
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 79,
                "type": "proptypes-installation",
                "icon": "⚙️",
                "title": {
                    "he": "Installation",
                    "ar": "التثبيت"
                },
                "command": "npm i prop-types",
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 80,
                "type": "proptypes-types",
                "icon": "💎",
                "title": {
                    "he": "Types",
                    "ar": "الأنواع"
                },
                "table": [
                    {
                        "number": "1",
                        "propType": ".string",
                        "notes": ""
                    },
                    {
                        "number": "2",
                        "propType": ".number",
                        "notes": ""
                    },
                    {
                        "number": "3",
                        "propType": ".bool",
                        "notes": ""
                    },
                    {
                        "number": "4",
                        "propType": ".object",
                        "notes": ""
                    },
                    {
                        "number": "5",
                        "propType": ".objectOf()",
                        "notes": "מגדיר את סוג ערכי המפתחות באובייקט"
                    },
                    {
                        "number": "6",
                        "propType": ".array",
                        "notes": ""
                    },
                    {
                        "number": "6",
                        "propType": ".func",
                        "notes": ""
                    },
                    {
                        "number": "7",
                        "propType": ".arrayOf()",
                        "notes": "מגדיר את סוג האיברים במערך"
                    },
                    {
                        "number": "7",
                        "propType": ".symbol",
                        "notes": "יוצר סימן חדש"
                    },
                    {
                        "number": "8",
                        "propType": ".bigint",
                        "notes": ""
                    },
                    {
                        "number": "9",
                        "propType": ".node",
                        "notes": ""
                    },
                    {
                        "number": "10",
                        "propType": ".element",
                        "notes": ""
                    },
                    {
                        "number": "11",
                        "propType": ".elementType",
                        "notes": ""
                    },
                    {
                        "number": "",
                        "propType": ".oneOfType([])",
                        "notes": "אחד מהסוגים המפורטים בתוך המערך של הפונקציה"
                    },
                    {
                        "number": "13",
                        "propType": ".oneOf(['News', 'Photos'])",
                        "notes": "אחד מהערכים שמופיעים במערך בלבד"
                    },
                    {
                        "number": "",
                        "propType": ".instanceOf(new Class)",
                        "notes": "instance of a class"
                    },
                    {
                        "number": "",
                        "propType": ".defaultProp",
                        "notes": "ערך דיפולטיבי"
                    },
                    {
                        "number": "16",
                        "propType": ".shape({})",
                        "notes": ""
                    },
                    {
                        "number": "17",
                        "propType": ".exact({})",
                        "notes": "מוודא שלא הועברו מפתחות שלא נמצאות בסוג הפרופ"
                    },
                    {
                        "number": "18",
                        "propType": ".isRequired",
                        "notes": ""
                    },
                    {
                        "number": "19",
                        "propType": "any",
                        "notes": ""
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 81,
                "type": "proptypes-errors",
                "icon": "❌",
                "title": {
                    "he": "PropTypes Errors",
                    "ar": "أخطاء PropTypes"
                },
                "content": {
                    "he": "תצוגת שגיאות של PropTypes",
                    "ar": "عرض أخطاء PropTypes"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 82,
                "type": "proptypes-error-example",
                "icon": "❌",
                "title": {
                    "he": "PropTypes Error",
                    "ar": "خطأ PropTypes"
                },
                "content": {
                    "he": "על מנת ליצור שגיאה של PropTypes",
                    "ar": "لإنشاء خطأ في PropTypes"
                },
                "code": {
                    "component": "// FatherPropTypes.jsx\nimport React from \"react\";\nimport PropTypeComponent from \"./PropTypeComponent\";\n\nconst FatherPropTypes = () => {\n  return <PropTypeComponent />;\n};\n\nexport default FatherPropTypes;\n\n// PropTypeComponent.jsx\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst PropTypeComponent = ({ string }) => {\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  string: PropTypes.string.isRequired,\n};\n\nexport default PropTypeComponent;"
                },
                "notes": [
                    {
                        "he": "בקומפוננט האב:",
                        "ar": "في مكون الأب:"
                    },
                    {
                        "he": "נציב את קומפוננט הבן בתוך קומפוננט האב אך לא נעביר לה את המפתחות שהיא זקוקה להם באובייקט הפרופס",
                        "ar": "سنضع مكون الابن داخل مكون الأب ولكن لن نمرر له المفاتيح التي يحتاجها في كائن props"
                    },
                    {
                        "he": "בקומפוננט הבן:",
                        "ar": "في مكون الابن:"
                    },
                    {
                        "he": "ניצור מופע של מחלקת PropTypes מתוך הספרייה שייבאנו \"prop-types\"",
                        "ar": "سننشئ مثيلاً من فئة PropTypes من المكتبة التي استوردناها \"prop-types\""
                    },
                    {
                        "he": "ניצור קומפוננט בשם PropTypeComponent שצריכה לקבל באובייקט הפרופס מפתח בשם string",
                        "ar": "سننشئ مكوناً باسم PropTypeComponent يحتاج إلى استقبال مفتاح باسم string في كائن props"
                    },
                    {
                        "he": "אני עושה השמה למפתח propTypes בתוך לקומפוננט PropTypeComponent שיצרנו ומשווה את הערך שלו לאובייקט שיבדוק בעזרת המופע של מחלקת PropTypes את סוג הערכים של המפתח",
                        "ar": "أقوم بتعيين مفتاح propTypes داخل مكون PropTypeComponent الذي أنشأناه وأساوي قيمته بكائن سيتحقق باستخدام مثيل فئة PropTypes من نوع قيم المفتاح"
                    },
                    {
                        "he": "בגלל שפונקציה מאחורי הקלעים היא אובייקט אני יכול לעשות השמה למפתחות שלה",
                        "ar": "لأن الدالة خلف الكواليس هي كائن يمكنني تعيين مفاتيحها"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 83,
                "type": "oneof-vs-oneoftype",
                "icon": "👥",
                "title": {
                    "he": "oneOfType vs oneOf",
                    "ar": "oneOfType مقابل oneOf"
                },
                "content": {
                    "he": "יש ביכולתנו לקבוע מספר סוגי ערכים או לקבוע את הערכים באופן ליטרלי",
                    "ar": "يمكننا تحديد عدة أنواع من القيم أو تحديد القيم حرفياً"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 84,
                "type": "oneof-oneoftype-example",
                "icon": "👥",
                "title": {
                    "he": "oneOfType & oneOf",
                    "ar": "oneOfType و oneOf"
                },
                "code": {
                    "component": "// FatherPropTypes\nconst FatherPropTypes = () => {\n  return (\n    <>\n      <PropTypeComponent one=\"string\" />\n      <PropTypeComponent one={2} />\n      <PropTypeComponent two=\"a\" />\n      <PropTypeComponent two=\"c\" />\n    </>\n  );\n};\n\n// PropTypeComponent\nconst PropTypeComponent = props => {\n  console.table(props);\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  one: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  two: PropTypes.oneOf([\"a\", \"b\"]),\n};"
                },
                "notes": [
                    {
                        "he": "בקומפוננט האב:",
                        "ar": "في مكون الأب:"
                    },
                    {
                        "he": "נציב את קומפוננט הבן בתוך קומפוננט האב ונעביר לה את המפתחות שהיא זקוקה להם באובייקט הפרופס",
                        "ar": "سنضع مكون الابن داخل مكون الأب ومرر له المفاتيح التي يحتاجها في كائن props"
                    },
                    {
                        "he": "בקומפוננט הבן:",
                        "ar": "في مكون الابن:"
                    },
                    {
                        "he": "PropTypeComponent הקומפוננט מקבלת בפרמטר את האובייקט props",
                        "ar": "مكون PropTypeComponent يستقبل كائن props كمعامل"
                    },
                    {
                        "he": "נחלץ את הערכים מתוך האובייקט props",
                        "ar": "سنستخرج القيم من كائن props"
                    },
                    {
                        "he": "נעשה השמה למפתח propTypes בתוך PropTypeComponent לקומפוננט שיצרנו ומשווה את הערך שלו לאובייקט שיבדוק את המפתחות שאני מעוניין שיהיו באובייקט props ואת הערכים שלהם",
                        "ar": "سنقوم بتعيين مفتاح propTypes داخل مكون PropTypeComponent الذي أنشأناه ونساوي قيمته بكائن سيتحقق من المفاتيح التي أريد أن تكون في كائن props وقيمها"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 85,
                "type": "browser-result-oneof-error",
                "icon": "🌐",
                "title": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "content": {
                    "he": "אנו מקבלים שגיאה בגלל שניסינו להעביר במפתח two באובייקט הפרופס מחרוזת תווים שאינה אחת ממחרוזות התווים שהגדרנו",
                    "ar": "نحصل على خطأ لأننا حاولنا تمرير سلسلة أحرف في المفتاح two في كائن props ليست واحدة من سلاسل الأحرف التي حددناها"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 86,
                "type": "exact-isrequired",
                "icon": "💧",
                "title": {
                    "he": "Exact & isRequired",
                    "ar": "Exact و isRequired"
                },
                "content": {
                    "he": "יש ביכולתנו לבדוק אם באובייקט הפרופס יש בדיוק את הערכים שאנו מבקשים או לחליפין לחייב העברת מפתח ספציפי",
                    "ar": "يمكننا التحقق من وجود القيم التي نطلبها بالضبط في كائن props أو بدلاً من ذلك إلزام تمرير مفتاح محدد"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 87,
                "type": "exact-example",
                "icon": "💧",
                "title": {
                    "he": "Exact",
                    "ar": "Exact"
                },
                "code": {
                    "component": "// FatherPropTypes\nconst FatherPropTypes = () => {\n  const obj = { key: \"hallo\", second: 5, third: true };\n  return <PropTypeComponent obj={obj} />;\n};\n\n// PropTypeComponent\nconst PropTypeComponent = props => {\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  obj: PropTypes.exact({\n    key: PropTypes.string,\n    second: PropTypes.number,\n  }),\n};"
                },
                "notes": [
                    {
                        "he": "בקומפוננט האב:",
                        "ar": "في مكون الأب:"
                    },
                    {
                        "he": "נעביר לה את המפתחות שהיא זקוקה להם באובייקט הפרופס אולם נשים מפתח אחד יותר מידי בתוך האובייקט שאנו מעבירים",
                        "ar": "سنمرر لها المفاتيح التي تحتاجها في كائن props ولكن سنضع مفتاحاً واحداً أكثر من اللازم داخل الكائن الذي نمرره"
                    },
                    {
                        "he": "בקומפוננט הבן:",
                        "ar": "في مكون الابن:"
                    },
                    {
                        "he": "אנו קובעים כי יש לקבל מפתח בשם obj באובייקט הפרופס והוא חייב להיות עם המפתחות והערכים הבאים",
                        "ar": "نحدد أنه يجب استقبال مفتاح باسم obj في كائن props ويجب أن يكون مع المفاتيح والقيم التالية"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 88,
                "type": "browser-result-exact-error",
                "icon": "🌐",
                "title": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "content": {
                    "he": "בגלל שהעברנו מפתח שלישי PropTypes זורקת לנו הודעת שגיאה על כך",
                    "ar": "لأننا مررنا مفتاحاً ثالثاً، PropTypes ترمي لنا رسالة خطأ حول ذلك"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 89,
                "type": "isrequired-example",
                "icon": "💧",
                "title": {
                    "he": "isRequired",
                    "ar": "isRequired"
                },
                "code": {
                    "component": "// FatherPropTypes\nconst FatherPropTypes = () => {\n  return <PropTypeComponent />;\n};\n\n// PropTypeComponent\nconst PropTypeComponent = props => {\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  two: PropTypes.string.isRequired,\n};"
                },
                "notes": [
                    {
                        "he": "בקומפוננט האב:",
                        "ar": "في مكون الأب:"
                    },
                    {
                        "he": "נציב את קומפוננט הבן בתוך קומפוננט האב אך לא נעביר לה את המפתח שהיא זקוקה לו באובייקט הפרופס",
                        "ar": "سنضع مكون الابن داخل مكون الأب ولكن لن نمرر له المفتاح الذي يحتاجه في كائن props"
                    },
                    {
                        "he": "בקומפוננט הבן:",
                        "ar": "في مكون الابن:"
                    },
                    {
                        "he": "אני מגדיר את המפתח two כחובה על ידי שימת המפתח isRequired לאחר הגדרת סוג הערך המבוקש למפתח",
                        "ar": "أحدد المفتاح two كإلزامي بوضع المفتاح isRequired بعد تحديد نوع القيمة المطلوبة للمفتاح"
                    },
                    {
                        "he": "הודעת השגיאה של PropTypes בגלל שלא העברנו את המפתח שהגדרנו כחובה",
                        "ar": "رسالة خطأ PropTypes لأننا لم نمرر المفتاح الذي حددناه كإلزامي"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 90,
                "type": "shape-any-defaultprops",
                "icon": "🌸",
                "title": {
                    "he": "Shape Any & defaultProps",
                    "ar": "Shape Any و defaultProps"
                },
                "content": {
                    "he": "יצירת interface של אובייקט",
                    "ar": "إنشاء واجهة لكائن"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 91,
                "type": "shape-example",
                "icon": "📐",
                "title": {
                    "he": "Shape",
                    "ar": "الشكل"
                },
                "content": {
                    "he": "בעזרת PropTypes.shape אני יכול להגדיר interface של אובייקט",
                    "ar": "باستخدام PropTypes.shape يمكنني تعريف واجهة لكائن"
                },
                "code": {
                    "component": "// FatherPropTypes\nconst image = {\n  url: \"https://cdn.pixabay.com/photo/2022/11/13/18/09/canyon-7589820_960_720.jpg\",\n  alt: \"Rock\",\n};\nconst FatherPropTypes = () => {\n  return <PropTypeComponent image={image} />;\n};\n\n// PropTypeComponent\nimport { shape, string } from \"prop-types\";\n\nconst imageType = shape({\n  url: string,\n  alt: string,\n});\n\nconst PropTypeComponent = props => {\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  image: imageType.isRequired,\n};"
                },
                "notes": [
                    {
                        "he": "בקומפוננט האב:",
                        "ar": "في مكون الأب:"
                    },
                    {
                        "he": "ניצור קבוע בשם image שיהיה שווה ערך לאובייקט עם מפתחות וערכים של תמונה",
                        "ar": "سننشئ ثابتاً باسم image يكون مساوياً لكائن مع مفاتيح وقيم صورة"
                    },
                    {
                        "he": "נעביר את הקבוע שיצרנו למפתח באובייקט הפרופס בשם image",
                        "ar": "سنمرر الثابت الذي أنشأناه إلى المفتاح في كائن props باسم image"
                    },
                    {
                        "he": "בקומפוננט הבן:",
                        "ar": "في مكون الابن:"
                    },
                    {
                        "he": "נחלץ את המפתחות שאני זקוק להם מאובייקט PropTypes",
                        "ar": "سنستخرج المفاتيح التي أحتاجها من كائن PropTypes"
                    },
                    {
                        "he": "ניצור קבוע בשם imageType שיהיה שווה ערך למפתח shape מתוך אובייקט PropTypes שיקבל אובייקט קונפיגורציות עם המפתחות והערכים שאנו מעוניינים שיהיו ב interface של התמונה",
                        "ar": "سننشئ ثابتاً باسم imageType يكون مساوياً لمفتاح shape من كائن PropTypes الذي سيستقبل كائن تكوين مع المفاتيح والقيم التي نريد أن تكون في واجهة الصورة"
                    },
                    {
                        "he": "נגדיר שהערך למפתח image יהיה הקבוע שיצרנו imageType",
                        "ar": "سنحدد أن القيمة للمفتاح image ستكون الثابت imageType الذي أنشأناه"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 92,
                "type": "any-defaultprops-example",
                "icon": "🌸",
                "title": {
                    "he": "Any & defaultProps",
                    "ar": "Any و defaultProps"
                },
                "code": {
                    "component": "// FatherPropTypes\nconst FatherPropTypes = () => {\n  return (\n    <>\n      <PropTypeComponent name=\"shola\" />\n      <br />\n      <PropTypeComponent />\n    </>\n  );\n};\n\n// PropTypeComponent\nconst PropTypeComponent = ({ name }) => {\n  return name;\n};\n\nPropTypeComponent.propTypes = {\n  name: PropTypes.any.isRequired,\n};\n\nPropTypeComponent.defaultProps = {\n  name: \"david\",\n};"
                },
                "notes": [
                    {
                        "he": "בקומפוננט האב:",
                        "ar": "في مكون الأب:"
                    },
                    {
                        "he": "נציב שני קומפוננטות בנים בתוך קומפוננט האב",
                        "ar": "سنضع مكونين فرعيين داخل مكون الأب"
                    },
                    {
                        "he": "לראשונה נעביר מפתח בשם name עם ערך לאובייקט הפרופס",
                        "ar": "للأول سنمرر مفتاحاً باسم name مع قيمة إلى كائن props"
                    },
                    {
                        "he": "בשנייה רק נציב את הקומפוננט מבלי להעביר לה מפתחות לאובייקט הפרופס",
                        "ar": "للثاني سنضع المكون فقط بدون تمرير مفاتيح إلى كائن props"
                    },
                    {
                        "he": "בקומפוננט הבן:",
                        "ar": "في مكون الابن:"
                    },
                    {
                        "he": "הקומפוננט צריכה לקבל את המפתח name באובייקט הפרופס ולהחזיר אותו",
                        "ar": "المكون يحتاج إلى استقبال المفتاح name في كائن props وإرجاعه"
                    },
                    {
                        "he": "נגדיר שערך המפתח name יכול להיות כל סוג של ערך בעזרת any אבל שיהיה ובה להעביר בו ערך כלשהו",
                        "ar": "سنحدد أن قيمة المفتاح name يمكن أن تكون أي نوع من القيم باستخدام any ولكن يجب تمرير قيمة ما إليه"
                    },
                    {
                        "he": "נשתמש ב defaultProps כדי לקבוע ערכים דיפולטיביים למפתחות באובייקט הפרופס כך שאם לא יעבירו לנו ערך במפתח name נקבע שהערך הדיפולטיבי שלו יהיה \"david\"",
                        "ar": "سنستخدم defaultProps لتحديد قيم افتراضية للمفاتيح في كائن props بحيث إذا لم يتم تمرير قيمة لنا في المفتاح name سنحدد أن قيمته الافتراضية ستكون \"david\""
                    },
                    {
                        "he": "התוצאה בדפדפן:",
                        "ar": "النتيجة في المتصفح:"
                    },
                    {
                        "he": "בגלל שהעברנו את המפתח name לקומפוננט בן הראשון אנו מקבלים את הערך שהעברנו",
                        "ar": "لأننا مررنا المفتاح name للمكون الفرعي الأول نحصل على القيمة التي مررناها"
                    },
                    {
                        "he": "בגלל שלא העברנו את מפתח name בקומפוננט בן השני מוצג הערך הדיפולטיבי שקבענו",
                        "ar": "لأننا لم نمرر المفتاح name في المكون الفرعي الثاني يتم عرض القيمة الافتراضية التي حددناها"
                    },
                    {
                        "he": "לא מומלץ להשתמש ב-any אלא להגדיר את סוג הערך המבוקש",
                        "ar": "لا يُنصح باستخدام any بل تحديد نوع القيمة المطلوبة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 93,
                "type": "useState-complex-objects",
                "icon": "🏗️",
                "title": {
                    "he": "useState with complex objects",
                    "ar": "useState مع الكائنات المعقدة"
                },
                "content": {
                    "he": "בדוגמה שלהלן ניצור טופס שיבקש מהמשתמש את השם הפרטי שלו ואת שם המשפחה בעזרת useState",
                    "ar": "في المثال أدناه، سنقوم بإنشاء نموذج يطلب من المستخدم اسمه الأول واسم العائلة باستخدام useState"
                },
                "code": {
                    "component": "import { useState } from \"react\";\n\nconst INITIAL_USER = {\n  name: {\n    first: \"\",\n    last: \"\"\n  },\n  email: \"\"\n};\n\nconst SetComplexObject = () => {\n  const [user, setUser] = useState(INITIAL_USER);\n\n  return (\n    <div>\n      <h5>Your Name Is: {user.name.first} {user.name.last}</h5>\n      <h6>Your email is: {user.email}</h6>\n      <form>\n        <input\n          placeholder=\"Enter First Name\"\n          onChange={e => setUser({ ...user, name: { ...user.name, first: e.target.value } })}\n        />\n        <input\n          placeholder=\"Enter Last Name\"\n          onChange={e => setUser({ ...user, name: { ...user.name, last: e.target.value } })}\n        />\n        <input\n          placeholder=\"Enter Email\"\n          onChange={e => setUser({ ...user, email: e.target.value })}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default SetComplexObject;"
                },
                "explanations": [
                    {
                        "he": "ניצור קומפוננט בשם SetComplexObject",
                        "ar": "سنقوم بإنشاء مكون باسم SetComplexObject"
                    },
                    {
                        "he": "ניצור קבוע בשם INITIAL_USER שערכו יהיה אובייקט עם המפתחות:",
                        "ar": "سنقوم بإنشاء ثابت باسم INITIAL_USER تكون قيمته كائنًا بالمفاتيح:"
                    },
                    {
                        "he": "name - מסוג אובייקט עם המפתחות first last שערכם הוא מחרוזות תווים",
                        "ar": "name - من نوع كائن بالمفاتيح first last وقيمها سلاسل نصية"
                    },
                    {
                        "he": "email - מסוג מחרוזת תווים",
                        "ar": "email - من نوع سلسلة نصية"
                    },
                    {
                        "he": "נעשה array destructor למערך שיחזור אלינו מהפעלת מטודת useState עם הפרמטר INITIAL_USER ונחלץ ממנו את המפתחות:",
                        "ar": "سنقوم بتفكيك المصفوفة التي ستعود إلينا من استدعاء دالة useState بالمعامل INITIAL_USER واستخراج المفاتيح منها:"
                    },
                    {
                        "he": "user - שם המשתנה",
                        "ar": "user - اسم المتغير"
                    },
                    {
                        "he": "setUser - מטודה שאחראית על שינוי ערכו של המשתנה",
                        "ar": "setUser - دالة مسؤولة عن تغيير قيمة المتغير"
                    },
                    {
                        "he": "נציב את ערכיו של המשתנה user כך שיוצגו לגולש",
                        "ar": "سنضع قيم متغير user بحيث تظهر للمستخدم"
                    },
                    {
                        "he": "ניצור אלמנט מסוג input שכאשר יוכנסו אליו נתונים הוא יפעיל פונקציה אנונימית שתקבל את האירוע ותפעיל את מטודת setUser ונעביר לה אובייקט ש:",
                        "ar": "سنقوم بإنشاء عنصر من نوع input عندما يتم إدخال البيانات إليه سيقوم بتشغيل دالة مجهولة تستقبل الحدث وتفعل دالة setUser ونمرر لها كائنًا:"
                    },
                    {
                        "he": "נעתיק לתוכו את מפתחות האובייקט user",
                        "ar": "ننسخ إليه مفاتيح كائن user"
                    },
                    {
                        "he": "נעשה השמה למפתח name ונשווה את ערכו לאובייקט שאליו נעתיק את המפתחות של האובייקט user.name",
                        "ar": "سنقوم بتعيين المفتاح name ونساوي قيمته بكائن ننسخ إليه مفاتيح كائن user.name"
                    },
                    {
                        "he": "ונעשה השמה למפתח first בתוך הערך של אובייקט name כך שערכו יהיה שווה לערך שיוכנס לאלמנט input (e.target.value)",
                        "ar": "وسنقوم بتعيين المفتاح first داخل قيمة كائن name بحيث تكون قيمته مساوية للقيمة التي ستُدخل في عنصر input (e.target.value)"
                    },
                    {
                        "he": "ניצור אלמנט מסוג input שיעתיק את המפתחות של user ויעשה שמה למפתח email",
                        "ar": "سنقوم بإنشاء عنصر من نوع input ينسخ مفاتيح user ويعين المفتاح email"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 94,
                "type": "useState-array",
                "icon": "📋",
                "title": {
                    "he": "useState with array",
                    "ar": "useState مع المصفوفات"
                },
                "content": {
                    "he": "הכנת התשתית",
                    "ar": "إعداد البنية التحتية"
                },
                "code": {
                    "component": "import { useState } from \"react\";\n\nexport const SetArray = () => {\n  const INITIAL_TODO = { todo: \"\" };\n  const [task, setTask] = useState(INITIAL_TODO);\n  const [tasks, setTasks] = useState([]);\n\n  const createNewTask = e => {\n    e.preventDefault();\n    setTasks([...tasks, task]);\n    return setTask(INITIAL_TODO);\n  };\n\n  return (\n    <div className=\"d-flex justify-content-center mt-4\">\n      <div>\n        <h5>Task: <span className=\"fw-light\"> {task.todo}</span></h5>\n        <form className=\"col-12 border p-2 rounded\">\n          <div className=\"input-group\">\n            <button\n              disabled={!task.todo}\n              onClick={createNewTask}\n              className=\"input-group-text\"\n              id=\"inputGroup-sizing-default\"\n            >\n              Create\n            </button>\n            <input\n              onChange={e => setTask({ ...task, todo: e.target.value })}\n              value={task.todo}\n              type=\"text\"\n              className=\"form-control\"\n              aria-label=\"Sizing example input\"\n              aria-describedby=\"inputGroup-sizing-default\"\n            />\n          </div>\n        </form>\n        <ul>\n          {tasks.map((todo, index) => (\n            <li key={index}>\n              {index + 1}. {todo.todo}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};"
                },
                "explanations": [
                    {
                        "he": "נייבא את useState מספריית react",
                        "ar": "نستورد useState من مكتبة react"
                    },
                    {
                        "he": "ניצור קומפוננט בשם SetArray",
                        "ar": "سنقوم بإنشاء مكون باسم SetArray"
                    },
                    {
                        "he": "ניצור קבוע בשם INITIAL_TODO ונשווה את הערך שלו לאובייקט עם מפתחות וערכים ראשוניים",
                        "ar": "سنقوم بإنشاء ثابت باسم INITIAL_TODO ونساوي قيمته بكائن بمفاتيح وقيم أولية"
                    },
                    {
                        "he": "נפעיל את מטודת useState עם הקבוע שיצרנו ונחלץ ממנה את task setTask",
                        "ar": "سنقوم بتشغيل دالة useState بالثابت الذي أنشأناه ونستخرج منها task setTask"
                    },
                    {
                        "he": "נפעיל את מטודת useState עם מערך ריק ונחלץ ממנה את tasks setTasks",
                        "ar": "سنقوم بتشغيل دالة useState بمصفوفة فارغة ونستخرج منها tasks setTasks"
                    },
                    {
                        "he": "ניצור פונקציה בשם createNewTask",
                        "ar": "سنقوم بإنشاء دالة باسم createNewTask"
                    },
                    {
                        "he": "שתקבל אירוע",
                        "ar": "تستقبل حدث"
                    },
                    {
                        "he": "תעצור את ההתנהגות הדיפולטיבית של שליחת הטופס על ידי הכפתור",
                        "ar": "توقف السلوك الافتراضي لإرسال النموذج بواسطة الزر"
                    },
                    {
                        "he": "שתפעיל את מטודת setTasks כשארגומנט נעתיק את מערך המשימות ונוסיף את המשימה",
                        "ar": "تفعل دالة setTasks كمعامل ننسخ مصفوفة المهام ونضيف المهمة"
                    },
                    {
                        "he": "נעצור את הפונקציה ונאפס את המשימה על ידי הפעלת מטודת setTask עם הקבוע של הערכים הראשוניים",
                        "ar": "نوقف الدالة ونعيد تعيين المهمة بتشغيل دالة setTask مع ثابت القيم الأولية"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 95,
                "type": "render-slide",
                "icon": "🎨",
                "title": {
                    "he": "render",
                    "ar": "عرض"
                },
                "content": {
                    "he": "ניצור טופס וניצור רשימה",
                    "ar": "سنقوم بإنشاء نموذج وإنشاء قائمة"
                },
                "code": {
                    "component": "return (\n  <div className=\"d-flex justify-content-center mt-4\">\n    <div>\n      <h5>Task: <span className=\"fw-light\"> {task.todo}</span></h5>\n      <form className=\"col-12 border p-2 rounded\">\n        <div className=\"input-group\">\n          <button\n            disabled={!task.todo}\n            onClick={createNewTask}\n            className=\"input-group-text\"\n            id=\"inputGroup-sizing-default\"\n          >\n            Create\n          </button>\n          <input\n            onChange={e => setTask({ ...task, todo: e.target.value })}\n            value={task.todo}\n            type=\"text\"\n            className=\"form-control\"\n            aria-label=\"Sizing example input\"\n            aria-describedby=\"inputGroup-sizing-default\"\n          />\n        </div>\n      </form>\n      <ul>\n        {tasks.map((todo, index) => (\n          <li key={index}>\n            {index + 1}. {todo.todo}\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);"
                },
                "explanations": [
                    {
                        "he": "ניצור טופס",
                        "ar": "سنقوم بإنشاء نموذج"
                    },
                    {
                        "he": "בחלקו העליון נציג לגולש את המשימה",
                        "ar": "في الجزء العلوي سنعرض للمستخدم المهمة"
                    },
                    {
                        "he": "ניצור כפתור ש:",
                        "ar": "سنقوم بإنشاء زر:"
                    },
                    {
                        "he": "הוא יהיה מנוטרל אם לא יהיה ערך במפתח todo של אובייקט task",
                        "ar": "سيكون معطلًا إذا لم تكن هناك قيمة في مفتاح todo لكائن task"
                    },
                    {
                        "he": "בלחיצה על הכפתור הוא יפעיל את מטודת שיצרנו createNewTask",
                        "ar": "عند النقر على الزر سيفعل الدالة التي أنشأناها createNewTask"
                    },
                    {
                        "he": "ניצור input",
                        "ar": "سنقوم بإنشاء input"
                    },
                    {
                        "he": "שתאזין לאירוע onChange ותפעיל פונקציה אנונימית שתקבל את האירוע",
                        "ar": "تستمع لحدث onChange وتفعل دالة مجهولة تستقبل الحدث"
                    },
                    {
                        "he": "תפעיל את מטודת setTask כאשר בארגומנט נעתיק את המפתחות מתוך אובייקט task ונעשה השמה למפתח todo עם מה שייכתב בתוך האלמנט",
                        "ar": "تفعل دالة setTask عندما في المعامل ننسخ المفاتيح من كائن task ونعيّن المفتاح todo بما يُكتب داخل العنصر"
                    },
                    {
                        "he": "הערך של האלמנט יהיה הערך של המפתח task.todo",
                        "ar": "قيمة العنصر ستكون قيمة المفتاح task.todo"
                    },
                    {
                        "he": "ניצור רשימה ש:",
                        "ar": "سنقوم بإنشاء قائمة:"
                    },
                    {
                        "he": "על כל איבר במערך tasks היא תיצור רשומה עם מספר ועם פרטי המשימה",
                        "ar": "على كل عنصر في مصفوفة tasks ستقوم بإنشاء سجل برقم وتفاصيل المهمة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 96,
                "type": "browser-result-tasks",
                "icon": "🌐",
                "title": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "content": {
                    "he": "ניתן לראות כי בהתאם לתבנית שקבענו",
                    "ar": "يمكن رؤية أنه وفقًا للنموذج الذي حددناه"
                },
                "explanations": [
                    {
                        "he": "כשממלאים את הכתוב בשדה הטקסט",
                        "ar": "عند ملء النص في حقل النص"
                    },
                    {
                        "he": "מוצג בראש הטופס",
                        "ar": "يظهر في أعلى النموذج"
                    },
                    {
                        "he": "כשלוחצים על הכפתור המשימה",
                        "ar": "عند النقر على زر المهمة"
                    },
                    {
                        "he": "מוצגת כרשומה והשדה מתנקה",
                        "ar": "تظهر كسجل والحقل ينظف"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 97,
                "type": "hooks-sandbox",
                "icon": "📋",
                "title": {
                    "he": "Hooks-Sandbox",
                    "ar": "صندوق رمل Hooks"
                },
                "content": {
                    "he": "משימת useState",
                    "ar": "مهمة useState"
                },
                "steps": [
                    {
                        "he": "צור קומפוננט בשם SetPost",
                        "ar": "أنشئ مكونًا باسم SetPost"
                    },
                    {
                        "he": "ייבא את useState למודול",
                        "ar": "استورد useState إلى الوحدة"
                    },
                    {
                        "he": "צור פונקציה בשם SetPost (קומפוננט)",
                        "ar": "أنشئ دالة باسم SetPost (مكون)"
                    },
                    {
                        "he": "צור קבוע בשם INITIAL_POST שערכו יהיה אובייקט עם המפתחות:",
                        "ar": "أنشئ ثابتًا باسم INITIAL_POST تكون قيمته كائنًا بالمفاتيح:"
                    },
                    {
                        "he": "title - מסוג מחרוזת תווים",
                        "ar": "title - من نوع سلسلة نصية"
                    },
                    {
                        "he": "subtitle - מסוג מחרוזת תווים",
                        "ar": "subtitle - من نوع سلسلة نصية"
                    },
                    {
                        "he": "author - מסוג מחרוזת תווים",
                        "ar": "author - من نوع سلسلة نصية"
                    },
                    {
                        "he": "createdAt - מחרוזת תווים",
                        "ar": "createdAt - سلسلة نصية"
                    },
                    {
                        "he": "הפעל את מטודת useState פעמיים כאשר",
                        "ar": "شغّل دالة useState مرتين عندما"
                    },
                    {
                        "he": "בפעם הראשונה עם הארגומנט INITIAL_POST וחלץ מהערך שחוזר את post setPost",
                        "ar": "في المرة الأولى مع المعامل INITIAL_POST واستخرج من القيمة المُرجعة post setPost"
                    },
                    {
                        "he": "בפעם השנייה עם מערך ריק כארגומנט וחלץ מהערך שחוזר מהפעלת הפונקציה את posts setPosts",
                        "ar": "في المرة الثانية مع مصفوفة فارغة كمعامل واستخرج من القيمة المُرجعة من تشغيل الدالة posts setPosts"
                    },
                    {
                        "he": "הצג לגולש:",
                        "ar": "اعرض للمستخدم:"
                    },
                    {
                        "he": "טופס שבתוכו",
                        "ar": "نموذج بداخله"
                    },
                    {
                        "he": "צור שלוש אלמנטים מסוג input שהנתונים שיוזנו בתוכם יהיו מקושרים לערכים של שלושת המפתחות הראשונים של אובייקט post חדש (כמו שהודגם בשקפים הקודמים)",
                        "ar": "أنشئ ثلاثة عناصر من نوع input تكون البيانات المدخلة فيها مرتبطة بقيم المفاتيح الثلاثة الأولى لكائن post جديد (كما هو موضح في الشرائح السابقة)"
                    },
                    {
                        "he": "צור כפתור שלחיצה עליו תכניס פוסט חדש למערך הפוסטים",
                        "ar": "أنشئ زرًا عند النقر عليه سيدخل منشورًا جديدًا في مصفوفة المنشورات"
                    },
                    {
                        "he": "טבלה שתוצג רק אם יש פוסטים במערך הפוסטים",
                        "ar": "جدول يُعرض فقط إذا كان هناك منشورات في مصفوفة المنشورات"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 98,
                "type": "layout-slide",
                "icon": "📐",
                "title": {
                    "he": "Layout",
                    "ar": "التخطيط"
                },
                "content": {
                    "he": "פריסת האפליקציה",
                    "ar": "تخطيط التطبيق"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 99,
                "type": "layout-infrastructure",
                "icon": "🏗️",
                "title": {
                    "he": "הכנת תשתית",
                    "ar": "إعداد البنية التحتية"
                },
                "content": {
                    "he": "בנתיב src/layout ניצור את התיקיות הבאות:",
                    "ar": "في المسار src/layout سنقوم بإنشاء المجلدات التالية:"
                },
                "items": [
                    {
                        "he": "התיקייה footer",
                        "ar": "مجلد footer"
                    },
                    {
                        "he": "ובתוכה הקובץ Footer.jsx",
                        "ar": "وبداخله الملف Footer.jsx"
                    },
                    {
                        "he": "התיקייה header",
                        "ar": "مجلد header"
                    },
                    {
                        "he": "ובתוכה הקובץ Header.jsx",
                        "ar": "وبداخله الملف Header.jsx"
                    },
                    {
                        "he": "התיקייה main",
                        "ar": "مجلد main"
                    },
                    {
                        "he": "ובתוכה הקובץ Main.jsx",
                        "ar": "وبداخله الملف Main.jsx"
                    },
                    {
                        "he": "הקובץ Layout.jsx",
                        "ar": "الملف Layout.jsx"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 100,
                "type": "header-component",
                "icon": "📄",
                "title": {
                    "he": "Header.jsx",
                    "ar": "Header.jsx"
                },
                "content": {
                    "he": "בשלב זה ניצור את הקומפוננט כך שתציג את התוכן שלה בתבנית הכללית",
                    "ar": "في هذه المرحلة سنقوم بإنشاء المكون بحيث يعرض محتواه في القالب العام"
                },
                "code": {
                    "component": "import React from \"react\";\n\nconst Header = () => {\n  return <div>Header</div>;\n};\n\nexport default Header;"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 101,
                "type": "footer-component",
                "icon": "📄",
                "title": {
                    "he": "Footer.jsx",
                    "ar": "Footer.jsx"
                },
                "content": {
                    "he": "בשלב זה ניצור את הקומפוננט כך שתציג את התוכן שלה בתבנית הכללית",
                    "ar": "في هذه المرحلة سنقوم بإنشاء المكون بحيث يعرض محتواه في القالب العام"
                },
                "code": {
                    "component": "import React from \"react\";\n\nconst Footer = () => {\n  return <div>Footer</div>;\n};\n\nexport default Footer;"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 102,
                "type": "main-component",
                "icon": "📄",
                "title": {
                    "he": "Main.jsx",
                    "ar": "Main.jsx"
                },
                "content": {
                    "he": "קומפוננט זה תהיה אחראית על תצוגת התוכן",
                    "ar": "هذا المكون سيكون مسؤولاً عن عرض المحتوى"
                },
                "code": {
                    "component": "import { node } from \"prop-types\";\nimport Box from \"@mui/material/Box\";\n\nconst Main = ({ children }) => {\n  return (\n    <Box sx={{ minHeight: \"85vh\", backgroundColor: \"#e3f2fd\" }}>\n      {children}\n    </Box>\n  );\n};\n\nMain.propTypes = {\n  children: node.isRequired,\n};\n\nexport default Main;"
                },
                "explanations": [
                    {
                        "he": "הקומפוננט תקבל במפתח של אובייקט ה - children את המילה השמורה props (כלומר אלמנט javascript /HTML /React data בין התגית הפותחת לתגית הסוגרת)",
                        "ar": "المكون سيتلقى في مفتاح كائن props الكلمة المحجوزة children (أي عنصر بيانات JavaScript/HTML/React بين العلامة الافتتاحية والعلامة الإغلاقية)"
                    },
                    {
                        "he": "התוכן הראשי יהיה עטוף באלמנט Box של MUI שאני קובע גובה מינימלי וצבע רקע",
                        "ar": "المحتوى الرئيسي سيكون ملفوفًا في عنصر Box من MUI حيث أحدد ارتفاعًا أدنى ولون خلفية"
                    },
                    {
                        "he": "בנקודה זאת התוכן יוצג",
                        "ar": "في هذه النقطة سيتم عرض المحتوى"
                    },
                    {
                        "he": "אני מוודא בעזרת ספריית propTypes שהקומפוננט אכן מקבלת אלמנט של React במפתח children שבאובייקט הפרופס",
                        "ar": "أتأكد باستخدام مكتبة propTypes أن المكون يتلقى بالفعل عنصر React في مفتاح children في كائن props"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 103,
                "type": "layout-component",
                "icon": "📄",
                "title": {
                    "he": "Layout.jsx",
                    "ar": "Layout.jsx"
                },
                "content": {
                    "he": "בקומפוננט זה אסדר את התוכן כך שלכל דף ודף באתר יהיה Header Footer קבוע ורק התוכן של הדפים ישתנה בהתאם לדף שהגולש נמצא בתוכו",
                    "ar": "في هذا المكون سأرتب المحتوى بحيث يكون لكل صفحة في الموقع Header و Footer ثابتان ويتغير فقط محتوى الصفحات حسب الصفحة التي يتصفحها المستخدم"
                },
                "code": {
                    "component": "import React from \"react\";\nimport { node } from \"prop-types\";\nimport Header from \"./header/Header\";\nimport Main from \"./main/Main\";\nimport Footer from \"./footer/Footer\";\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Header />\n      <Main>{children}</Main>\n      <Footer />\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: node.isRequired,\n};\n\nexport default Layout;"
                },
                "explanations": [
                    {
                        "he": "הקומפוננט תקבל במפתח של אובייקט הפרופ את המילה השמורה children",
                        "ar": "المكون سيتلقى في مفتاح كائن props الكلمة المحجوزة children"
                    },
                    {
                        "he": "נעטוף את האלמנטים בקומפוננט באלמנט React.Fragment",
                        "ar": "سنلف العناصر في المكون في عنصر React.Fragment"
                    },
                    {
                        "he": "נציג לגולש את הקומפוננטות:",
                        "ar": "سنعرض للمستخدم المكونات:"
                    },
                    {
                        "he": "Header - שתכלול תפריט ניווט בעתיד",
                        "ar": "Header - التي ستشمل قائمة تنقل في المستقبل"
                    },
                    {
                        "he": "Main - אליה נעביר את התוכן של הדף שברצוננו להציג",
                        "ar": "Main - التي سنمرر إليها محتوى الصفحة التي نريد عرضها"
                    },
                    {
                        "he": "Footer – תכלול תפריט ניווט בעתיד לוגו וזכויות יוצרים",
                        "ar": "Footer - ستشمل قائمة تنقل في المستقبل وشعار وحقوق الطبع والنشر"
                    },
                    {
                        "he": "אני מוודא בעזרת ספריית propTypes שהקומפוננט אכן מקבלת אלמנט של React במפתח children שבאובייקט הפרופס",
                        "ar": "أتأكد باستخدام مكتبة propTypes أن المكون يتلقى بالفعل عنصر React في مفتاح children في كائن props"
                    },
                    {
                        "he": "! כרגע התוכן של הדף הוא עדיין סטאטי עד שנלמד בהמשך המצגת להשתמש בניתובים",
                        "ar": "! حاليًا محتوى الصفحة لا يزال ثابتًا حتى نتعلم لاحقًا في العرض التقديمي استخدام التوجيه"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 104,
                "type": "app-js-layout",
                "icon": "📱",
                "title": {
                    "he": "App.js",
                    "ar": "App.js"
                },
                "content": {
                    "he": "נעטוף את הקומפוננט CardsPage בקומפוננט Layout כך שיוצג לנו תוכן הדף Header Footer ביחד עם CardsPage",
                    "ar": "سنلف مكون CardsPage في مكون Layout بحيث يعرض لنا محتوى الصفحة Header و Footer مع CardsPage"
                },
                "code": {
                    "component": "import \"./App.css\";\nimport CardsPage from \"./cards/pages/CardsPage\";\nimport Layout from \"./layout/Layout\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <CardsPage />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;"
                },
                "explanations": [
                    {
                        "he": "! למעשה אנו מעבירים לקומפוננט Layout במפתח את הקומפוננט props - באובייקט ה children CardsPage",
                        "ar": "! في الواقع نمرر إلى مكون Layout في المفتاح CardsPage المكون إلى كائن props في children"
                    },
                    {
                        "he": "React שהוא אלמנט של CardsPage",
                        "ar": "React وهو عنصر من CardsPage"
                    },
                    {
                        "he": "! בתוך הקומפוננט Layout מוצב הקומפוננט main",
                        "ar": "! داخل مكون Layout يتم وضع مكون main"
                    },
                    {
                        "he": "שמקבל גם הוא את אלמנט ה React במפתח ומציג אותו props - באובייקט ה children",
                        "ar": "الذي يتلقى أيضًا عنصر React في المفتاح ويعرضه من كائن props في children"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 105,
                "type": "browser-result-layout",
                "icon": "🌐",
                "title": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "content": {
                    "he": "ניתן לראות כי בהתאם לתבנית שקבענו מוצג לגולש",
                    "ar": "يمكن رؤية أنه وفقًا للنموذج الذي حددناه يتم عرضه للمستخدم"
                },
                "explanations": [
                    {
                        "he": "את תפריט הניווט העליון",
                        "ar": "قائمة التنقل العلوية"
                    },
                    {
                        "he": "לאחר מכן את תוכן הדף",
                        "ar": "ثم محتوى الصفحة"
                    },
                    {
                        "he": "ולבסוף התפריט התחתון",
                        "ar": "وأخيرًا القائمة السفلية"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 106,
                "type": "error-page",
                "icon": "❌",
                "title": {
                    "he": "ErrorPage.jsx",
                    "ar": "ErrorPage.jsx"
                },
                "content": {
                    "he": "דף שגיאת 404 שיוצג הגולש במקרה והגיע לכתובת URL שלא קיימת באפליקציה",
                    "ar": "صفحة خطأ 404 التي ستُعرض للمستخدم في حالة وصوله لعنوان URL غير موجود في التطبيق"
                },
                "code": {
                    "component": "import React from \"react\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport PageHeader from \"./../components/PageHeader\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\n\nconst ErrorPage = () => {\n  return (\n    <Container>\n      <PageHeader title=\"Error 404\" subtitle=\"Page not found\" />\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={8}>\n          <Typography variant=\"h5\" color=\"initial\">\n            Oops... The requested URL was not found on this server\n          </Typography>\n          <Button variant=\"text\" color=\"primary\">\n            Click here to return to the home page...\n          </Button>\n        </Grid>\n        <Grid item xs={12} md={4} justifyContent=\"center\">\n          <img\n            width=\"100%\"\n            src=\"/assets/images/broken-robot.png\"\n            alt=\"broken robot\"\n          />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default ErrorPage;"
                },
                "explanations": [
                    {
                        "he": "ניצור את הנתיב src/pages/ErrorPage.jsx",
                        "ar": "سنقوم بإنشاء المسار src/pages/ErrorPage.jsx"
                    },
                    {
                        "he": "ניצור את הקומפוננט ErrorPage",
                        "ar": "سنقوم بإنشاء مكون ErrorPage"
                    },
                    {
                        "he": "הקומפוננט תציג לגולש כותרות מתאימות",
                        "ar": "المكون سيعرض للمستخدم عناوين مناسبة"
                    },
                    {
                        "he": "טקסט מתאים שיסביר לגולש שהדף שהוא ביקש לא נמצא",
                        "ar": "نص مناسب يشرح للمستخدم أن الصفحة التي طلبها غير موجودة"
                    },
                    {
                        "he": "כפתור שמאוחר יותר יהיה לינק חזרה לדף הבית",
                        "ar": "زر سيكون لاحقًا رابطًا للعودة إلى الصفحة الرئيسية"
                    },
                    {
                        "he": "תמונה להמחשה שהגולש הגיע לדף 404",
                        "ar": "صورة توضيحية أن المستخدم وصل إلى صفحة 404"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 107,
                "type": "browser-result-error",
                "icon": "🌐",
                "title": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "content": {
                    "he": "ניתן לראות כי בהתאם לתבנית שקבענו",
                    "ar": "يمكن رؤية أنه وفقًا للنموذج الذي حددناه"
                },
                "explanations": [
                    {
                        "he": "אנחנו רואים את כותרות הדף",
                        "ar": "نرى عناوين الصفحة"
                    },
                    {
                        "he": "את החלק המיועד לטקסט המסביר על האפליקציה",
                        "ar": "الجزء المخصص للنص الذي يشرح عن التطبيق"
                    },
                    {
                        "he": "ורואים את התמונה של הכרטיס",
                        "ar": "ونرى صورة البطاقة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 108,
                "type": "react-router-dom",
                "icon": "🛣️",
                "title": {
                    "he": "React Router Dom",
                    "ar": "React Router Dom"
                },
                "content": {
                    "he": "ניתובים באפליקציה שהיא Single Page Application",
                    "ar": "التوجيه في تطبيق Single Page Application"
                },
                "link": "https://reactrouter.com/en/main",
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 109,
                "type": "router-definition",
                "icon": "🔍",
                "title": {
                    "he": "Definition",
                    "ar": "التعريف"
                },
                "content": {
                    "he": "React Router DOM is an npm package that enables you to implement dynamic routing in a web app. It allows you to display pages and allow users to navigate them. It is a fully-featured client and server-side routing library for React. React Router Dom is used to build single-page applications i.e. applications that have many pages or components but the page is never refreshed instead the content is dynamically fetched based on the URL.",
                    "ar": "React Router DOM هو حزمة npm تمكنك من تنفيذ التوجيه الديناميكي في تطبيق ويب. يسمح لك بعرض الصفحات والسماح للمستخدمين بالتنقل بينها. إنها مكتبة توجيه كاملة الميزات للعميل والخادم لـ React. يُستخدم React Router Dom لبناء تطبيقات الصفحة الواحدة، أي التطبيقات التي تحتوي على صفحات أو مكونات متعددة ولكن الصفحة لا يتم تحديثها أبدًا، بل يتم جلب المحتوى ديناميكيًا بناءً على URL."
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 110,
                "type": "router-benefits",
                "icon": "👍",
                "title": {
                    "he": "Benefits",
                    "ar": "المزايا"
                },
                "content": {
                    "he": "יתרונות השימוש ב-React Router",
                    "ar": "مزايا استخدام React Router"
                },
                "items": [
                    {
                        "he": "The page does not have to be refreshed when a link to another page is clicked",
                        "ar": "الصفحة لا تحتاج إلى تحديث عند النقر على رابط لصفحة أخرى"
                    },
                    {
                        "he": "Very fast compared to traditional page navigation",
                        "ar": "سريع جدًا مقارنة بالتنقل التقليدي بين الصفحات"
                    },
                    {
                        "he": "Better user experience",
                        "ar": "تجربة مستخدم أفضل"
                    },
                    {
                        "he": "It uses React components",
                        "ar": "يستخدم مكونات React"
                    },
                    {
                        "he": "Single Page Application",
                        "ar": "تطبيق الصفحة الواحدة"
                    },
                    {
                        "he": "Easy to learn and apply",
                        "ar": "سهل التعلم والتطبيق"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 111,
                "type": "router-installation",
                "icon": "⚙️",
                "title": {
                    "he": "Installation",
                    "ar": "التثبيت"
                },
                "content": {
                    "he": "התקנת React Router DOM",
                    "ar": "تثبيت React Router DOM"
                },
                "command": "npm i react-router-dom",
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 112,
                "type": "routes-infrastructure",
                "icon": "🏗️",
                "title": {
                    "he": "הכנת תשתית",
                    "ar": "إعداد البنية التحتية"
                },
                "content": {
                    "he": "ניצור את הנתיב src/routes ובתוכו את הקבצים:",
                    "ar": "سنقوم بإنشاء المسار src/routes وبداخله الملفات:"
                },
                "items": [
                    {
                        "he": "NavBarLink.jsx - קומפוננט שיעטוף אלמנט כך שלחיצה עליו תעביר לכתובת ה – URL המוגדרת",
                        "ar": "NavBarLink.jsx - مكون سيلف عنصرًا بحيث النقر عليه ينقل إلى عنوان URL المحدد"
                    },
                    {
                        "he": "NavItem.jsx - קומפוננט שישמש כלינק בתפריט הניווט",
                        "ar": "NavItem.jsx - مكون سيخدم كلينك في قائمة التنقل"
                    },
                    {
                        "he": "Router.jsx – הקובץ שינהל את התצוגה של הדפים",
                        "ar": "Router.jsx – الملف الذي سيدير عرض الصفحات"
                    },
                    {
                        "he": "routesModel.js - יכיל אובייקט שישמש כשפה משותפת לכל שמות הלינקים וערכם",
                        "ar": "routesModel.js - سيحتوي على كائن سيخدم كلغة مشتركة لجميع أسماء الروابط وقيمها"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 113,
                "type": "routes-model",
                "icon": "📄",
                "title": {
                    "he": "routesModel.js",
                    "ar": "routesModel.js"
                },
                "content": {
                    "he": "מודול זה ישמש כשפה משותפת לכל שמות הלינקים וערכם",
                    "ar": "هذه الوحدة ستخدم كلغة مشتركة لجميع أسماء الروابط وقيمها"
                },
                "code": {
                    "component": "const ROUTES = {\n  ROOT: \"/\",\n  ABOUT: \"/about\",\n  CARDS: \"/cards\",\n};\n\nexport default ROUTES;"
                },
                "explanations": [
                    {
                        "he": "ניצור קבוע בשם ROUTES שערכו יהיה אובייקט שהמפתחות שלו יהיו הדפים אליהם נרצה להגיע והערכים הם הנתיב שנעביר לקומפוננט שיבקש URL",
                        "ar": "سنقوم بإنشاء ثابت باسم ROUTES تكون قيمته كائنًا حيث مفاتيحه ستكون الصفحات التي نريد الوصول إليها والقيم هي المسار الذي سنمرره للمكون الذي يطلب URL"
                    },
                    {
                        "he": "נייצא את הקבוע שיצרנו מהמודול",
                        "ar": "سنصدر الثابت الذي أنشأناه من الوحدة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 114,
                "type": "routes-component",
                "icon": "🛣️",
                "title": {
                    "he": "Routes",
                    "ar": "المسارات"
                },
                "content": {
                    "he": "קומפוננט של react-router-dom שאחראי על ניתובים",
                    "ar": "مكون من react-router-dom مسؤول عن التوجيه"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 115,
                "type": "router-component",
                "icon": "📄",
                "title": {
                    "he": "Router.jsx",
                    "ar": "Router.jsx"
                },
                "content": {
                    "he": "קובץ זה ינהל את תצוגת הדפים לגולש",
                    "ar": "هذا الملف سيدير عرض الصفحات للمستخدم"
                },
                "code": {
                    "component": "import React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport CardsPage from \"./../cards/pages/CardsPage\";\nimport AboutPage from \"./../pages/AboutPage\";\nimport ErrorPage from \"./../pages/ErrorPage\";\nimport Sandbox from \"./../sandbox/Sandbox\";\nimport ROUTES from \"./routesModel\";\n\nconst Router = () => {\n  return (\n    <Routes>\n      <Route path={ROUTES.CARDS} element={<CardsPage />} />\n      <Route path={ROUTES.ABOUT} element={<AboutPage />} />\n      <Route path=\"/sandbox\" element={<Sandbox />} />\n      <Route path=\"*\" element={<ErrorPage />} />\n    </Routes>\n  );\n};\n\nexport default Router;"
                },
                "explanations": [
                    {
                        "he": "נייבא את הקומפוננטות Routes ו-Route מספריית react-router-dom",
                        "ar": "نستورد مكونات Routes و Route من مكتبة react-router-dom"
                    },
                    {
                        "he": "ניצור קומפוננט בשם Router",
                        "ar": "سنقوم بإنشاء مكون باسم Router"
                    },
                    {
                        "he": "נעטוף את קומפוננטות ה-Route בקומפוננט Routes",
                        "ar": "سنلف مكونات Route في مكون Routes"
                    },
                    {
                        "he": "כל קומפוננט מסוג Route תקבל בשלב זה שני מאפיינים:",
                        "ar": "كل مكون من نوع Route سيتلقى في هذه المرحلة خاصيتين:"
                    },
                    {
                        "he": "path - כתובת URL",
                        "ar": "path - عنوان URL"
                    },
                    {
                        "he": "element - הקומפוננט שנרצה להציג במידה ומגיעים לכתובת ה-URL של הקומפוננט",
                        "ar": "element - المكون الذي نريد عرضه في حالة الوصول إلى عنوان URL للمكون"
                    },
                    {
                        "he": "הקומפוננט האחרונה שנציב תקבל במאפיין path את הכתובת \"*\" וכך היא תיירט את כל הכתובות שלא נתפסו בניתובים הקודמים ותציג ErrorPage קומפוננט",
                        "ar": "المكون الأخير الذي سنضعه سيتلقى في خاصية path العنوان \"*\" وهكذا ستعترض جميع العناوين التي لم يتم التقاطها في التوجيهات السابقة وتعرض مكون ErrorPage"
                    },
                    {
                        "he": "! יש חשיבות לסדר הקומפוננטות של Route",
                        "ar": "! ترتيب مكونات Route مهم"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 123,
                "title": {
                    "he": "Babel Sandbox",
                    "ar": "Babel Sandbox"
                },
                "type": "babel-sandbox",
                "icon": "🔧",
                "content": {
                    "he": "דוגמה לתהליך המרת הקוד באמצעות babel.js ניתן לראות באתר שלהם תחת הלשונית 'Try it out' בתפריט הניווט",
                    "ar": "مثال على عملية تحويل الكود باستخدام babel.js يمكن رؤيته على موقعهم تحت علامة التبويب 'Try it out' في قائمة التنقل"
                },
                "link": "https://babeljs.io/",
                "notes": [
                    {
                        "he": "הסנדבוקס בנוי משלושה חלקים:",
                        "ar": "يتكون Sandbox من ثلاثة أجزاء:"
                    },
                    {
                        "he": "מסך ימין - מציג את הקוד אחרי תהליך הקומפילציה",
                        "ar": "الشاشة اليمنى - تعرض الكود بعد عملية التجميع"
                    },
                    {
                        "he": "מסך אמצע - משמש לכתיבת קוד JavaScript דקלרטיבי ומעודכן",
                        "ar": "الشاشة الوسطى - تُستخدم لكتابة كود JavaScript تصريحي ومحدث"
                    },
                    {
                        "he": "תפריט צד - יש בו אפשרויות שונות להצגת הקוד אחרי הקומפילציה",
                        "ar": "قائمة جانبية - تحتوي على خيارات مختلفة لعرض الكود بعد التجميع"
                    }
                ],
                "youtubeLink": "https://www.youtube.com/watch?v=UeVq_U5obnE&t=149s",
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 124,
                "title": {
                    "he": "Component",
                    "ar": "المكون"
                },
                "type": "component-definition",
                "icon": "🧩",
                "content": {
                    "he": "יחידת קוד עצמאית ואחת מאבני היסוד של ספריית React",
                    "ar": "وحدة كود مستقلة وأحد اللبنات الأساسية لمكتبة React"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 125,
                "title": {
                    "he": "Components Structure",
                    "ar": "هيكل المكونات"
                },
                "type": "component-structure",
                "icon": "🏗️",
                "items": [
                    {
                        "he": "TEMPLATE (HTML)",
                        "ar": "TEMPLATE (HTML)"
                    },
                    {
                        "he": "LOGIC (JAVASCRIPT)",
                        "ar": "LOGIC (JAVASCRIPT)"
                    },
                    {
                        "he": "STYLES (CSS)",
                        "ar": "STYLES (CSS)"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 126,
                "title": {
                    "he": "Components Types",
                    "ar": "أنواع المكونات"
                },
                "type": "component-types",
                "icon": "📋",
                "items": [
                    {
                        "he": "Function",
                        "ar": "Function"
                    },
                    {
                        "he": "Class",
                        "ar": "Class"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 127,
                "title": {
                    "he": "Template",
                    "ar": "القالب"
                },
                "type": "template-explanation",
                "icon": "📄",
                "content": {
                    "he": "ניצור קומפוננט פונקציונלי שמחזיר אלמנט HTML שנציג למשתמש",
                    "ar": "سننشئ مكون وظيفي يعيد عنصر HTML سنعرضه للمستخدم"
                },
                "backgroundColor": "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)"
            },
            {
                "id": 128,
                "title": {
                    "he": "PageHeader",
                    "ar": "PageHeader"
                },
                "type": "functional-component-example",
                "icon": "💻",
                "code": {
                    "he": "const PageHeader = () => {\n  return <h2>pageHeader works!</h2>;\n};\n\nexport default PageHeader;",
                    "ar": "const PageHeader = () => {\n  return <h2>pageHeader works!</h2>;\n};\n\nexport default PageHeader;"
                },
                "explanation": [
                    {
                        "he": "ניצור קבוע בשם PageHeader שערכו יהיה שווה לפונקציה אנונימית",
                        "ar": "سننشئ ثابت باسم PageHeader قيمته ستكون دالة مجهولة"
                    },
                    {
                        "he": "הפונקציה תחזיר אלמנט של HTML מסוג H2 עם הכיתוב בתוכו",
                        "ar": "ستعيد الدالة عنصر HTML من نوع H2 مع النص بداخله"
                    },
                    {
                        "he": "לבסוף נייצא את הפונקציה מהמודול באמצעות export default",
                        "ar": "أخيراً سنصدر الدالة من الوحدة باستخدام export default"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)"
            },
            {
                "id": 129,
                "title": {
                    "he": "App.js",
                    "ar": "App.js"
                },
                "type": "app-usage-example",
                "icon": "📱",
                "code": {
                    "he": "import \"./App.css\";\nimport PageHeader from \"./components/PageHeader\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageHeader />\n    </div>\n  );\n}\n\nexport default App;",
                    "ar": "import \"./App.css\";\nimport PageHeader from \"./components/PageHeader\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageHeader />\n    </div>\n  );\n}\n\nexport default App;"
                },
                "explanation": [
                    {
                        "he": "נייבא את הקומפוננט שיצרנו",
                        "ar": "سنستورد المكون الذي أنشأناه"
                    },
                    {
                        "he": "נציב אותה בתוך החלק של ה-HTML שהפונקציה של הקומפוננט App מחזירה",
                        "ar": "سنضعه داخل جزء HTML الذي تعيده دالة مكون App"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #d299c2 0%, #fef9d7 100%)"
            },
            {
                "id": 130,
                "title": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "type": "browser-result",
                "icon": "🌐",
                "content": {
                    "he": "ניתן לראות שהטקסט שהחזרנו מהקומפוננט שיצרנו PageHeader מוצג לגולש עם העיצוב של אלמנט ה-H2 שנתנו לו",
                    "ar": "يمكن رؤية أن النص الذي أعدناه من المكون الذي أنشأناه PageHeader معروض للمستخدم مع تصميم عنصر H2 الذي أعطيناه له"
                },
                "note": {
                    "he": "במצגת זאת נתמקד בקומפוננטות מסוג functional components של React! חובה לעטוף את כל האלמנטים שהפונקציה מחזירה באלמנט אחד של HTML",
                    "ar": "في هذه العروض التقديمية سنركز على مكونات من نوع functional components في React! إلزامي لف جميع العناصر التي تعيدها الدالة في عنصر HTML واحد"
                },
                "backgroundColor": "linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%)"
            },
            {
                "id": 131,
                "title": {
                    "he": "Compilation Error",
                    "ar": "خطأ في التجميع"
                },
                "type": "compilation-error",
                "icon": "⚠️",
                "content": {
                    "he": "במידה ותהיה שגיאה בקוד Babel תתריע לי על כך במספר מקומות",
                    "ar": "إذا كان هناك خطأ في كود Babel فسيتم تنبيهي بذلك في عدة أماكن"
                },
                "backgroundColor": "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
            },
            {
                "id": 132,
                "title": {
                    "he": "איתור שגיאה",
                    "ar": "كشف الخطأ"
                },
                "type": "error-detection",
                "icon": "🔍",
                "items": [
                    {
                        "he": "עץ התיקייה והקובץ ייצבע באדום",
                        "ar": "شجرة المجلد والملف ستكون ملونة باللون الأحمر"
                    },
                    {
                        "he": "לצד הקובץ בו נעשתה השגיאה יופיע מס' השגיאות בדף",
                        "ar": "بجانب الملف الذي حدث فيه الخطأ سيظهر رقم الأخطاء في الصفحة"
                    },
                    {
                        "he": "הלשונית של המודול תיצבע אדום",
                        "ar": "تبويب الوحدة سيكون ملون باللون الأحمر"
                    },
                    {
                        "he": "מתחת לקטעי הקוד שדורשים תיקון יופיע קו אדום משונן",
                        "ar": "تحت أجزاء الكود التي تتطلب إصلاح سيظهر خط أحمر متعرج"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)"
            },
            {
                "id": 133,
                "title": {
                    "he": "בטרמינל של vscode",
                    "ar": "في terminal الخاص بـ vscode"
                },
                "type": "terminal-errors",
                "icon": "💻",
                "items": [
                    {
                        "he": "בלשונית TERMINAL",
                        "ar": "في تبويب TERMINAL"
                    },
                    {
                        "he": "תופיע השגיאה Failed to compile",
                        "ar": "سيظهر الخطأ Failed to compile"
                    },
                    {
                        "he": "פירוט השגיאה",
                        "ar": "تفاصيل الخطأ"
                    },
                    {
                        "he": "באיזה נתיב היא נמצאת",
                        "ar": "في أي مسار هي موجودة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #a8c0ff 0%, #3f2b96 100%)"
            },
            {
                "id": 134,
                "title": {
                    "he": "בלשונית PROBLEMS",
                    "ar": "في تبويب PROBLEMS"
                },
                "type": "problems-tab",
                "icon": "📋",
                "items": [
                    {
                        "he": "יופיע באופן מקוצר מיקום השגיאה",
                        "ar": "سيظهر موقع الخطأ بشكل مختصر"
                    },
                    {
                        "he": "מהות השגיאה",
                        "ar": "طبيعة الخطأ"
                    },
                    {
                        "he": "סוג השגיאה",
                        "ar": "نوع الخطأ"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)"
            },
            {
                "id": 135,
                "title": {
                    "he": "בדפדפן",
                    "ar": "في المتصفح"
                },
                "type": "browser-errors",
                "icon": "🌐",
                "items": [
                    {
                        "he": "בקונסול תופיע השגיאה",
                        "ar": "في الكونسول سيظهر الخطأ"
                    },
                    {
                        "he": "במסך התצוגה הראשי יופיעו פרטי השגיאה",
                        "ar": "في شاشة العرض الرئيسية ستظهر تفاصيل الخطأ"
                    }
                ],
                "note": {
                    "he": "במסך התצוגה הראשי ניתן ללחוץ על הסימן X ולחזור לתצוגת האפליקציה אך מומלץ לתקן את השגיאה בקוד במקום",
                    "ar": "في شاشة العرض الرئيسية يمكن النقر على علامة X والعودة إلى عرض التطبيق ولكن يُنصح بإصلاح الخطأ في الكود بدلاً من ذلك"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 136,
                "title": {
                    "he": "תיקון השגיאה",
                    "ar": "إصلاح الخطأ"
                },
                "type": "error-fix",
                "icon": "🔧",
                "code": {
                    "he": "const PageHeader = () => {\n  return (\n    <>\n      <h2>pageHeader works!</h2>\n      <p>hallo world</p>\n    </>\n  );\n};\nexport default PageHeader;",
                    "ar": "const PageHeader = () => {\n  return (\n    <>\n      <h2>pageHeader works!</h2>\n      <p>hallo world</p>\n    </>\n  );\n};\nexport default PageHeader;"
                },
                "explanation": [
                    {
                        "he": "מקור השגיאה היה ניסיון להחזיר יותר מאלמנט HTML אחד מהקומפוננט",
                        "ar": "مصدر الخطأ كان محاولة إرجاع أكثر من عنصر HTML واحد من المكون"
                    },
                    {
                        "he": "אם לא רוצים לעטוף את האלמנטים ב-div עיצובי (כמו אלמנט HTML מדומה), ניתן להשתמש ב-React.Fragment",
                        "ar": "إذا لم نرغب في لف العناصر في div تصميمي (مثل عنصر HTML وهمي)، يمكن استخدام React.Fragment"
                    },
                    {
                        "he": "React.Fragment עוטף את האלמנטים אך לא מופיע ב-DOM",
                        "ar": "React.Fragment يلف العناصر ولكن لا يظهر في DOM"
                    },
                    {
                        "he": "כפי שניתן לראות בטאב Elements של Chrome DevTools, לא נוסף אלמנט HTML עיצובי נוסף",
                        "ar": "كما يمكن رؤيته في تبويب Elements الخاص بـ Chrome DevTools، لم يتم إضافة عنصر HTML تصميمي إضافي"
                    },
                    {
                        "he": "הדרך המקוצרת לכתיבת React.Fragment היא <></>",
                        "ar": "الطريقة المختصرة لكتابة React.Fragment هي <></>"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 137,
                "title": {
                    "he": "Logic",
                    "ar": "المنطق"
                },
                "type": "component-logic",
                "icon": "🧠",
                "content": {
                    "he": "בדיוק כמו בכל פונקציה, בקומפוננט ניתן גם ליצור לוגיקה מלבד החזרת אלמנט HTML, וכזו שתשפיע על האלמנט המוחזר",
                    "ar": "تماماً كما في أي دالة، في المكون يمكن أيضاً إنشاء منطق بالإضافة إلى إرجاع عنصر HTML، ومن هذا النوع الذي سيؤثر على العنصر المُرجَع"
                },
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 138,
                "title": {
                    "he": "React Fragment - סיכום",
                    "ar": "React Fragment - ملخص"
                },
                "type": "fragment-summary",
                "icon": "📝",
                "items": [
                    {
                        "he": "React Fragment מאפשר להחזיר מספר אלמנטים ללא wrapper נוסף",
                        "ar": "React Fragment يسمح بإرجاع عدة عناصر بدون wrapper إضافي"
                    },
                    {
                        "he": "הסינטקס המקוצר: <>...</>",
                        "ar": "الصيغة المختصرة: <>...</>"
                    },
                    {
                        "he": "הסינטקס המלא: <React.Fragment>...</React.Fragment>",
                        "ar": "الصيغة الكاملة: <React.Fragment>...</React.Fragment>"
                    },
                    {
                        "he": "לא מוסיף אלמנטים נוספים ל-DOM",
                        "ar": "لا يضيف عناصر إضافية إلى DOM"
                    },
                    {
                        "he": "פותר את בעיית 'Adjacent JSX elements'",
                        "ar": "يحل مشكلة 'Adjacent JSX elements'"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 139,
                "title": {
                    "he": "String interpolation",
                    "ar": "استيفاء النص"
                },
                "type": "string-interpolation",
                "icon": "🔗",
                "content": {
                    "he": "יצירת אזור JAVASCRIPT באזור המוגדר HTML בקומפוננט",
                    "ar": "إنشاء منطقة JAVASCRIPT في المنطقة المحددة HTML في المكون"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 140,
                "title": {
                    "he": "String interpolation example",
                    "ar": "مثال على استيفاء النص"
                },
                "type": "string-interpolation-example",
                "icon": "💻",
                "code": {
                    "he": "const PageHeader = () => {\n  const text = \"Hallo world\";\n\n  return (\n    <>\n      <h2>pageHeader works!</h2>\n      <p>{text}</p>\n      <p>{5 * 6}</p>\n    </>\n  );\n};\n\nexport default PageHeader;",
                    "ar": "const PageHeader = () => {\n  const text = \"Hallo world\";\n\n  return (\n    <>\n      <h2>pageHeader works!</h2>\n      <p>{text}</p>\n      <p>{5 * 6}</p>\n    </>\n  );\n};\n\nexport default PageHeader;"
                },
                "explanation": [
                    {
                        "he": "פתיחת אזור JAVASCRIPT באזור HTML המיועד מתבצעת על ידי פתיחת וסגירת סוגריים מסולסלות",
                        "ar": "فتح منطقة JAVASCRIPT في منطقة HTML المخصصة يتم عن طريق فتح وإغلاق الأقواس المجعدة"
                    },
                    {
                        "he": "בתוך ה-scope של הקומפוננט יצרתי קבוע בשם text והשוויתי את הערך שלו למחרוזת תווים",
                        "ar": "داخل نطاق المكون أنشأت ثابت باسم text وقارنت قيمته بسلسلة أحرف"
                    },
                    {
                        "he": "באזור המיועד לשפת HTML פתחתי אזור של JAVASCRIPT בעזרת פתיחת סוגריים מסולסלות ובתוכם הצבתי את שם הקבוע שיצרתי",
                        "ar": "في المنطقة المخصصة لغة HTML فتحت منطقة JAVASCRIPT بمساعدة فتح الأقواس المجعدة ووضعت بداخلها اسم الثابت الذي أنشأته"
                    },
                    {
                        "he": "בעזרת string interpolation נוסף פתחתי אזור JAVASCRIPT גם בתוך אלמנט נוסף של HTML והפעם ביצעתי חישוב כפי ששפת JAVASCRIPT יודעת לעשות",
                        "ar": "بمساعدة استيفاء النص الإضافي فتحت منطقة JAVASCRIPT أيضاً داخل عنصر HTML إضافي وهذه المرة قمت بحساب كما تعرف لغة JAVASCRIPT أن تفعل"
                    }
                ],
                "browserResult": {
                    "he": "pageHeader works!\nHallo world\n30",
                    "ar": "pageHeader works!\nHallo world\n30"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 141,
                "title": {
                    "he": "Styles",
                    "ar": "الأنماط"
                },
                "type": "styles-intro",
                "icon": "🎨",
                "content": {
                    "he": "הוספת עיצוב לקומפוננט",
                    "ar": "إضافة تصميم للمكون"
                },
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 142,
                "title": {
                    "he": "Styles Types",
                    "ar": "أنواع الأنماط"
                },
                "type": "styles-types",
                "icon": "📋",
                "items": [
                    {
                        "he": "INLINE",
                        "ar": "INLINE"
                    },
                    {
                        "he": "IMPORT STYLES FROM MODULE",
                        "ar": "IMPORT STYLES FROM MODULE"
                    },
                    {
                        "he": "EXTERNAL LIBRARIES",
                        "ar": "EXTERNAL LIBRARIES"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 143,
                "title": {
                    "he": "Inline style",
                    "ar": "النمط المضمن"
                },
                "type": "inline-style",
                "icon": "📝",
                "content": {
                    "he": "הדרך להזרקת inline style לאלמנט HTML בקומפוננט React היא על ידי הוספת מאפיין style והשוואת הערך שלו לאובייקט JavaScript שאליו נעביר אובייקט עם קונפיגורציות העיצוב שאנו רוצים לשנות",
                    "ar": "طريقة حقن النمط المضمن لعنصر HTML في مكون React هي عن طريق إضافة خاصية style ومقارنة قيمتها بكائن JavaScript الذي سنمرر إليه كائن مع تكوينات التصميم التي نريد تغييرها"
                },
                "backgroundColor": "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)"
            },
            {
                "id": 144,
                "title": {
                    "he": "Inline style example",
                    "ar": "مثال على النمط المضمن"
                },
                "type": "inline-style-example",
                "icon": "💻",
                "code": {
                    "he": "const PageHeader = () => {\n  const headLineStyle = {\n    color: \"red\",\n    fontFamily: \"Roboto\",\n  };\n\n  return (\n    <>\n      <h2 style={headLineStyle}>pageHeader works!</h2>\n      <p style={{ color: \"green\", marginTop: \"5px\" }}>inline style</p>\n    </>\n  );\n};\n\nexport default PageHeader;",
                    "ar": "const PageHeader = () => {\n  const headLineStyle = {\n    color: \"red\",\n    fontFamily: \"Roboto\",\n  };\n\n  return (\n    <>\n      <h2 style={headLineStyle}>pageHeader works!</h2>\n      <p style={{ color: \"green\", marginTop: \"5px\" }}>inline style</p>\n    </>\n  );\n};\n\nexport default PageHeader;"
                },
                "explanation": [
                    {
                        "he": "יצרתי קבוע headLineStyle שהוא אובייקט JavaScript רגיל",
                        "ar": "أنشأت ثابت headLineStyle وهو كائن JavaScript عادي"
                    },
                    {
                        "he": "בתגית HTML הפותחת, יש להשתמש במאפיין style ולהעביר אליו את שם הקבוע שיצרנו",
                        "ar": "في علامة HTML الافتتاحية، يجب استخدام خاصية style وتمرير اسم الثابت الذي أنشأناه إليها"
                    },
                    {
                        "he": "ניתן להעביר ישירות אובייקט קונפיגורציות לתוך מאפיין style",
                        "ar": "يمكن تمرير كائن التكوينات مباشرة إلى خاصية style"
                    },
                    {
                        "he": "יש לשים לב שאם מאפיין עיצובי מורכב משתי מילים, יש להשתמש ב-camelCase במקום מקף",
                        "ar": "يجب الانتباه إلى أنه إذا كانت خاصية التصميم تتكون من كلمتين، يجب استخدام camelCase بدلاً من الشرطة"
                    }
                ],
                "browserResult": {
                    "he": "pageHeader works! (בצבע אדום, גופן Roboto)\ninline style (בצבע ירוק, עם רווח עליון)",
                    "ar": "pageHeader works! (باللون الأحمر، خط Roboto)\ninline style (باللون الأخضر، مع مسافة علوية)"
                },
                "backgroundColor": "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)"
            },
            {
                "id": 145,
                "title": {
                    "he": "Styles from module",
                    "ar": "الأنماط من الوحدة"
                },
                "type": "styles-from-module",
                "icon": "📥",
                "content": {
                    "he": "דרך נוספת לשנות את העיצוב של אלמנטים ב-HTML שהקומפוננט מחזיר היא על ידי יצירת קובץ עיצוב ייעודי עם מחלקות עיצוב, ייבוא שלו למודול הקומפוננט, ושימוש במחלקות העיצוב",
                    "ar": "طريقة أخرى لتغيير تصميم العناصر في HTML التي يعيدها المكون هي عن طريق إنشاء ملف تصميم مخصص مع فئات التصميم، استيراده إلى وحدة المكون، واستخدام فئات التصميم"
                },
                "backgroundColor": "linear-gradient(135deg, #d299c2 0%, #fef9d7 100%)"
            },
            {
                "id": 146,
                "title": {
                    "he": "External Libraries",
                    "ar": "المكتبات الخارجية"
                },
                "type": "external-libraries",
                "icon": "📚",
                "content": {
                    "he": "שימוש בספריות עיצוב חיצוניות כמו Material-UI, Bootstrap, או Tailwind CSS ליישום עיצוב מהיר ועקבי בקומפוננטים",
                    "ar": "استخدام مكتبات التصميم الخارجية مثل Material-UI، Bootstrap، أو Tailwind CSS لتطبيق تصميم سريع ومتسق في المكونات"
                },
                "examples": [
                    {
                        "he": "Material-UI: <Button variant=\"contained\" color=\"primary\">Click me</Button>",
                        "ar": "Material-UI: <Button variant=\"contained\" color=\"primary\">Click me</Button>"
                    },
                    {
                        "he": "Bootstrap: <button className=\"btn btn-primary\">Click me</button>",
                        "ar": "Bootstrap: <button className=\"btn btn-primary\">Click me</button>"
                    },
                    {
                        "he": "Tailwind: <button className=\"bg-blue-500 text-white px-4 py-2\">Click me</button>",
                        "ar": "Tailwind: <button className=\"bg-blue-500 text-white px-4 py-2\">Click me</button>"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%)"
            },
            {
                "id": 147,
                "title": {
                    "he": "Styles from module example",
                    "ar": "مثال على الأنماط من الوحدة"
                },
                "type": "css-module-example",
                "icon": "💻",
                "code": {
                    "he": "// pageHeader.css\n.blue {\n  color: skyblue;\n  font-weight: bold;\n}\n\n// PageHeader.jsx\nimport \"./pageHeader.css\";\n\nconst PageHeader = () => {\n  return <h2 className=\"blue\">pageHeader works!</h2>;\n};\n\nexport default PageHeader;",
                    "ar": "// pageHeader.css\n.blue {\n  color: skyblue;\n  font-weight: bold;\n}\n\n// PageHeader.jsx\nimport \"./pageHeader.css\";\n\nconst PageHeader = () => {\n  return <h2 className=\"blue\">pageHeader works!</h2>;\n};\n\nexport default PageHeader;"
                },
                "explanation": [
                    {
                        "he": "יצרתי קובץ חדש בשם pageHeader.css",
                        "ar": "أنشأت ملف جديد باسم pageHeader.css"
                    },
                    {
                        "he": "יצרתי מחלקת CSS בתוך הקובץ",
                        "ar": "أنشأت فئة CSS داخل الملف"
                    },
                    {
                        "he": "ייבאתי את המודול CSS לקובץ הקומפוננט",
                        "ar": "استوردت وحدة CSS إلى ملف المكون"
                    },
                    {
                        "he": "השתמשתי במחלקת העיצוב שיצרתי",
                        "ar": "استخدمت فئة التصميم التي أنشأتها"
                    }
                ],
                "note": {
                    "he": "יש לשים לב ל-syntax של המאפיין class בריאקט שהוחלף ל-className",
                    "ar": "يجب الانتباه إلى syntax الخاصية class في React التي تم استبدالها بـ className"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 148,
                "title": {
                    "he": "Material UI",
                    "ar": "Material UI"
                },
                "type": "material-ui-intro",
                "icon": "🎨",
                "content": {
                    "he": "The Material Design library adapted to work with React",
                    "ar": "مكتبة Material Design المتكيفة للعمل مع React"
                },
                "link": "https://mui.com/",
                "note": {
                    "he": "יש לעבור על מצגת material-UI לפני שממשיכים במצגת זאת!",
                    "ar": "يجب المرور على عرض material-UI قبل المتابعة في هذا العرض!"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 149,
                "title": {
                    "he": "חוברת עבודה - React",
                    "ar": "دفتر العمل - React"
                },
                "type": "react-workbook-intro",
                "icon": "📚",
                "content": {
                    "he": "חוברת עבודה אינטראקטיבית ללימוד React עם פרויקט מעשי",
                    "ar": "دفتر عمل تفاعلي لتعلم React مع مشروع عملي"
                },
                "features": [
                    {
                        "he": "תרגילים מעשיים עם קוד",
                        "ar": "تمارين عملية مع الكود"
                    },
                    {
                        "he": "פרויקט מלא של בניית אפליקציה",
                        "ar": "مشروع كامل لبناء تطبيق"
                    },
                    {
                        "he": "הסברים מפורטים לכל שלב",
                        "ar": "شرح مفصل لكل خطوة"
                    },
                    {
                        "he": "תמיכה דו-לשונית (עברית/ערבית)",
                        "ar": "دعم ثنائي اللغة (عبرية/عربية)"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 150,
                "title": {
                    "he": "פרויקט מעשי - Business Cards App",
                    "ar": "مشروع عملي - تطبيق بطاقات العمل"
                },
                "type": "practical-project",
                "icon": "💼",
                "content": {
                    "he": "במהלך החוברת נבנה אפליקציה מלאה לניהול כרטיסי ביקור",
                    "ar": "خلال الدفتر سنبني تطبيق كامل لإدارة بطاقات العمل"
                },
                "projectFeatures": [
                    {
                        "he": "יצירת כרטיסי ביקור חדשים",
                        "ar": "إنشاء بطاقات عمل جديدة"
                    },
                    {
                        "he": "עריכת פרטי כרטיסים קיימים",
                        "ar": "تحرير تفاصيل البطاقات الموجودة"
                    },
                    {
                        "he": "מחיקת כרטיסים",
                        "ar": "حذف البطاقات"
                    },
                    {
                        "he": "חיפוש וסינון כרטיסים",
                        "ar": "البحث والتصفية للبطاقات"
                    },
                    {
                        "he": "שמירה ב-localStorage",
                        "ar": "الحفظ في localStorage"
                    }
                ],
                "technologies": [
                    {
                        "he": "React Hooks (useState, useEffect)",
                        "ar": "React Hooks (useState, useEffect)"
                    },
                    {
                        "he": "CSS Modules",
                        "ar": "CSS Modules"
                    },
                    {
                        "he": "Local Storage",
                        "ar": "Local Storage"
                    },
                    {
                        "he": "Form Handling",
                        "ar": "Form Handling"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 151,
                "title": {
                    "he": "Props - העברת מחרוזת",
                    "ar": "Props - تمرير النص"
                },
                "type": "props-string",
                "icon": "📝",
                "content": {
                    "he": "הדרך להזריק נתונים מקומפוננט אב לקומפוננט בן",
                    "ar": "طريقة حقن البيانات من المكون الأب إلى المكون الابن"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 152,
                "title": {
                    "he": "Passing string",
                    "ar": "تمرير النص"
                },
                "type": "passing-string",
                "icon": "📄",
                "content": {
                    "he": "העברת מחרוזת תווים מקומפוננט אב לקומפוננט בן בקומפוננט מסוג פונקציה",
                    "ar": "تمرير سلسلة أحرف من المكون الأب إلى المكون الابن في مكون من نوع دالة"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 153,
                "title": {
                    "he": "Child Component - מחרוזת",
                    "ar": "المكون الابن - النص"
                },
                "type": "child-component-string",
                "icon": "👶",
                "code": {
                    "he": "const ChildComp = props => {\n  const { string } = props;\n  \n  return (\n    <Box sx={{ backgroundColor: \"primary.dark\", width: 100, height: 100 }}>\n      <Typography>child Component</Typography>\n      <Typography>{string}</Typography>\n    </Box>\n  );\n};\n\nexport default ChildComp;",
                    "ar": "const ChildComp = props => {\n  const { string } = props;\n  \n  return (\n    <Box sx={{ backgroundColor: \"primary.dark\", width: 100, height: 100 }}>\n      <Typography>child Component</Typography>\n      <Typography>{string}</Typography>\n    </Box>\n  );\n};\n\nexport default ChildComp;"
                },
                "explanation": [
                    {
                        "he": "ניצור קומפוננט פונקציונלי שמקבל אובייקט props כפרמטר",
                        "ar": "سننشئ مكون وظيفي يستقبل كائن props كمعامل"
                    },
                    {
                        "he": "נחלץ את מפתח string מאובייקט props",
                        "ar": "سنستخرج مفتاح string من كائن props"
                    },
                    {
                        "he": "ניפתח אזור של JAVASCRIPT בתוך החלק המיועד ל-HTML בקומפוננט ונציב בתוכו את הערך של המפתח שחילצנו",
                        "ar": "سنفتح منطقة JAVASCRIPT داخل الجزء المخصص لـ HTML في المكون ونضع بداخلها قيمة المفتاح الذي استخرجناه"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 154,
                "title": {
                    "he": "Father Component - מחרוזת",
                    "ar": "المكون الأب - النص"
                },
                "type": "father-component-string",
                "icon": "👨",
                "code": {
                    "he": "const FatherComp = () => {\n  const string = \"string from father\";\n  \n  return (\n    <>\n      <Typography variant=\"body1\" m={2}>Father Component - passing string</Typography>\n      <Box sx={{ m: 2, display: \"flex\", justifyContent: \"center\", alignItems: \"center\", width: 300, height: 300, backgroundColor: \"secondary.dark\" }}>\n        <ChildComp string={string} />\n      </Box>\n    </>\n  );\n};\n\nexport default FatherComp;",
                    "ar": "const FatherComp = () => {\n  const string = \"string from father\";\n  \n  return (\n    <>\n      <Typography variant=\"body1\" m={2}>Father Component - passing string</Typography>\n      <Box sx={{ m: 2, display: \"flex\", justifyContent: \"center\", alignItems: \"center\", width: 300, height: 300, backgroundColor: \"secondary.dark\" }}>\n        <ChildComp string={string} />\n      </Box>\n    </>\n  );\n};\n\nexport default FatherComp;"
                },
                "explanation": [
                    {
                        "he": "ניצור קומפוננט בשם FatherComp",
                        "ar": "سننشئ مكون باسم FatherComp"
                    },
                    {
                        "he": "ניצור קבוע בשם string שערכו יהיה מחרוזת תווים",
                        "ar": "سننشئ ثابت باسم string قيمته ستكون سلسلة أحرف"
                    },
                    {
                        "he": "נציב את קומפוננט הבן ChildComp בתוך החלק המיועד ל-HTML בקומפוננט האב ונעשה השמה למפתח string בתוך אובייקט ה-props",
                        "ar": "سنضع المكون الابن ChildComp داخل الجزء المخصص لـ HTML في المكون الأب وسنقوم بتعيين مفتاح string داخل كائن props"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 155,
                "title": {
                    "he": "התוצאה בדפדפן - מחרוזת",
                    "ar": "النتيجة في المتصفح - النص"
                },
                "type": "browser-result-string",
                "icon": "🌐",
                "content": {
                    "he": "ניתן לראות את הטקסט שהעברנו מקומפוננט האב מוצג בתוך קומפוננט הבן",
                    "ar": "يمكن رؤية النص الذي مررناه من المكون الأب معروض داخل المكون الابن"
                },
                "devtools": {
                    "he": "בנוסף בגלל שהורדנו את התוסף react dev tools אנו יכולים לגשת ללשונית components, ללחוץ על הקומפוננט שמעניינת אותנו, ולקבל בין היתר את המפתחות והערכים שמועברים באובייקט props",
                    "ar": "بالإضافة إلى ذلك، لأننا حملنا إضافة react dev tools يمكننا الوصول إلى تبويب components، والنقر على المكون الذي يهمنا، والحصول على المفاتيح والقيم التي يتم تمريرها في كائن props"
                },
                "backgroundColor": "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)"
            },
            {
                "id": 156,
                "title": {
                    "he": "Passing Object",
                    "ar": "تمرير الكائن"
                },
                "type": "passing-object",
                "icon": "📦",
                "content": {
                    "he": "העברת אובייקט מקומפוננט אב לקומפוננט בן בקומפוננט מסוג פונקציה וחילוץ המפתחות והערכים ממנו",
                    "ar": "تمرير كائن من المكون الأب إلى المكون الابن في مكون من نوع دالة واستخراج المفاتيح والقيم منه"
                },
                "backgroundColor": "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)"
            },
            {
                "id": 157,
                "title": {
                    "he": "Child Component - אובייקט",
                    "ar": "المكون الابن - الكائن"
                },
                "type": "child-component-object",
                "icon": "👶",
                "code": {
                    "he": "const ChildComp = ({ name }) => {\n  const { first, last } = name;\n  \n  return (\n    <>\n      <Box sx={{ backgroundColor: \"primary.dark\", width: 100, height: 100, \"&:hover\": { backgroundColor: \"primary.main\", opacity: [0.9, 0.8, 0.7] } }}>\n        <Typography>{first}</Typography>\n        <Typography>{last}</Typography>\n      </Box>\n    </>\n  );\n};\n\nexport default ChildComp;",
                    "ar": "const ChildComp = ({ name }) => {\n  const { first, last } = name;\n  \n  return (\n    <>\n      <Box sx={{ backgroundColor: \"primary.dark\", width: 100, height: 100, \"&:hover\": { backgroundColor: \"primary.main\", opacity: [0.9, 0.8, 0.7] } }}>\n        <Typography>{first}</Typography>\n        <Typography>{last}</Typography>\n      </Box>\n    </>\n  );\n};\n\nexport default ChildComp;"
                },
                "explanation": [
                    {
                        "he": "בגלל שקומפוננט מסוג פונקציה מתנהגת כמו כל פונקציה ב-JAVASCRIPT נוכל לחלץ מאובייקט props מספר מפתחות first, last",
                        "ar": "لأن المكون من نوع دالة يتصرف مثل أي دالة في JAVASCRIPT يمكننا استخراج عدة مفاتيح first, last من كائن props"
                    },
                    {
                        "he": "ניפתח אזור של JAVASCRIPT בתוך החלק המיועד ל-HTML בקומפוננט ונציב בתוכו את הערכים של המפתחות שחילצנו מתוך אובייקט הפרופס",
                        "ar": "سنفتح منطقة JAVASCRIPT داخل الجزء المخصص لـ HTML في المكون ونضع بداخلها قيم المفاتيح التي استخرجناها من كائن props"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #d299c2 0%, #fef9d7 100%)"
            },
            {
                "id": 158,
                "title": {
                    "he": "Sending two keys",
                    "ar": "إرسال مفتاحين"
                },
                "type": "sending-two-keys",
                "icon": "🔑",
                "content": {
                    "he": "הדרך להעביר יותר ממפתח אחד לאובייקט הפרופס",
                    "ar": "طريقة تمرير أكثر من مفتاح واحد إلى كائن props"
                },
                "backgroundColor": "linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%)"
            },
            {
                "id": 159,
                "title": {
                    "he": "Father Component - שני מפתחות",
                    "ar": "المكون الأب - مفتاحان"
                },
                "type": "father-component-two-keys",
                "icon": "👨",
                "code": {
                    "he": "const FatherComp = () => {\n  const name = { first: \"david\", last: \"yakin\" };\n  \n  return (\n    <>\n      <Typography variant=\"body1\" m={2}>Father Component - passing two props</Typography>\n      <Box sx={{ m: 2, display: \"flex\", justifyContent: \"center\", alignItems: \"center\", width: 300, height: 300, backgroundColor: \"secondary.dark\" }}>\n        <ChildComp first={name.first} last={name.last} />\n      </Box>\n    </>\n  );\n};\n\nexport default FatherComp;",
                    "ar": "const FatherComp = () => {\n  const name = { first: \"david\", last: \"yakin\" };\n  \n  return (\n    <>\n      <Typography variant=\"body1\" m={2}>Father Component - passing two props</Typography>\n      <Box sx={{ m: 2, display: \"flex\", justifyContent: \"center\", alignItems: \"center\", width: 300, height: 300, backgroundColor: \"secondary.dark\" }}>\n        <ChildComp first={name.first} last={name.last} />\n      </Box>\n    </>\n  );\n};\n\nexport default FatherComp;"
                },
                "explanation": [
                    {
                        "he": "ניצור קבוע בשם name שערכו יהיה אובייקט עם מפתחות וערכים",
                        "ar": "سننشئ ثابت باسم name قيمته ستكون كائن مع مفاتيح وقيم"
                    },
                    {
                        "he": "הפעם נעביר כל מפתח מהאובייקט שיצרנו לתוך מפתח משלו באובייקט הפרופס",
                        "ar": "هذه المرة سنمرر كل مفتاح من الكائن الذي أنشأناه إلى مفتاحه الخاص في كائن props"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 160,
                "title": {
                    "he": "משימת Props - Business Cards App",
                    "ar": "مهمة Props - تطبيق بطاقات العمل"
                },
                "type": "props-task-business-cards",
                "icon": "💼",
                "content": {
                    "he": "בניית אפליקציית כרטיסי ביקור עם Material-UI Card components",
                    "ar": "بناء تطبيق بطاقات العمل مع مكونات Material-UI Card"
                },
                "task": {
                    "he": "יצירת קומפוננטים: CardHead (תמונה), CardBody (כותרת ותיאור), CardActionBar (אייקון לב)",
                    "ar": "إنشاء مكونات: CardHead (صورة)، CardBody (عنوان ووصف)، CardActionBar (أيقونة قلب)"
                },
                "data": {
                    "he": "const card = {\n  _id: \"63765801e20ed868a69a62c4\",\n  title: \"first\",\n  subtitle: \"subtitle\",\n  description: \"testing 123\",\n  phone: \"050-0000000\",\n  email: \"test@gmail.com\",\n  web: \"https://www.test.co.il\",\n  image: {\n    url: \"assets/images/business-card-top-image.jpg\",\n    alt: \"Business card image\"\n  },\n  address: {\n    state: \"\",\n    country: \"country\",\n    city: \"tel-aviv\",\n    street: \"Shinkin\",\n    houseNumber: 3,\n    zip: 1234\n  },\n  bizNumber: 1000000,\n  user_id: \"63765801e20ed868a69a62c4\"\n};",
                    "ar": "const card = {\n  _id: \"63765801e20ed868a69a62c4\",\n  title: \"first\",\n  subtitle: \"subtitle\",\n  description: \"testing 123\",\n  phone: \"050-0000000\",\n  email: \"test@gmail.com\",\n  web: \"https://www.test.co.il\",\n  image: {\n    url: \"assets/images/business-card-top-image.jpg\",\n    alt: \"Business card image\"\n  },\n  address: {\n    state: \"\",\n    country: \"country\",\n    city: \"tel-aviv\",\n    street: \"Shinkin\",\n    houseNumber: 3,\n    zip: 1234\n  },\n  bizNumber: 1000000,\n  user_id: \"63765801e20ed868a69a62c4\"\n};"
                },
                "instructions": [
                    {
                        "he": "יצירת קומפוננט CardHead שמקבל url ו-alt כ-props",
                        "ar": "إنشاء مكون CardHead يستقبل url و alt كـ props"
                    },
                    {
                        "he": "יצירת קומפוננט CardBody עם כותרת ראשית ומשנית, divider, ושלוש שורות טקסט",
                        "ar": "إنشاء مكون CardBody مع عنوان رئيسي وثانوي، فاصل، وثلاثة أسطر نص"
                    },
                    {
                        "he": "יצירת קומפוננט CardActionBar עם אייקון לב",
                        "ar": "إنشاء مكون CardActionBar مع أيقونة قلب"
                    },
                    {
                        "he": "העברת הנתונים הנדרשים לקומפוננטים באמצעות props",
                        "ar": "تمرير البيانات المطلوبة للمكونات باستخدام props"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 161,
                "title": {
                    "he": "Map Loop",
                    "ar": "حلقة Map"
                },
                "type": "map-loop",
                "icon": "🔄",
                "content": {
                    "he": "React בחרה להשתמש במטודת map בשביל לבצע לולאות על מערכים באזור המיועד ל-HTML",
                    "ar": "React اختارت استخدام طريقة map لأداء الحلقات على المصفوفات في المنطقة المخصصة لـ HTML"
                },
                "code": {
                    "he": "const Loops = () => {\n  const arrayOfString = [\"one\", \"two\", \"three\"];\n  return (\n    <Box m={2}>\n      {arrayOfString.map((item, index, array) => {\n        console.log(array);\n        return <div key={index}>item: {item}</div>;\n      })}\n    </Box>\n  );\n};\n\nexport default Loops;",
                    "ar": "const Loops = () => {\n  const arrayOfString = [\"one\", \"two\", \"three\"];\n  return (\n    <Box m={2}>\n      {arrayOfString.map((item, index, array) => {\n        console.log(array);\n        return <div key={index}>item: {item}</div>;\n      })}\n    </Box>\n  );\n};\n\nexport default Loops;"
                },
                "explanation": [
                    {
                        "he": "יצרנו קבוע בשם arrayOfString והשווינו את ערכו למערך של מחרוזות תווים",
                        "ar": "أنشأنا ثابت باسم arrayOfString وقارنا قيمته بمصفوفة من سلاسل الأحرف"
                    },
                    {
                        "he": "בחלק המיועד ל-HTML אנחנו מבצעים לולאה על הקבוע arrayOfString באמצעות מטודת map שמקבלת עד שלושה פרמטרים:",
                        "ar": "في الجزء المخصص لـ HTML نقوم بأداء حلقة على الثابت arrayOfString باستخدام طريقة map التي تستقبل حتى ثلاثة معاملات:"
                    },
                    {
                        "he": "Item – האיבר במערך, Index - מספר האינדקס של האיבר במערך, array - המערך שעליו נערכת האיטרציה",
                        "ar": "Item - العنصر في المصفوفة، Index - رقم الفهرس للعنصر في المصفوفة، array - المصفوفة التي يتم التكرار عليها"
                    },
                    {
                        "he": "כל אלמנט שאנו מכפילים באיטרציה צריך לקבל את המאפיין key שצריך להיות ייחודי",
                        "ar": "كل عنصر نضاعفه في التكرار يجب أن يحصل على الخاصية key التي يجب أن تكون فريدة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
            },
            {
                "id": 162,
                "title": {
                    "he": "משימת Map - Business Cards App",
                    "ar": "مهمة Map - تطبيق بطاقات العمل"
                },
                "type": "map-task-business-cards",
                "icon": "📋",
                "content": {
                    "he": "צור את הנתיב הבא: src/cards/components/Cards.jsx",
                    "ar": "أنشئ المسار التالي: src/cards/components/Cards.jsx"
                },
                "instructions": [
                    {
                        "he": "צור מערך עם שלושה אובייקטים שמייצגים כרטיסים (המפתחות האובייקטים הללו צריכים להיות תואמים למפתחות של אובייקט הכרטיס מהתרגיל הקודם)",
                        "ar": "أنشئ مصفوفة مع ثلاثة كائنات تمثل البطاقات (مفاتيح هذه الكائنات يجب أن تتطابق مع مفاتيح كائن البطاقة من التمرين السابق)"
                    },
                    {
                        "he": "השתמש במטודת map כך שעל כל איבר במערך תציג לגולש כרטיס בעזרת הקומפוננט Card.jsx",
                        "ar": "استخدم طريقة map بحيث لكل عنصر في المصفوفة تعرض للمستخدم بطاقة باستخدام المكون Card.jsx"
                    },
                    {
                        "he": "בדוק בדפדפן כי אכן הכרטיסים מוצגים לגולש",
                        "ar": "تحقق في المتصفح أن البطاقات معروضة فعلاً للمستخدم"
                    },
                    {
                        "he": "על הקומפוננט Card לקבל באובייקט ה-props כרטיס card במקום הקבוע card שיצרנו בתרגיל הקודם",
                        "ar": "يجب أن يستقبل المكون Card في كائن props بطاقة card بدلاً من الثابت card الذي أنشأناه في التمرين السابق"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 163,
                "title": {
                    "he": "Conditional Rendering",
                    "ar": "العرض الشرطي"
                },
                "type": "conditional-rendering",
                "icon": "🔀",
                "content": {
                    "he": "תצוגות מידע שונות כאשר יש מידע להצגה וכאשר אין",
                    "ar": "عروض معلومات مختلفة عندما توجد معلومات للعرض وعندما لا توجد"
                },
                "note": {
                    "he": "יש לעבור על החלק של Layout במצגת של MUI בטרם ממשיכים במצגת הזאת!",
                    "ar": "يجب المرور على قسم Layout في عرض MUI قبل المتابعة في هذا العرض!"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 164,
                "title": {
                    "he": "Conditional Rendering Example",
                    "ar": "مثال على العرض الشرطي"
                },
                "type": "conditional-rendering-example",
                "icon": "💻",
                "code": {
                    "he": "const Cards = () => {\n  const cards = []; // מערך ריק\n  \n  if (!cards.length) {\n    return (\n      <Typography m={2}>\n        Oops... it seems there are no business cards to display\n      </Typography>\n    );\n  }\n  \n  return (\n    <Container>\n      <Stack gap={2} direction=\"row\" my={2} flexWrap=\"wrap\" justifyContent=\"center\">\n        {cards.map((card, i) => (\n          <CardComponent key={i} card={card} />\n        ))}\n      </Stack>\n    </Container>\n  );\n};\n\nexport default Cards;",
                    "ar": "const Cards = () => {\n  const cards = []; // مصفوفة فارغة\n  \n  if (!cards.length) {\n    return (\n      <Typography m={2}>\n        Oops... it seems there are no business cards to display\n      </Typography>\n    );\n  }\n  \n  return (\n    <Container>\n      <Stack gap={2} direction=\"row\" my={2} flexWrap=\"wrap\" justifyContent=\"center\">\n        {cards.map((card, i) => (\n          <CardComponent key={i} card={card} />\n        ))}\n      </Stack>\n    </Container>\n  );\n};\n\nexport default Cards;"
                },
                "explanation": [
                    {
                        "he": "נשים לרגע את הקבוע cards שיצרנו בתוך הערה",
                        "ar": "نضع للحظة الثابت cards الذي أنشأناه داخل تعليق"
                    },
                    {
                        "he": "ניצור קבוע שני עם אותו השם אך הפעם נשווה את ערכו למערך ריק (מצב זה מדמה כאשר יש שורת חיפוש והמשתמש חיפש משהו שלא נמצא)",
                        "ar": "سننشئ ثابت ثاني بنفس الاسم ولكن هذه المرة سنقارن قيمته بمصفوفة فارغة (هذا الوضع يحاكي عندما توجد شريط بحث والمسخدم بحث عن شيء لم يوجد)"
                    },
                    {
                        "he": "נתנה שאם אין אורך למערך cards הקומפוננט יעצור ויחזיר תצוגה לגולש שתכלול אזור טקסט עם מחרוזת תווים",
                        "ar": "نعطي أنه إذا لم يكن هناك طول لمصفوفة cards المكون سيتوقف ويعيد عرض للمستخدم يتضمن منطقة نص مع سلسلة أحرف"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 165,
                "title": {
                    "he": "Events",
                    "ar": "الأحداث"
                },
                "type": "events",
                "icon": "⚡",
                "content": {
                    "he": "הדרך להאזין לאירועים ולהפעיל מטודות בעקבותיהם",
                    "ar": "طريقة الاستماع للأحداث وتفعيل الطرق نتيجة لها"
                },
                "backgroundColor": "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)"
            },
            {
                "id": 166,
                "title": {
                    "he": "Function invocation with parameters",
                    "ar": "استدعاء دالة مع معاملات"
                },
                "type": "function-with-parameters",
                "icon": "🧪",
                "content": {
                    "he": "הפעלת פונקציה עם פרמטרים",
                    "ar": "تفعيل دالة مع معاملات"
                },
                "backgroundColor": "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)"
            },
            {
                "id": 167,
                "title": {
                    "he": "Function with parameters example",
                    "ar": "مثال على دالة مع معاملات"
                },
                "type": "function-with-parameters-example",
                "icon": "💻",
                "code": {
                    "he": "const OnClick = () => {\n  const handleClick = text => console.log(text);\n  \n  return (\n    <Button onClick={() => handleClick(\"text from button!\")}>\n      Click\n    </Button>\n  );\n};\n\nexport default OnClick;",
                    "ar": "const OnClick = () => {\n  const handleClick = text => console.log(text);\n  \n  return (\n    <Button onClick={() => handleClick(\"text from button!\")}>\n      Click\n    </Button>\n  );\n};\n\nexport default OnClick;"
                },
                "explanation": [
                    {
                        "he": "handleClick הוא פונקציה אנונימית שמקבלת פרמטר text ומדפיסה אותו לקונסול",
                        "ar": "handleClick هي دالة مجهولة تستقبل معامل text وتطبعه في الكونسول"
                    },
                    {
                        "he": "פונקציית callback אנונימית מועברת ל-onClick, שכאשר מופעלת, קוראת ל-handleClick עם הערך הרצוי להדפסה",
                        "ar": "دالة callback مجهولة يتم تمريرها إلى onClick، التي عند تفعيلها، تستدعي handleClick بالقيمة المطلوبة للطباعة"
                    },
                    {
                        "he": "לחיצה על הכפתור תדפיס את המחרוזת מהפונקציה handleClick לקונסול",
                        "ar": "النقر على الزر سيطبع السلسلة من الدالة handleClick في الكونسול"
                    }
                ],
                "warning": {
                    "he": "אם קריאה למטודת handleClick עם פרמטרים מועברת ישירות לאירוע (ללא פונקציית wrapper אנונימית), היא תתבצע כאשר הקומפוננט נוצר, לא כאשר האירוע מתרחש!",
                    "ar": "إذا كان استدعاء طريقة handleClick مع معاملات يتم تمريرها مباشرة للحدث (بدون دالة wrapper مجهولة)، ستتم عند إنشاء المكون، وليس عند حدوث الحدث!"
                },
                "backgroundColor": "linear-gradient(135deg, #d299c2 0%, #fef9d7 100%)"
            },
            {
                "id": 168,
                "title": {
                    "he": "Catching event",
                    "ar": "التقاط الحدث"
                },
                "type": "catching-event",
                "icon": "🎯",
                "content": {
                    "he": "כיצד לתפוס את אובייקט האירוע ולקבל מידע עליו",
                    "ar": "كيفية التقاط كائن الحدث والحصول على معلومات عنه"
                },
                "backgroundColor": "linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%)"
            },
            {
                "id": 169,
                "title": {
                    "he": "Parent method activation",
                    "ar": "تفعيل طريقة الأب"
                },
                "type": "parent-method-activation",
                "icon": "👨‍👶",
                "content": {
                    "he": "כיצד להפעיל מתודה של קומפוננט אב מקומפוננט בן",
                    "ar": "كيفية تفعيل طريقة المكون الأب من المكون الابن"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 170,
                "title": {
                    "he": "Events Task",
                    "ar": "مهمة الأحداث"
                },
                "type": "events-task",
                "icon": "📝",
                "content": {
                    "he": "משימה מעשית לעבודה עם אירועים ב-React",
                    "ar": "مهمة عملية للعمل مع الأحداث في React"
                },
                "tasks": [
                    {
                        "he": "יצירת כפתור שמדפיס הודעה לקונסול",
                        "ar": "إنشاء زر يطبع رسالة في الكونسول"
                    },
                    {
                        "he": "יצירת כפתור שמקבל פרמטר ומדפיס אותו",
                        "ar": "إنشاء زر يستقبل معامل ويطبعه"
                    },
                    {
                        "he": "יצירת כפתור שמפעיל מתודה של קומפוננט אב",
                        "ar": "إنشاء زر يفعل طريقة المكون الأب"
                    },
                    {
                        "he": "יצירת טופס עם validation ואירועי submit",
                        "ar": "إنشاء نموذج مع التحقق من الصحة وأحداث الإرسال"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 171,
                "title": {
                    "he": "Catching Event Example",
                    "ar": "مثال على التقاط الحدث"
                },
                "type": "catching-event-example",
                "icon": "💻",
                "code": {
                    "he": "const OnClick = () => {\n  const handleClick = e => console.log(e.target);\n  \n  return (\n    <Button onClick={handleClick} variant=\"outlined\" sx={{ m: 2}}>\n      Click\n    </Button>\n  );\n};\n\nexport default OnClick;",
                    "ar": "const OnClick = () => {\n  const handleClick = e => console.log(e.target);\n  \n  return (\n    <Button onClick={handleClick} variant=\"outlined\" sx={{ m: 2}}>\n      Click\n    </Button>\n  );\n};\n\nexport default OnClick;"
                },
                "explanation": [
                    {
                        "he": "הפעם אני כביכול לא מעביר לפונקציה handleClick פרמטר אלא מעביר אותה כפונקציית javascript callback",
                        "ar": "هذه المرة لا أرسل للمدالة handleClick معامل بل أرسلها كدالة javascript callback"
                    },
                    {
                        "he": "אולם בכל זאת תעביר לפונקציה את האירוע ואוכל להדפיסו בקונסול",
                        "ar": "ولكن مع ذلك سترسل للدالة الحدث وسأتمكن من طباعته في الكونسول"
                    },
                    {
                        "he": "כשנלחץ על הכפתור יודפס בקונסול האובייקט שהאזין לאירוע והפעיל את handleClick הפונקציה",
                        "ar": "عند النقر على الزر سيتم طباعة الكائن الذي استمع للحدث وفعل دالة handleClick في الكونسول"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%)"
            },
            {
                "id": 172,
                "title": {
                    "he": "Parent Method Activation Example",
                    "ar": "مثال على تفعيل طريقة الأب"
                },
                "type": "parent-method-activation-example",
                "icon": "💻",
                "code": {
                    "he": "const FatherComp = () => {\n  const handleClick = () => console.log(\"you clicked!\");\n  \n  return (\n    <Box \n      sx={{\n        m: 2,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        width: 300,\n        height: 300,\n        backgroundColor: \"secondary.dark\"\n      }}\n    >\n      <ChildComp handleClick={handleClick} />\n    </Box>\n  );\n};\n\nconst ChildComp = ({ handleClick }) => {\n  return (\n    <Button onClick={handleClick} variant=\"contained\">\n      click me!\n    </Button>\n  );\n};",
                    "ar": "const FatherComp = () => {\n  const handleClick = () => console.log(\"you clicked!\");\n  \n  return (\n    <Box \n      sx={{\n        m: 2,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        width: 300,\n        height: 300,\n        backgroundColor: \"secondary.dark\"\n      }}\n    >\n      <ChildComp handleClick={handleClick} />\n    </Box>\n  );\n};\n\nconst ChildComp = ({ handleClick }) => {\n  return (\n    <Button onClick={handleClick} variant=\"contained\">\n      click me!\n    </Button>\n  );\n};"
                },
                "explanation": [
                    {
                        "he": "בקומפוננט האב: אני יוצר קבוע בשם handleClick ששווה ערך לפונקציה אנונימית שמדפיסה בקונסול מחרוזת תווים",
                        "ar": "في المكون الأب: أنشئ ثابت باسم handleClick يساوي دالة مجهولة تطبع في الكونسول سلسلة أحرف"
                    },
                    {
                        "he": "אני עושה השמה למפתח בשם handleClick באובייקט הפרופס ומשווה את הערך שלו למטודת handleClick שיצרתי לעיל",
                        "ar": "أقوم بتعيين مفتاح باسم handleClick في كائن props وأقارن قيمته بطريقة handleClick التي أنشأتها أعلاه"
                    },
                    {
                        "he": "בקומפוננט הבן: אני מחלץ את המפתח handleClick מאובייקט הפרופס",
                        "ar": "في المكون الابن: أستخرج المفتاح handleClick من كائن props"
                    },
                    {
                        "he": "אני מאזין לאירוע onClick שתפעיל את handleClick מטות",
                        "ar": "أستمع للحدث onClick الذي سيفعل طريقة handleClick"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 173,
                "title": {
                    "he": "Business Cards App - Events Task",
                    "ar": "مهمة تطبيق بطاقات العمل - الأحداث"
                },
                "type": "business-cards-events-task",
                "icon": "📋",
                "content": {
                    "he": "משימת Events - Business Cards App",
                    "ar": "مهمة الأحداث - تطبيق بطاقات العمل"
                },
                "instructions": [
                    {
                        "he": "צור בקומפוננט Cards.jsx קבוע בשם handleCardDelete שיהיה שווה ערך לפונקציה אנונימית שתקבל בפרמטר `_id` מסוג מספר ותדפיס בקונסול את מחרוזת התווים \"you deleted card no. \" והוסף את המספר שמופיע במפתח `_id`",
                        "ar": "أنشئ في مكون Cards.jsx ثابت باسم handleCardDelete سيكون مساوياً لدالة مجهولة تستقبل معامل `_id` من نوع رقم وتطبع في الكونسول السلسلة \"you deleted card no. \" وأضف الرقم الموجود في المفتاح `_id`"
                    },
                    {
                        "he": "העבר באובייקט הפרופס את מטודות onLike onDelete מקומפוננט האב Cards.jsx דרך קומפוננט הבן Cards.jsx ועד לקומפוננט שמתעסקת עם Action Buttons",
                        "ar": "مرر في كائن props الطرق onLike onDelete من المكون الأب Cards.jsx عبر المكون الابن Cards.jsx حتى المكون الذي يتعامل مع Action Buttons"
                    },
                    {
                        "he": "בלחיצה על אייקון הלב הדפס את מחרוזת התווים \"you liked card no: \" והוסף את הערך שמופיע במפתח `_id`",
                        "ar": "عند النقر على أيقونة القلب اطبع السلسلة \"you liked card no: \" وأضف القيمة الموجودة في المفتاح `_id`"
                    },
                    {
                        "he": "בלחיצה על אייקון פח האשפה הדפס את מחרוזת התווים \"you deleted card no: \" והוסף את הערך שמופיע במפתח `_id`",
                        "ar": "عند النقر على أيقونة سلة المهملات اطبع السلسلة \"you deleted card no: \" وأضف القيمة الموجودة في المفتاح `_id`"
                    },
                    {
                        "he": "בלחיצה על אייקון עריכת הכרטיס הדפס את מחרוזת התווים \"you edit card no. \" והוסף את הערך שמופיע במפתח `_id`",
                        "ar": "عند النقر على أيقونة تعديل البطاقة اطبع السلسلة \"you edit card no. \" وأضف القيمة الموجودة في المفتاح `_id`"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 174,
                "title": {
                    "he": "PropTypes",
                    "ar": "PropTypes"
                },
                "type": "proptypes",
                "icon": "🔍",
                "content": {
                    "he": "Strong Typing in React",
                    "ar": "الكتابة القوية في React"
                },
                "note": {
                    "he": "Runtime type checking for React props and similar objects",
                    "ar": "فحص نوع البيانات في وقت التشغيل لـ React props والكائنات المشابهة"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 175,
                "title": {
                    "he": "PropTypes Installation",
                    "ar": "تثبيت PropTypes"
                },
                "type": "proptypes-installation",
                "icon": "⚙️",
                "content": {
                    "he": "התקנת PropTypes",
                    "ar": "تثبيت PropTypes"
                },
                "command": {
                    "he": "npm i prop-types",
                    "ar": "npm i prop-types"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 176,
                "title": {
                    "he": "PropTypes Error",
                    "ar": "خطأ PropTypes"
                },
                "type": "proptypes-error",
                "icon": "⚠️",
                "content": {
                    "he": "על מנת ליצור שגיאה של PropTypes",
                    "ar": "لإنشاء خطأ في PropTypes"
                },
                "code": {
                    "he": "// FatherPropTypes.jsx\nconst FatherPropTypes = () => {\n  return <PropTypeComponent />;\n};\n\nexport default FatherPropTypes;\n\n// PropTypeComponent.jsx\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst PropTypeComponent = ({ string }) => {\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  string: PropTypes.string.isRequired,\n};\n\nexport default PropTypeComponent;",
                    "ar": "// FatherPropTypes.jsx\nconst FatherPropTypes = () => {\n  return <PropTypeComponent />;\n};\n\nexport default FatherPropTypes;\n\n// PropTypeComponent.jsx\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst PropTypeComponent = ({ string }) => {\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  string: PropTypes.string.isRequired,\n};\n\nexport default PropTypeComponent;"
                },
                "explanation": [
                    {
                        "he": "בקומפוננט האב: נציב את קומפוננט הבן בתוך קומפוננט האב אך לא נעביר לה את המפתחות שהיא זקוקה להם באובייקט הפרופס",
                        "ar": "في المكون الأب: سنضع المكون الابن داخل المكون الأب ولكن لن نمرر له المفاتيح التي يحتاجها في كائن props"
                    },
                    {
                        "he": "בקומפוננט הבן: ניצור מופע של מחלקת PropTypes מתוך הספרייה שייבאנו \"prop-types\"",
                        "ar": "في المكون الابن: سننشئ مثيل من فئة PropTypes من المكتبة التي استوردناها \"prop-types\""
                    },
                    {
                        "he": "ניצור קומפוננט בשם PropTypeComponent שצריכה לקבל באובייקט הפרופס מפתח בשם string",
                        "ar": "سننشئ مكون باسم PropTypeComponent يحتاج لاستقبال مفتاح باسم string في كائن props"
                    },
                    {
                        "he": "אני עושה השמה למפתח propTypes בתוך לקומפוננט PropTypeComponent שיצרנו ומשווה את הערך שלו לאובייקט שיבדוק בעזרת המופע של מחלקת PropTypes את סוג הערכים של המפתח",
                        "ar": "أقوم بتعيين مفتاح propTypes داخل المكون PropTypeComponent الذي أنشأناه وأقارن قيمته بكائن سيفحص باستخدام مثيل فئة PropTypes نوع قيم المفتاح"
                    }
                ],
                "note": {
                    "he": "בגלל שפונקציה מאחורי הקלעים היא אובייקט אני יכול לעשות השמה למפתחות שלה!",
                    "ar": "لأن الدالة خلف الكواليس هي كائن يمكنني تعيين مفاتيح لها!"
                },
                "backgroundColor": "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
            },
            {
                "id": 177,
                "title": {
                    "he": "PropTypes Error Result",
                    "ar": "نتيجة خطأ PropTypes"
                },
                "type": "proptypes-error-result",
                "icon": "💻",
                "content": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "warning": {
                    "he": "Failed prop type: The prop 'string' is marked as required in 'PropTypeComponent', but its value is 'undefined'.",
                    "ar": "فشل نوع الخاصية: الخاصية 'string' محددة كمطلوبة في 'PropTypeComponent'، لكن قيمتها 'undefined'."
                },
                "explanation": [
                    {
                        "he": "בגלל שלא העברתי מקומפוננט האב לקומפוננט הבן את המפתח שעשיתי עליו בדיקה באמצעות propTypes נזרקת לי על כך שגיאה",
                        "ar": "لأنني لم أرسل من المكون الأب للمكون الابن المفتاح الذي قمت بفحصه باستخدام propTypes يتم رمي خطأ لي بذلك"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
            },
            {
                "id": 178,
                "title": {
                    "he": "Main Types",
                    "ar": "الأنواع الرئيسية"
                },
                "type": "main-types",
                "icon": "💎",
                "content": {
                    "he": "סוגי הערכים המרכזיים",
                    "ar": "أنواع القيم الرئيسية"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 179,
                "title": {
                    "he": "Main Types Example",
                    "ar": "مثال على الأنواع الرئيسية"
                },
                "type": "main-types-example",
                "icon": "💻",
                "code": {
                    "he": "const FatherPropTypes = () => {\n  const obj = { key: \"value\" };\n  \n  return (\n    <>\n      <PropTypeComponent \n        string=\"string\"\n        number={2}\n        boolean={true}\n        object={obj}\n        array={[]}\n        cb={console.log}\n      />\n    </>\n  );\n};\n\nconst PropTypeComponent = props => {\n  const { string, number, boolean, object, array, cb } = props;\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  string: PropTypes.string,\n  number: PropTypes.number,\n  boolean: PropTypes.bool,\n  object: PropTypes.object,\n  array: PropTypes.array,\n  cb: PropTypes.func,\n};",
                    "ar": "const FatherPropTypes = () => {\n  const obj = { key: \"value\" };\n  \n  return (\n    <>\n      <PropTypeComponent \n        string=\"string\"\n        number={2}\n        boolean={true}\n        object={obj}\n        array={[]}\n        cb={console.log}\n      />\n    </>\n  );\n};\n\nconst PropTypeComponent = props => {\n  const { string, number, boolean, object, array, cb } = props;\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  string: PropTypes.string,\n  number: PropTypes.number,\n  boolean: PropTypes.bool,\n  object: PropTypes.object,\n  array: PropTypes.array,\n  cb: PropTypes.func,\n};"
                },
                "explanation": [
                    {
                        "he": "בקומפוננט האב: נציב את קומפוננט הבן בתוך קומפוננט האב ונעביר לה את המפתחות שהיא זקוקה להם באובייקט הפרופס",
                        "ar": "في المكون الأب: سنضع المكون الابن داخل المكون الأב ونمرر له المفاتيح التي يحتاجها في كائن props"
                    },
                    {
                        "he": "הקומפוננט PropTypeComponent מקבלת בפרמטר את האובייקט props",
                        "ar": "المكون PropTypeComponent يستقبل كائن props كمعامل"
                    },
                    {
                        "he": "נחלץ את הערכים מתוך האובייקט props",
                        "ar": "سنستخرج القيم من كائن props"
                    },
                    {
                        "he": "נעשה השמה למפתח propTypes בתוך הקומפוננט PropTypeComponent שיצרנו ומשווה את הערך שלו לאובייקט שיבדוק את המפתחות שאני מעוניין שיהיו באובייקט props ואת הערכים שלהם",
                        "ar": "سنقوم بتعيين مفتاح propTypes داخل المكون PropTypeComponent الذي أنشأناه ونقارن قيمته بكائن سيفحص المفاتيح التي أريد أن تكون في كائن props وقيمها"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 180,
                "title": {
                    "he": "ArrayOf & ObjectOf Types",
                    "ar": "أنواع ArrayOf و ObjectOf"
                },
                "type": "arrayof-objectof-types",
                "icon": "🔗",
                "content": {
                    "he": "הדרך לפרט מה יכללו אובייקטים ומערכים",
                    "ar": "طريقة تحديد ما ستحتويه الكائنات والمصفوفات"
                },
                "note": {
                    "he": "PropTypes באמצעות",
                    "ar": "باستخدام PropTypes"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 181,
                "title": {
                    "he": "ArrayOf & ObjectOf Example",
                    "ar": "مثال على ArrayOf و ObjectOf"
                },
                "type": "arrayof-objectof-example",
                "icon": "💻",
                "code": {
                    "he": "const FatherPropTypes = () => {\n  const obj = { key: \"value\" };\n  const array = [1, 2, 3];\n  const arrayOfObjects = [{ key: false }];\n  \n  return (\n    <PropTypeComponent \n      object={obj}\n      array={array}\n      arrayOfObject={arrayOfObjects}\n    />\n  );\n};\n\nconst PropTypeComponent = props => {\n  const { object, array, arrayOfObject } = props;\n  console.table(props);\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  object: PropTypes.objectOf(PropTypes.string),\n  array: PropTypes.arrayOf(PropTypes.number),\n  arrayOfObject: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.bool)),\n};",
                    "ar": "const FatherPropTypes = () => {\n  const obj = { key: \"value\" };\n  const array = [1, 2, 3];\n  const arrayOfObjects = [{ key: false }];\n  \n  return (\n    <PropTypeComponent \n      object={obj}\n      array={array}\n      arrayOfObject={arrayOfObjects}\n    />\n  );\n};\n\nconst PropTypeComponent = props => {\n  const { object, array, arrayOfObject } = props;\n  console.table(props);\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  object: PropTypes.objectOf(PropTypes.string),\n  array: PropTypes.arrayOf(PropTypes.number),\n  arrayOfObject: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.bool)),\n};"
                },
                "explanation": [
                    {
                        "he": "בקומפוננט האב: נציב את קומפוננט הבן בתוך קומפוננט האב ונעביר לה את המפתחות שהיא זקוקה להם באובייקט הפרופס",
                        "ar": "في المكون الأب: سنضع المكون الابن داخل المكون الأب ونمرر له المفاتيح التي يحتاجها في كائن props"
                    },
                    {
                        "he": "הקומפוננט PropTypeComponent מקבלת בפרמטר את האובייקט props",
                        "ar": "المكون PropTypeComponent يستقبل كائن props كمعامل"
                    },
                    {
                        "he": "נחלץ את הערכים מתוך האובייקט props",
                        "ar": "سنستخرج القيم من كائن props"
                    },
                    {
                        "he": "נעשה השמה למפתח propTypes בתוך PropTypeComponent לקומפוננט שיצרנו ונשווה את הערך שלו לאובייקט שיבדוק את המפתחות שאני מעוניין שיהיו באובייקט props ואת הערכים שלהם",
                        "ar": "سنقوم بتعيين مفتاح propTypes داخل PropTypeComponent للمكون الذي أنشأناه ونقارن قيمته بكائن سيفحص المفاتيح التي أريد أن تكون في كائن props وقيمها"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 182,
                "title": {
                    "he": "oneOfType vs oneOf",
                    "ar": "oneOfType مقابل oneOf"
                },
                "type": "oneoftype-vs-oneof",
                "icon": "⚖️",
                "content": {
                    "he": "יש ביכולתנו לקבוע מספר סוגי ערכים או לקבוע את הערכים באופן ליטרלי",
                    "ar": "يمكننا تحديد عدد من أنواع القيم أو تحديد القيم حرفياً"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 183,
                "title": {
                    "he": "oneOfType vs oneOf Example",
                    "ar": "مثال على oneOfType مقابل oneOf"
                },
                "type": "oneoftype-vs-oneof-example",
                "icon": "💻",
                "code": {
                    "he": "const FatherPropTypes = () => {\n  return (\n    <>\n      <PropTypeComponent one=\"string\" />\n      <PropTypeComponent one={2} />\n      <PropTypeComponent two=\"a\" />\n      <PropTypeComponent two=\"c\" />\n    </>\n  );\n};\n\nconst PropTypeComponent = props => {\n  console.table(props);\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  one: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  two: PropTypes.oneOf([\"a\", \"b\"]),\n};",
                    "ar": "const FatherPropTypes = () => {\n  return (\n    <>\n      <PropTypeComponent one=\"string\" />\n      <PropTypeComponent one={2} />\n      <PropTypeComponent two=\"a\" />\n      <PropTypeComponent two=\"c\" />\n    </>\n  );\n};\n\nconst PropTypeComponent = props => {\n  console.table(props);\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  one: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  two: PropTypes.oneOf([\"a\", \"b\"]),\n};"
                },
                "explanation": [
                    {
                        "he": "בקומפוננט האב: נציב את קומפוננט הבן בתוך קומפוננט האב ונעביר לה את המפתחות שהיא זקוקה להם באובייקט הפרופס",
                        "ar": "في المكون الأب: سنضع المكون الابن داخل المكون الأب ونمرر له المفاتيح التي يحتاجها في كائن props"
                    },
                    {
                        "he": "הקומפוננט PropTypeComponent מקבלת בפרמטר את האובייקט props",
                        "ar": "المكون PropTypeComponent يستقبل كائن props كمعامل"
                    },
                    {
                        "he": "נחלץ את הערכים מתוך האובייקט props",
                        "ar": "سنستخرج القيم من كائن props"
                    },
                    {
                        "he": "נעשה השמה למפתח propTypes בתוך הקומפוננט PropTypeComponent שיצרנו ומשווה את הערך שלו לאובייקט שיבדוק את המפתחות שאני מעוניין שיהיו באובייקט props ואת הערכים שלהם",
                        "ar": "سنقوم بتعيين مفتاح propTypes داخل المكون PropTypeComponent الذي أنشأناه ونقارن قيمته بكائن سيفحص المفاتيح التي أريد أن تكون في كائن props وقيمها"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 184,
                "title": {
                    "he": "oneOf Error Result",
                    "ar": "نتيجة خطأ oneOf"
                },
                "type": "oneof-error-result",
                "icon": "⚠️",
                "content": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "warning": {
                    "he": "Failed prop type: Invalid prop `two` of value `c` supplied to `PropTypeComponent`, expected one of [`a`, `b`].",
                    "ar": "فشل نوع الخاصية: خاصية غير صحيحة `two` بقيمة `c` مررت إلى `PropTypeComponent`، متوقع واحد من [`a`, `b`]."
                },
                "explanation": [
                    {
                        "he": "אנו מקבלים שגיאה בגלל שניסינו להעביר במפתח two באובייקט הפרופס מחרוזת תווים שאינה אחת ממחרוזות התווים שהגדרנו",
                        "ar": "نحصل على خطأ لأننا حاولنا تمرير سلسلة أحرف في المفتاح two في كائن props ليست واحدة من سلاسل الأحرف التي حددناها"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
            },
            {
                "id": 185,
                "title": {
                    "he": "Exact & isRequired",
                    "ar": "Exact و isRequired"
                },
                "type": "exact-isrequired",
                "icon": "🎯",
                "content": {
                    "he": "יש ביכולתנו לבדוק אם באובייקט הפרופס יש בדיוק את הערכים שאנו מבקשים או לחליפין לחייב העברת מפתח ספציפי",
                    "ar": "يمكننا التحقق مما إذا كان كائن props يحتوي بالضبط على القيم التي نطلبها أو بدلاً من ذلك إجبار تمرير مفتاح محدد"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 186,
                "title": {
                    "he": "Exact Example",
                    "ar": "مثال على Exact"
                },
                "type": "exact-example",
                "icon": "💻",
                "code": {
                    "he": "const FatherPropTypes = () => {\n  const obj = { key: \"hallo\", second: 5, third: true };\n  return <PropTypeComponent obj={obj} />;\n};\n\nconst PropTypeComponent = props => {\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  obj: PropTypes.exact({\n    key: PropTypes.string,\n    second: PropTypes.number,\n  }),\n};",
                    "ar": "const FatherPropTypes = () => {\n  const obj = { key: \"hallo\", second: 5, third: true };\n  return <PropTypeComponent obj={obj} />;\n};\n\nconst PropTypeComponent = props => {\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  obj: PropTypes.exact({\n    key: PropTypes.string,\n    second: PropTypes.number,\n  }),\n};"
                },
                "explanation": [
                    {
                        "he": "בקומפוננט האב: נעביר לה את המפתחות שהיא זקוקה להם באובייקט הפרופס אולם נשים מפתח אחד יותר מידי בתוך האובייקט שאנו מעבירים",
                        "ar": "في المكون الأب: سنمرر له المفاتيح التي يحتاجها في كائن props ولكن سنضع مفتاح واحد أكثر من اللازم داخل الكائن الذي نمرره"
                    },
                    {
                        "he": "בקומפוננט הבן: אנו קובעים כי יש לקבל מפתח בשם obj באובייקט הפרופס והוא חייב להיות עם המפתחות והערכים הבאים",
                        "ar": "في المكون الابن: نحدد أنه يجب استقبال مفتاح باسم obj في كائن props ويجب أن يكون مع المفاتيح والقيم التالية"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 187,
                "title": {
                    "he": "Exact Error Result",
                    "ar": "نتيجة خطأ Exact"
                },
                "type": "exact-error-result",
                "icon": "⚠️",
                "content": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "warning": {
                    "he": "Failed prop type: Invalid prop obj key 'third' supplied to 'PropTypeComponent'.",
                    "ar": "فشل نوع الخاصية: مفتاح خاصية غير صحيح obj 'third' مرر إلى 'PropTypeComponent'."
                },
                "explanation": [
                    {
                        "he": "בגלל שהעברנו מפתח שלישי PropTypes זורקת לנו הודעת שגיאה על כך",
                        "ar": "لأننا مررنا مفتاح ثالث PropTypes ترمي لنا رسالة خطأ بذلك"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
            },
            {
                "id": 188,
                "title": {
                    "he": "isRequired Example",
                    "ar": "مثال على isRequired"
                },
                "type": "isrequired-example",
                "icon": "💻",
                "code": {
                    "he": "const FatherPropTypes = () => {\n  return <PropTypeComponent />;\n};\n\nconst PropTypeComponent = props => {\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  two: PropTypes.string.isRequired,\n};",
                    "ar": "const FatherPropTypes = () => {\n  return <PropTypeComponent />;\n};\n\nconst PropTypeComponent = props => {\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  two: PropTypes.string.isRequired,\n};"
                },
                "explanation": [
                    {
                        "he": "בקומפוננט האב: נציב את קומפוננט הבן בתוך קומפוננט האב אך לא נעביר לה את המפתח שהיא זקוקה לו באובייקט הפרופס",
                        "ar": "في المكون الأب: سنضع المكون الابن داخل المكون الأب ولكن لن نمرر له المفتاح الذي يحتاجه في كائن props"
                    },
                    {
                        "he": "בקומפוננט הבן: אני מגדיר את המפתח two כחובה על ידי שימת המפתח isRequired לאחר הגדרת סוג הערך המבוקש למפתח",
                        "ar": "في المكون الابن: أعرّف المفتاح two كمطلوب بوضع المفتاح isRequired بعد تعريف نوع القيمة المطلوبة للمفتاح"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 189,
                "title": {
                    "he": "isRequired Error Result",
                    "ar": "نتيجة خطأ isRequired"
                },
                "type": "isrequired-error-result",
                "icon": "⚠️",
                "content": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "warning": {
                    "he": "Failed prop type: The prop `two` is marked as required in `PropTypeComponent`, but its value is `undefined`.",
                    "ar": "فشل نوع الخاصية: الخاصية `two` محددة كمطلوبة في `PropTypeComponent`، لكن قيمتها `undefined`."
                },
                "explanation": [
                    {
                        "he": "הודעת השגיאה של PropTypes בגלל שלא העברנו את המפתח שהגדרנו כחובה",
                        "ar": "رسالة الخطأ من PropTypes لأننا لم نمرر المفتاح الذي عرّفناه كمطلوب"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
            },
            {
                "id": 190,
                "title": {
                    "he": "Shape, Any & defaultProps",
                    "ar": "Shape و Any و defaultProps"
                },
                "type": "shape-any-defaultprops",
                "icon": "🔧",
                "content": {
                    "he": "יצירת interface של אובייקט",
                    "ar": "إنشاء واجهة للكائن"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 191,
                "title": {
                    "he": "Shape Example",
                    "ar": "مثال على Shape"
                },
                "type": "shape-example",
                "icon": "💻",
                "code": {
                    "he": "import { shape, string } from \"prop-types\";\n\nconst imageType = shape({\n  url: string,\n  alt: string,\n});\n\nconst FatherPropTypes = () => {\n  const image = {\n    url: \"https://cdn.pixabay.com/photo/2022/11/13/18/09/canyon-7589820_960_720.jpg\",\n    alt: \"Rock\",\n  };\n  return <PropTypeComponent image={image} />;\n};\n\nconst PropTypeComponent = props => {\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  image: imageType.isRequired,\n};",
                    "ar": "import { shape, string } from \"prop-types\";\n\nconst imageType = shape({\n  url: string,\n  alt: string,\n});\n\nconst FatherPropTypes = () => {\n  const image = {\n    url: \"https://cdn.pixabay.com/photo/2022/11/13/18/09/canyon-7589820_960_720.jpg\",\n    alt: \"Rock\",\n  };\n  return <PropTypeComponent image={image} />;\n};\n\nconst PropTypeComponent = props => {\n  return <div>PropTypeComponent</div>;\n};\n\nPropTypeComponent.propTypes = {\n  image: imageType.isRequired,\n};"
                },
                "explanation": [
                    {
                        "he": "בקומפוננט האב: ניצור קבוע בשם image שיהיה שווה ערך לאובייקט עם מפתחות וערכים של תמונה",
                        "ar": "في المكون الأب: سننشئ ثابت باسم image سيكون مساوياً لكائن مع مفاتيح وقيم صورة"
                    },
                    {
                        "he": "נעביר את הקבוע שיצרנו למפתח באובייקט הפרופס בשם image",
                        "ar": "سنمرر الثابت الذي أنشأناه للمفتاح في كائن props باسم image"
                    },
                    {
                        "he": "בקומפוננט הבן: נחלץ את המפתחות שאני זקוק להם מאובייקט PropTypes",
                        "ar": "في المكون الابن: سنستخرج المفاتيح التي أحتاجها من كائن PropTypes"
                    },
                    {
                        "he": "ניצור קבוע בשם imageType שיהיה שווה ערך למפתח shape מתוך אובייקט PropTypes שיקבל אובייקט קונפיגורציות עם המפתחות והערכים שאנו מעוניינים שיהיו ב interface של התמונה",
                        "ar": "سننشئ ثابت باسم imageType سيكون مساوياً للمفتاح shape من كائن PropTypes الذي سيستقبل كائن تكوين مع المفاتيح والقيم التي نريد أن تكون في واجهة الصورة"
                    },
                    {
                        "he": "נגדיר שהערך למפתח image יהיה הקבוע שיצרנו imageType",
                        "ar": "سنعرّف أن القيمة للمفتاح image ستكون الثابت الذي أنشأناه imageType"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 192,
                "title": {
                    "he": "Node & Children",
                    "ar": "Node و Children"
                },
                "type": "node-children",
                "icon": "👶",
                "content": {
                    "he": "שימוש ב-PropTypes.node ו-PropTypes.children",
                    "ar": "استخدام PropTypes.node و PropTypes.children"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 193,
                "title": {
                    "he": "Node & Children Example",
                    "ar": "مثال على Node و Children"
                },
                "type": "node-children-example",
                "icon": "💻",
                "code": {
                    "he": "const FatherPropTypes = () => {\n  return <PropTypeComponent node=\"David\">Yakin</PropTypeComponent>;\n};\n\nconst PropTypeComponent = ({ node, children }) => {\n  return `${node} ${children}`;\n};\n\nPropTypeComponent.propTypes = {\n  node: PropTypes.node.isRequired,\n  children: PropTypes.string,\n};",
                    "ar": "const FatherPropTypes = () => {\n  return <PropTypeComponent node=\"David\">Yakin</PropTypeComponent>;\n};\n\nconst PropTypeComponent = ({ node, children }) => {\n  return `${node} ${children}`;\n};\n\nPropTypeComponent.propTypes = {\n  node: PropTypes.node.isRequired,\n  children: PropTypes.string,\n};"
                },
                "explanation": [
                    {
                        "he": "בקומפוננט האב: אעביר למפתח באובייקט הפרופס node מחרוזת תווים",
                        "ar": "في المكون الأب: سأمرر للمفتاح في كائن props node سلسلة أحرف"
                    },
                    {
                        "he": "יש באפשרותנו להציב את הקומפוננט עם תגית פותחת ותגית סוגרת ובתוכה להעביר מחרוזת תווים או אפילו קומפוננטות שלמות",
                        "ar": "يمكننا وضع المكون مع علامة فتح وإغلاق وبداخلها تمرير سلسلة أحرف أو حتى مكونات كاملة"
                    },
                    {
                        "he": "הקומפוננט תחלץ מאובייקט הפרופס את מפתח node ומה שהעברנו בין התגית הפותחת לתגית הסוגרת של קומפוננט יהיה בתוך מפתח שהוא גם מילה שמורה children בשם",
                        "ar": "المكون ساستخرج من كائن props المفتاح node وما مررناه بين علامة الفتح والإغلاق للمكون سيكون داخل مفتاح وهو أيضاً كلمة محجوزة children بالاسم"
                    },
                    {
                        "he": "אני מחזיר מהקומפוננט את שני המפתחות שחילצתי כך שיוצגו לגולש",
                        "ar": "أعيد من المكون المفتاحين اللذين استخرجتهما بحيث يعرضان للمستخدم"
                    },
                    {
                        "he": "בעזרת PropTypes נוודא ש: במפתח node הועבר לנו ערך שניתן להציגו לגולש ושבמפתח children מועברת לנו מחרוזת תווים",
                        "ar": "بمساعدة PropTypes سنتأكد من أن: في المفتاح node تم تمرير قيمة يمكن عرضها للمستخدم وأن في المفتاح children يتم تمرير سلسلة أحرف"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 194,
                "title": {
                    "he": "PropTypes.element",
                    "ar": "PropTypes.element"
                },
                "type": "proptypes-element",
                "icon": "⚛️",
                "content": {
                    "he": "בדיקת אלמנטים של React",
                    "ar": "فحص عناصر React"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 195,
                "title": {
                    "he": "PropTypes.element Example",
                    "ar": "مثال على PropTypes.element"
                },
                "type": "proptypes-element-example",
                "icon": "💻",
                "code": {
                    "he": "const FatherPropTypes = () => {\n  return (\n    <PropTypeComponent node=\"David\">\n      <PropTypeComponent node=\"yakin\" />\n    </PropTypeComponent>\n  );\n};\n\nconst PropTypeComponent = ({ node, children }) => {\n  console.dir(children);\n  return (\n    <>\n      {node} {children}\n    </>\n  );\n};\n\nPropTypeComponent.propTypes = {\n  node: PropTypes.node.isRequired,\n  children: PropTypes.element,\n};",
                    "ar": "const FatherPropTypes = () => {\n  return (\n    <PropTypeComponent node=\"David\">\n      <PropTypeComponent node=\"yakin\" />\n    </PropTypeComponent>\n  );\n};\n\nconst PropTypeComponent = ({ node, children }) => {\n  console.dir(children);\n  return (\n    <>\n      {node} {children}\n    </>\n  );\n};\n\nPropTypeComponent.propTypes = {\n  node: PropTypes.node.isRequired,\n  children: PropTypes.element,\n};"
                },
                "explanation": [
                    {
                        "he": "בקומפוננט האב: ניתן להעביר קומפוננט שלם או אפילו מספר קומפוננטים בין התגית הפותחת לתגית הסוגרת של קומפוננט",
                        "ar": "في المكون الأب: يمكن تمرير مكون كامل أو حتى عدة مكونات بين علامة الفتح والإغلاق للمكون"
                    },
                    {
                        "he": "בקומפוננט הבן: אני מחלץ את המפתחות node children",
                        "ar": "في المكون الابن: أستخرج المفاتيح node children"
                    },
                    {
                        "he": "מדפיס בקונסול את children",
                        "ar": "أطبع في الكونسول children"
                    },
                    {
                        "he": "מחזיר מהקומפוננט לגולש",
                        "ar": "أعيد من المكون للمستخدم"
                    },
                    {
                        "he": "נקבע כי הערך של המפתח children צריך להיות אלמנט של react על ידי שימוש במפתח PropTypes של element",
                        "ar": "نحدد أن قيمة المفتاح children يجب أن تكون عنصر من react باستخدام مفتاح PropTypes من element"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 196,
                "title": {
                    "he": "PropTypes.element Result",
                    "ar": "نتيجة PropTypes.element"
                },
                "type": "proptypes-element-result",
                "icon": "💻",
                "content": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "explanation": [
                    {
                        "he": "ניתן לראות שהאלמנט שהעברתי לקומפוננט ב – children הוא מסוג אובייקט",
                        "ar": "يمكن رؤية أن العنصر الذي مررته للمكون في – children هو من نوع كائن"
                    },
                    {
                        "he": "שיש לו מפתח בשם props שהערך שלו הוא אובייקט עם המפתח node והערך שהעברתי לקומפוננט הבן שבתוך קומפוננט הבן",
                        "ar": "الذي له مفتاح باسم props قيمته كائن مع المفتاح node والقيمة التي مررتها للمكون الابن الذي داخل المكون الابن"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 197,
                "title": {
                    "he": "PropTypes.arrayOf(element)",
                    "ar": "PropTypes.arrayOf(element)"
                },
                "type": "proptypes-arrayof-element",
                "icon": "📋",
                "content": {
                    "he": "בדיקת מערך של אלמנטים",
                    "ar": "فحص مصفوفة من العناصر"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 198,
                "title": {
                    "he": "PropTypes.arrayOf(element) Example",
                    "ar": "مثال على PropTypes.arrayOf(element)"
                },
                "type": "proptypes-arrayof-element-example",
                "icon": "💻",
                "code": {
                    "he": "const FatherPropTypes = () => {\n  return (\n    <PropTypeComponent>\n      <div>first child</div>\n      <p>second child</p>\n    </PropTypeComponent>\n  );\n};\n\nconst PropTypeComponent = ({ children }) => {\n  console.dir(children);\n  return children;\n};\n\nPropTypeComponent.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element),\n};",
                    "ar": "const FatherPropTypes = () => {\n  return (\n    <PropTypeComponent>\n      <div>first child</div>\n      <p>second child</p>\n    </PropTypeComponent>\n  );\n};\n\nconst PropTypeComponent = ({ children }) => {\n  console.dir(children);\n  return children;\n};\n\nPropTypeComponent.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element),\n};"
                },
                "explanation": [
                    {
                        "he": "בקומפוננט האב: הפעם נעביר לקומפוננט הבן במפתח ה- children מספר אלמנטים",
                        "ar": "في المكون الأب: هذه المرة سنمرر للمكون الابن في المفتاح children عدة عناصر"
                    },
                    {
                        "he": "בקומפוננט הבן: נחלץ את מפתח children",
                        "ar": "في المكون الابن: نستخرج المفتاح children"
                    },
                    {
                        "he": "נדפיס אותו",
                        "ar": "نطبعه"
                    },
                    {
                        "he": "נחזיר אותו מהקומפוננט",
                        "ar": "نعيده من المكون"
                    },
                    {
                        "he": "באמצעות PropTypes נבדוק שאכן הועברו לקומפוננט יותר מאלמנט React אחד באמצעות השילוב של הפונקציה PropTyes.element שתקבל arrayOf",
                        "ar": "باستخدام PropTypes سنفحص أنه تم تمرير أكثر من عنصر React واحد للمكون باستخدام دمج الدالة PropTyes.element التي ستستقبل arrayOf"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 199,
                "title": {
                    "he": "PropTypes.arrayOf(element) Result",
                    "ar": "نتيجة PropTypes.arrayOf(element)"
                },
                "type": "proptypes-arrayof-element-result",
                "icon": "💻",
                "content": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "explanation": [
                    {
                        "he": "בגלל שהעברנו יותר מאלמנט אחד React הכניסה את האלמנטים לתוך מערך כשכל אלמנט הוא איבר במערך",
                        "ar": "لأننا مررنا أكثر من عنصر واحد React أدخل العناصر داخل مصفوفة حيث كل عنصر هو عنصر في المصفوفة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 200,
                "title": {
                    "he": "Business Cards App - PropTypes Task",
                    "ar": "مهمة تطبيق بطاقات العمل - PropTypes"
                },
                "type": "business-cards-proptypes-task",
                "icon": "📋",
                "content": {
                    "he": "משימת PropTypes - Business Cards App",
                    "ar": "مهمة PropTypes - تطبيق بطاقات العمل"
                },
                "instructions": [
                    {
                        "he": "צור את הנתיב `src/cards/models/types`",
                        "ar": "أنشئ المسار `src/cards/models/types`"
                    },
                    {
                        "he": "צור שלושה קבצים בנתיב שיצרת:",
                        "ar": "أنشئ ثلاثة ملفات في المسار الذي أنشأته:"
                    },
                    {
                        "he": "`imageType.js`: צור קבוע בשם `imageType` שיהיה שווה ערך לערך שיחזור ממטודת `PropTypes.shape` אליה תעביר את אובייקט הקונפיגורציות עם הערכים הבאים:",
                        "ar": "`imageType.js`: أنشئ ثابت باسم `imageType` سيكون مساوياً للقيمة التي ستعيدها طريقة `PropTypes.shape` التي ستمرر لها كائن التكوين مع القيم التالية:"
                    },
                    {
                        "he": "`url` – מסוג מחרוזת תווים שדה חובה, `alt` – מסוג מחרוזת תווים שדה חובה",
                        "ar": "`url` – من نوع سلسلة أحرف حقل مطلوب، `alt` – من نوع سلسلة أحرف حقل مطلوب"
                    },
                    {
                        "he": "`addressType.js`: צור קבוע בשם `addressType` שיהיה שווה ערך לערך שיחזור ממטודת `PropTypes.shape` אליה תעביר את אובייקט הקונפיגורציות עם הערכים הבאים:",
                        "ar": "`addressType.js`: أنشئ ثابت باسم `addressType` سيكون مساوياً للقيمة التي ستعيدها طريقة `PropTypes.shape` التي ستمرر لها كائن التكوين مع القيم التالية:"
                    },
                    {
                        "he": "`state` – מסוג מחרוזת תווים, `country` – מסוג מחרוזת תווים ערך חובה, `city` – מסוג מחרוזת תווים ערך חובה, `street` – מסוג מחרוזת תווים ערך חובה, `houseNumber` – מסוג מספר ערך חובה, `zip` – מסוג מספר",
                        "ar": "`state` – من نوع سلسلة أحرف، `country` – من نوع سلسلة أحرف قيمة مطلوبة، `city` – من نوع سلسلة أحرف قيمة مطلوبة، `street` – من نوع سلسلة أحرف قيمة مطلوبة، `houseNumber` – من نوع رقم قيمة مطلوبة، `zip` – من نوع رقم"
                    },
                    {
                        "he": "`cardType.js`: ייבא את הקבועים imageType addressType שיצרת למודול, צור קבוע בשם cardType שיהיה שווה ערך לערך שיחזור ממטודת PropTypes.shape אליה תעביר את אובייקט הקונפיגורציות עם הערכים הבאים:",
                        "ar": "`cardType.js`: استورد الثوابت imageType addressType التي أنشأتها للمودول، أنشئ ثابت باسم cardType سيكون مساوياً للقيمة التي ستعيدها طريقة PropTypes.shape التي ستمرر لها كائن التكوين مع القيم التالية:"
                    },
                    {
                        "he": "`_id`, `title`, `subtitle`, `description`, `address`, `image`, `bizNumber`, `phone`, `likes`, `web`, `email`, `user_id`, `createdAt` - כל השדות חובה",
                        "ar": "`_id`, `title`, `subtitle`, `description`, `address`, `image`, `bizNumber`, `phone`, `likes`, `web`, `email`, `user_id`, `createdAt` - جميع الحقول مطلوبة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
            },
            {
                "id": 201,
                "title": {
                    "he": "Infrastructure Preparation",
                    "ar": "إعداد البنية التحتية"
                },
                "type": "infrastructure-preparation",
                "icon": "🏗️",
                "content": {
                    "he": "הכנת תשתית",
                    "ar": "إعداد البنية التحتية"
                },
                "instructions": [
                    {
                        "he": "נוסיף לנתיב public/assets/images תמונה של כרטיס",
                        "ar": "سنضيف في المسار public/assets/images صورة بطاقة"
                    },
                    {
                        "he": "ונקרה לה card.jpg",
                        "ar": "وسنسميها card.jpg"
                    },
                    {
                        "he": "בתוך תיקיית src ניצור תיקייה חדשה בשם pages",
                        "ar": "داخل مجلد src سننشئ مجلد جديد باسم pages"
                    },
                    {
                        "he": "בתוכה ניצור קובץ בשם AboutPage.jsx",
                        "ar": "بداخله سننشئ ملف باسم AboutPage.jsx"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 202,
                "title": {
                    "he": "About Page Component",
                    "ar": "مكون صفحة حول"
                },
                "type": "about-page-component",
                "icon": "💻",
                "code": {
                    "he": "import React from \"react\";\nimport { Container, Grid } from \"@mui/material\";\nimport PageHeader from \"../components/PageHeader\";\n\nconst AboutPage = () => {\n  return (\n    <Container maxWidth=\"lg\">\n      <PageHeader \n        title=\"About Page\" \n        subtitle=\"On this page you can find explanations about using the application\" \n      />\n      <Grid container spacing={0}>\n        <Grid item xs={12} md={8} alignSelf=\"center\">\n          <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit...\n          </p>\n        </Grid>\n        <Grid \n          item \n          xs={4} \n          sx={{ \n            display: { md: \"flex\", xs: \"none\" }, \n            justifyContent: \"center\" \n          }}\n        >\n          <img src=\"/assets/images/card.jpg\" alt=\"card\" />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default AboutPage;",
                    "ar": "import React from \"react\";\nimport { Container, Grid } from \"@mui/material\";\nimport PageHeader from \"../components/PageHeader\";\n\nconst AboutPage = () => {\n  return (\n    <Container maxWidth=\"lg\">\n      <PageHeader \n        title=\"About Page\" \n        subtitle=\"On this page you can find explanations about using the application\" \n      />\n      <Grid container spacing={0}>\n        <Grid item xs={12} md={8} alignSelf=\"center\">\n          <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit...\n          </p>\n        </Grid>\n        <Grid \n          item \n          xs={4} \n          sx={{ \n            display: { md: \"flex\", xs: \"none\" }, \n            justifyContent: \"center\" \n          }}\n        >\n          <img src=\"/assets/images/card.jpg\" alt=\"card\" />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default AboutPage;"
                },
                "explanation": [
                    {
                        "he": "ניצור דף אודות שישתמש בתמונה שנשמור public בתיקיית",
                        "ar": "سننشئ صفحة حول ستستخدم الصورة التي سنحفظها في مجلد public"
                    },
                    {
                        "he": "ניצור קומפוננט בשם AboutPage שתחזיר",
                        "ar": "سننشئ مكون باسم AboutPage سيعيد"
                    },
                    {
                        "he": "נשתמש בקומפוננט Container כדי לתת רווח לתוכן בגדלי מסך שונים",
                        "ar": "سنستخدم مكون Container لإعطاء مساحة للمحتوى في أحجام شاشة مختلفة"
                    },
                    {
                        "he": "אני מציב את הקומפוננט PageHeader עם הכותרות המתאימות",
                        "ar": "أضع مكون PageHeader مع العناوين المناسبة"
                    },
                    {
                        "he": "ניצור אזור רספונסיבי באמצעות הקומפוננט Grid",
                        "ar": "سننشئ منطقة متجاوبة باستخدام مكون Grid"
                    },
                    {
                        "he": "נקבע כי החלק של המלל יתפוס את כל רוחב המסך בגודל מסך קטן ויתפוס 8 עמודות מעל גודל מסך md ונמרכז את התוכן לאמצע באמצעות alignSelf=\"center\"",
                        "ar": "نحدد أن جزء النص سيأخذ عرض الشاشة الكامل في حجم شاشة صغير وسيأخذ 8 أعمدة فوق حجم شاشة md ونركز المحتوى في المنتصف باستخدام alignSelf=\"center\""
                    },
                    {
                        "he": "נקבע את החלק של התמונה כך שיוצג לגולש רק מגודל מסך md ונמרכז אותו",
                        "ar": "نحدد جزء الصورة بحيث يعرض للمستخدم فقط من حجم شاشة md ونركزه"
                    },
                    {
                        "he": "מחרוזת התווים בערך של מאפיין src תתחיל בסימן סלאש / כדי ש react תתחיל את החיפוש של בתיקיית public ולאחר מכן נשלים את הנתיב עד לתמונה המבוקשת",
                        "ar": "سلسلة الأحرف في قيمة خاصية src ستبدأ بعلامة مائلة / حتى تبدأ React البحث في مجلد public ثم نكمل المسار حتى الصورة المطلوبة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 203,
                "title": {
                    "he": "About Page Result",
                    "ar": "نتيجة صفحة حول"
                },
                "type": "about-page-result",
                "icon": "💻",
                "content": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "explanation": [
                    {
                        "he": "ניתן לראות כי בהתאם לתבנית שקבענו",
                        "ar": "يمكن رؤية أنه وفقاً للقالب الذي حددناه"
                    },
                    {
                        "he": "אנחנו רואים את כותרות הדף",
                        "ar": "نرى عناوين الصفحة"
                    },
                    {
                        "he": "את החלק המיועד לטקס המסביר על האפליקציה",
                        "ar": "الجزء المخصص للنص الذي يشرح عن التطبيق"
                    },
                    {
                        "he": "ורואים את התמונה של הכרטיס",
                        "ar": "ونرى صورة البطاقة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 204,
                "title": {
                    "he": "Hooks",
                    "ar": "Hooks"
                },
                "type": "hooks",
                "icon": "🪝",
                "content": {
                    "he": "Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.",
                    "ar": "Hooks هي إضافة جديدة في React 16.8. تسمح لك باستخدام state وميزات React الأخرى دون كتابة class."
                },
                "link": {
                    "he": "https://reactjs.org/docs/hooks-overview.html",
                    "ar": "https://reactjs.org/docs/hooks-overview.html"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 205,
                "title": {
                    "he": "Introducing React Hooks",
                    "ar": "مقدمة في React Hooks"
                },
                "type": "introducing-react-hooks",
                "icon": "🎬",
                "content": {
                    "he": "מבוא ל-React Hooks",
                    "ar": "مقدمة في React Hooks"
                },
                "link": {
                    "he": "https://www.youtube.com/watch?v=dpw9EHDh2bM",
                    "ar": "https://www.youtube.com/watch?v=dpw9EHDh2bM"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 206,
                "title": {
                    "he": "useState with objects",
                    "ar": "useState مع الكائنات"
                },
                "type": "usestate-objects",
                "icon": "🪝",
                "content": {
                    "he": "useState עם אובייקטים",
                    "ar": "useState مع الكائنات"
                },
                "code": {
                    "he": "import { useState } from \"react\";\n\nconst SetObject = () => {\n  const initialName = {\n    first: \"\",\n    last: \"\",\n  };\n\n  const [name, setName] = useState(initialName);\n\n  return (\n    <div>\n      <h5>\n        Your Name Is:{\" \"}\n        <span className=\"fw-light\">\n          {name.first} {name.last}\n        </span>\n      </h5>\n      <div className=\"input-group\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter First Name\"\n          onChange={e => setName({ ...name, first: e.target.value })}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Enter Last Name\"\n          onChange={e => setName({ ...name, last: e.target.value })}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SetObject;",
                    "ar": "import { useState } from \"react\";\n\nconst SetObject = () => {\n  const initialName = {\n    first: \"\",\n    last: \"\",\n  };\n\n  const [name, setName] = useState(initialName);\n\n  return (\n    <div>\n      <h5>\n        Your Name Is:{\" \"}\n        <span className=\"fw-light\">\n          {name.first} {name.last}\n        </span>\n      </h5>\n      <div className=\"input-group\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter First Name\"\n          onChange={e => setName({ ...name, first: e.target.value })}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Enter Last Name\"\n          onChange={e => setName({ ...name, last: e.target.value })}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SetObject;"
                },
                "explanation": [
                    {
                        "he": "בדוגמה שלהלן ניצור טופס שיבקש מהמשתמש את השם הפרטי שלו ואת שם המשפחה בעזרת useState",
                        "ar": "في المثال التالي سننشئ نموذجًا يطلب من المستخدم اسمه الأول واسم العائلة باستخدام useState"
                    },
                    {
                        "he": "נחלץ את מטודת useState מספריית react",
                        "ar": "سنستخرج دالة useState من مكتبة react"
                    },
                    {
                        "he": "ניצור קומפוננט בשם SetObject",
                        "ar": "سننشئ مكونًا باسم SetObject"
                    },
                    {
                        "he": "ניצור קבוע בשם initialName שערכו יהיה אובייקט עם המפתחות first last",
                        "ar": "سننشئ ثابتًا باسم initialName تكون قيمته كائنًا بالمفاتيح first last"
                    },
                    {
                        "he": "נעשה array destructor למערך שיחזור אלינו מהפעלת מטודת useState עם הפרמטר initialName ונחלץ ממנו את המפתחות: name - שם המשתנה, setName - מטודה שאחראית על שינוי ערכו של המשתנה",
                        "ar": "سنقوم بعمل array destructuring للمصفوفة التي ستعود إلينا من استدعاء دالة useState مع المعامل initialName وسنستخرج منها المفاتيح: name - اسم المتغير، setName - دالة مسؤولة عن تغيير قيمة المتغير"
                    },
                    {
                        "he": "נציב את ערכיו של המשתנה name כך שיוצגו לגולש",
                        "ar": "سنضع قيم المتغير name بحيث تظهر للمستخدم"
                    },
                    {
                        "he": "ניצור אלמנטים מסוג input שכשיכניסו אליהם ערך הן תפעלנה פונקציה אנונימית שתקבל את האירוע ותפעיל את מטודת setName כאשר בפרמטר נעביר לה אובייקט אליו אנו מעתיקים את כל המפתחות מאבייקט name ואז משנים את הערך של המפתח הרלוונטי בהתאם לנתונים שהוכנסו לאלמנט input",
                        "ar": "سننشئ عناصر من نوع input بحيث عند إدخال قيمة إليها ستستدعي دالة مجهولة تستقبل الحدث وتستدعي دالة setName حيث في المعامل نمرر لها كائنًا ننسخ إليه جميع المفاتيح من كائن name ثم نغير قيمة المفتاح المناسب حسب البيانات المدخلة في عنصر input"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 207,
                "title": {
                    "he": "useState with complex objects",
                    "ar": "useState مع الكائنات المعقدة"
                },
                "type": "usestate-complex-objects",
                "icon": "🪝",
                "content": {
                    "he": "useState עם אובייקטים מורכבים",
                    "ar": "useState مع الكائنات المعقدة"
                },
                "code": {
                    "he": "import { useState } from 'react';\n\nconst SetComplexObject = () => {\n  const INITIAL_USER = {\n    name: {\n      first: \"\",\n      last: \"\"\n    },\n    email: \"\"\n  };\n\n  const [user, setUser] = useState(INITIAL_USER);\n\n  return (\n    <div>\n      <form>\n        <h5>Your Name Is: ({user.name.first}) ({user.name.last})</h5>\n        <h5>Your email is: ({user.email})</h5>\n        \n        <input\n          type=\"text\"\n          placeholder=\"Enter First Name\"\n          onChange={e => setUser({...user, name: {...user.name, first: e.target.value}})}\n        />\n        \n        <input\n          type=\"text\"\n          placeholder=\"Enter Last Name\"\n          onChange={e => setUser({...user, name: {...user.name, last: e.target.value}})}\n        />\n        \n        <input\n          type=\"text\"\n          placeholder=\"Enter Email\"\n          onChange={e => setUser({...user, email: e.target.value})}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default SetComplexObject;",
                    "ar": "import { useState } from 'react';\n\nconst SetComplexObject = () => {\n  const INITIAL_USER = {\n    name: {\n      first: \"\",\n      last: \"\"\n    },\n    email: \"\"\n  };\n\n  const [user, setUser] = useState(INITIAL_USER);\n\n  return (\n    <div>\n      <form>\n        <h5>Your Name Is: ({user.name.first}) ({user.name.last})</h5>\n        <h5>Your email is: ({user.email})</h5>\n        \n        <input\n          type=\"text\"\n          placeholder=\"Enter First Name\"\n          onChange={e => setUser({...user, name: {...user.name, first: e.target.value}})}\n        />\n        \n        <input\n          type=\"text\"\n          placeholder=\"Enter Last Name\"\n          onChange={e => setUser({...user, name: {...user.name, last: e.target.value}})}\n        />\n        \n        <input\n          type=\"text\"\n          placeholder=\"Enter Email\"\n          onChange={e => setUser({...user, email: e.target.value})}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default SetComplexObject;"
                },
                "explanation": [
                    {
                        "he": "בדוגמה שלהלן ניצור טופס שיבקש מהמשתמש את השם הפרטי שלו ואת שם המשפחה בעזרת useState",
                        "ar": "في المثال التالي سننشئ نموذجًا يطلب من المستخدم اسمه الأول واسم العائلة باستخدام useState"
                    },
                    {
                        "he": "ניצור קומפוננט בשם SetComplexObject",
                        "ar": "سننشئ مكونًا باسم SetComplexObject"
                    },
                    {
                        "he": "ניצור קבוע בשם INITIAL_USER שערכו יהיה אובייקט עם המפתחות: name - מסוג אובייקט עם המפתחות first last שערכם הוא מחרוזות תווים, email - מסוג מחרוזת תווים",
                        "ar": "سننشئ ثابتًا باسم INITIAL_USER تكون قيمته كائنًا بالمفاتيح: name - من نوع كائن بالمفاتيح first last وقيمها سلاسل نصية، email - من نوع سلسلة نصية"
                    },
                    {
                        "he": "נעשה array destructor למערך שיחזור אלינו מהפעלת מטודת useState עם הפרמטר INITIAL_USER ונחלץ ממנו את המפתחות: user - שם המשתנה, setUser - מטודה שאחראית על שינוי ערכו של המשתנה",
                        "ar": "سنقوم بعمل array destructuring للمصفوفة التي ستعود إلينا من استدعاء دالة useState مع المعامل INITIAL_USER وسنستخرج منها المفاتيح: user - اسم المتغير، setUser - دالة مسؤولة عن تغيير قيمة المتغير"
                    },
                    {
                        "he": "נציב את ערכיו של המשתנה user כך שיוצגו לגולש",
                        "ar": "سنضع قيم المتغير user بحيث تظهر للمستخدم"
                    },
                    {
                        "he": "ניצור אלמנט מסוג input שכאשר יוכנסו אליו נתונים הוא יפעיל פונקציה אנונימית שתקבל את האירוע ותפעיל את מודת setUser ונעביר לה אובייקט ש: נעתיק לתוכו את מפתחות האובייקט user, נעשה השמה למפתח name ונשווה את ערכו לאובייקט שאליו נעתיק את המפתחות של האובייקט user.name, ונעשה השמה למפתח first בתוך הערך של אובייקט name כך שערכו יהיה שווה לערך שיוכנס לאלמנט input (e.target.value)",
                        "ar": "سننشئ عنصرًا من نوع input بحيث عند إدخال بيانات إليه سيستدعي دالة مجهولة تستقبل الحدث وتستدعي دالة setUser ونمرر لها كائنًا: ننسخ إليه مفاتيح كائن user، نعيّن للمفتاح name ونقارن قيمته بكائن ننسخ إليه مفاتيح كائن user.name، ونعيّن للمفتاح first داخل قيمة كائن name بحيث تكون قيمته مساوية للقيمة المدخلة في عنصر input (e.target.value)"
                    },
                    {
                        "he": "ניצור אלמנט מסוג input שיעתיק את המפתחות של user ויעשה שמה למפתח email",
                        "ar": "سننشئ عنصرًا من نوع input ينسخ مفاتيح user ويعيّن للمفتاح email"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 208,
                "title": {
                    "he": "useState with array",
                    "ar": "useState مع المصفوفات"
                },
                "type": "usestate-array",
                "icon": "🪝",
                "content": {
                    "he": "useState עם מערכים",
                    "ar": "useState مع المصفوفات"
                },
                "code": {
                    "he": "import { useState } from \"react\";\n\nexport const SetArray = () => {\n  const INITIAL_TODO = { todo: \"\" };\n  const [task, setTask] = useState(INITIAL_TODO);\n  const [tasks, setTasks] = useState([]);\n\n  const createNewTask = e => {\n    e.preventDefault();\n    setTasks([...tasks, task]);\n    return setTask(INITIAL_TODO);\n  };\n\n  return (\n    <div>\n      <form>\n        <h5>Task: {task.todo}</h5>\n        <div className=\"input-group\">\n          <button\n            type=\"button\"\n            disabled={!task.todo}\n            onClick={createNewTask}\n          >\n            Create\n          </button>\n          <input\n            type=\"text\"\n            placeholder=\"Enter task\"\n            value={task.todo}\n            onChange={e => setTask({ ...task, todo: e.target.value })}\n          />\n        </div>\n        <ul>\n          {tasks.map((todo, index) => (\n            <li key={index}>\n              {index + 1}. {todo.todo}\n            </li>\n          ))}\n        </ul>\n      </form>\n    </div>\n  );\n};",
                    "ar": "import { useState } from \"react\";\n\nexport const SetArray = () => {\n  const INITIAL_TODO = { todo: \"\" };\n  const [task, setTask] = useState(INITIAL_TODO);\n  const [tasks, setTasks] = useState([]);\n\n  const createNewTask = e => {\n    e.preventDefault();\n    setTasks([...tasks, task]);\n    return setTask(INITIAL_TODO);\n  };\n\n  return (\n    <div>\n      <form>\n        <h5>Task: {task.todo}</h5>\n        <div className=\"input-group\">\n          <button\n            type=\"button\"\n            disabled={!task.todo}\n            onClick={createNewTask}\n          >\n            Create\n          </button>\n          <input\n            type=\"text\"\n            placeholder=\"Enter task\"\n            value={task.todo}\n            onChange={e => setTask({ ...task, todo: e.target.value })}\n          />\n        </div>\n        <ul>\n          {tasks.map((todo, index) => (\n            <li key={index}>\n              {index + 1}. {todo.todo}\n            </li>\n          ))}\n        </ul>\n      </form>\n    </div>\n  );\n};"
                },
                "explanation": [
                    {
                        "he": "ניבא את useState מספריית react",
                        "ar": "سنستورد useState من مكتبة react"
                    },
                    {
                        "he": "ניצור קומפוננט בשם SetArray",
                        "ar": "سننشئ مكونًا باسم SetArray"
                    },
                    {
                        "he": "ניצור קבוע בשם INITIAL_TODO ונשווה את הערך שלו לאובייקט עם מפתחות וערכים ראשוניים",
                        "ar": "سننشئ ثابتًا باسم INITIAL_TODO ونقارن قيمته بكائن بمفاتيح وقيم أولية"
                    },
                    {
                        "he": "נפעיל את מטודת useState עם הקבוע שיצרנו ונחלץ ממנה את task setTask",
                        "ar": "سنستدعي دالة useState مع الثابت الذي أنشأناه وسنستخرج منها task setTask"
                    },
                    {
                        "he": "נפעיל את מטודת useState עם מערך ריק ונחלץ ממנה את tasks setTasks",
                        "ar": "سنستدعي دالة useState مع مصفوفة فارغة وسنستخرج منها tasks setTasks"
                    },
                    {
                        "he": "ניצור פונקציה בשם createNewTask שתקבל אירוע, תעצור את ההתנהגות הדיפולטיבית של שליחת הטופס על ידי הכפתור, שתפעיל את מטודת setTasks כשארגומנט נעתיק את מערך המשימות ונוסיף את המשימה, נעצור את הפונקציה ונאפס את המשימה על ידי הפעלת מטודת setTask עם הקבוע של הערכים הראשוניים",
                        "ar": "سننشئ دالة باسم createNewTask تستقبل حدثًا، توقف السلوك الافتراضي لإرسال النموذج بالزر، تستدعي دالة setTasks كمعامل ننسخ مصفوفة المهام ونضيف المهمة، نوقف الدالة ونعيد تعيين المهمة باستدعاء دالة setTask مع ثابت القيم الأولية"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 209,
                "title": {
                    "he": "Render function",
                    "ar": "دالة العرض"
                },
                "type": "render-function",
                "icon": "🎨",
                "content": {
                    "he": "פונקציית render",
                    "ar": "دالة العرض"
                },
                "code": {
                    "he": "return (\n  <div>\n    <form>\n      <h5>Task: {task.todo}</h5>\n      <div className=\"input-group\">\n        <button\n          type=\"button\"\n          disabled={!task.todo}\n          onClick={createNewTask}\n        >\n          Create\n        </button>\n        <input\n          type=\"text\"\n          placeholder=\"Enter task\"\n          value={task.todo}\n          onChange={e => setTask({ ...task, todo: e.target.value })}\n        />\n      </div>\n      <ul>\n        {tasks.map((todo, index) => (\n          <li key={index}>\n            {index + 1}. {todo.todo}\n          </li>\n        ))}\n      </ul>\n    </form>\n  </div>\n);",
                    "ar": "return (\n  <div>\n    <form>\n      <h5>Task: {task.todo}</h5>\n      <div className=\"input-group\">\n        <button\n          type=\"button\"\n          disabled={!task.todo}\n          onClick={createNewTask}\n        >\n          Create\n        </button>\n        <input\n          type=\"text\"\n          placeholder=\"Enter task\"\n          value={task.todo}\n          onChange={e => setTask({ ...task, todo: e.target.value })}\n        />\n      </div>\n      <ul>\n        {tasks.map((todo, index) => (\n          <li key={index}>\n            {index + 1}. {todo.todo}\n          </li>\n        ))}\n      </ul>\n    </form>\n  </div>\n);"
                },
                "explanation": [
                    {
                        "he": "ניצור טופס",
                        "ar": "سننشئ نموذجًا"
                    },
                    {
                        "he": "בחלקו העליון נציג לגולש את המשימה",
                        "ar": "في الجزء العلوي سنعرض المهمة للمستخدم"
                    },
                    {
                        "he": "ניצור כפתור ש: הוא יהיה מנוטרל אם לא יהיה ערך במפתח todo של אובייקט task, בלחיצה על הכפתור הוא יפעיל את מטודת createNewTask שיצרנו",
                        "ar": "سننشئ زرًا: سيكون معطلًا إذا لم تكن هناك قيمة في مفتاح todo من كائن task، عند النقر على الزر سيستدعي دالة createNewTask التي أنشأناها"
                    },
                    {
                        "he": "ניצור input שתאזין לאירוע onChange ותפעיל פונקציה אנונימית שתקבל את האירוע, תפעיל את מטודת setTask כאשר בארגומנט נעתיק את המפתחות מתוך אובייקט task ונעשה השמה למפתח todo עם מה שייכתב בתוך האלמנט, הערך של האלמנט יהיה הערך של המפתח task.todo",
                        "ar": "سننشئ input تستمع لحدث onChange وتستدعي دالة مجهولة تستقبل الحدث، تستدعي دالة setTask حيث في المعامل ننسخ المفاتيح من كائن task ونعيّن للمفتاح todo بما يُكتب داخل العنصر، قيمة العنصر ستكون قيمة المفتاح task.todo"
                    },
                    {
                        "he": "ניצור רשימה שעל כל איבר במערך tasks היא תיצור רשומה עם מספר ועם פרטי המשימה",
                        "ar": "سننشئ قائمة بحيث لكل عنصر في مصفوفة tasks ستُنشئ سجلًا برقم وبتفاصيل المهمة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 210,
                "title": {
                    "he": "Hooks Sandbox Task",
                    "ar": "مهمة Hooks Sandbox"
                },
                "type": "hooks-sandbox-task",
                "icon": "🪝",
                "content": {
                    "he": "משימת useState",
                    "ar": "مهمة useState"
                },
                "instructions": [
                    {
                        "he": "צור קומפוננט בשם SetPost",
                        "ar": "أنشئ مكونًا باسم SetPost"
                    },
                    {
                        "he": "ייבא את useState למודול",
                        "ar": "استورد useState إلى الوحدة"
                    },
                    {
                        "he": "צור פונקציה בשם SetPost (קומפוננט)",
                        "ar": "أنشئ دالة باسم SetPost (مكون)"
                    },
                    {
                        "he": "צור קבוע בשם INITIAL_POST שערכו יהיה אובייקט עם המפתחות: title - מסוג מחרוזת תווים, subtitle - מסוג מחרוזת תווים, author - מסוג מחרוזת תווים, createdAt - מחרוזת תווים",
                        "ar": "أنشئ ثابتًا باسم INITIAL_POST تكون قيمته كائنًا بالمفاتيح: title - من نوع سلسلة نصية، subtitle - من نوع سلسلة نصية، author - من نوع سلسلة نصية، createdAt - سلسلة نصية"
                    },
                    {
                        "he": "הפעל את מטודת useState פעמיים כאשר: בפעם הראשונה עם הארגומנט INITIAL_POST וחלץ מהערך שחוזר את post setPost, בפעם השנייה עם מערך ריק כארגומנט וחלץ מהערך שחוזר מהפעלת הפונקציה את posts setPosts",
                        "ar": "استدع دالة useState مرتين عندما: في المرة الأولى مع المعامل INITIAL_POST واستخرج من القيمة المُرجعة post setPost، في المرة الثانية مع مصفوفة فارغة كمعامل واستخرج من القيمة المُرجعة من استدعاء الدالة posts setPosts"
                    },
                    {
                        "he": "הצג לגולש: טופס שבתוכו צור שלוש אלמנטים מסוג input שהנתונים שיוזנו בתוכם יהיו מקושרים לערכים של שלושת המפתחות הראשונים של אובייקט post חדש (כמו שהודגם בשקפים הקודמים), צור כפתור שלחיצה עליו תכניס פוסט חדש למערך הפוסטים",
                        "ar": "اعرض للمستخدم: نموذجًا بداخله أنشئ ثلاثة عناصر من نوع input تكون البيانات المدخلة فيها مرتبطة بقيم المفاتيح الثلاثة الأولى من كائن post جديد (كما هو موضح في الشرائح السابقة)، أنشئ زرًا عند النقر عليه يدخل منشورًا جديدًا في مصفوفة المنشورات"
                    },
                    {
                        "he": "טבלה שתוצג רק אם יש פוסטים במערך הפוסטים",
                        "ar": "جدول يُعرض فقط إذا كانت هناك منشورات في مصفوفة المنشورات"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 211,
                "title": {
                    "he": "Layout Infrastructure",
                    "ar": "بنية تحتية للتخطيط"
                },
                "type": "layout-infrastructure",
                "icon": "🏗️",
                "content": {
                    "he": "הכנת תשתית",
                    "ar": "إعداد البنية التحتية"
                },
                "instructions": [
                    {
                        "he": "בנתיב src/layout ניצור את התיקיות הבאות:",
                        "ar": "في المسار src/layout سننشئ المجلدات التالية:"
                    },
                    {
                        "he": "התיקייה footer ובתוכה הקובץ Footer.jsx",
                        "ar": "مجلد footer وبداخله الملف Footer.jsx"
                    },
                    {
                        "he": "התיקייה header ובתוכה הקובץ Header.jsx",
                        "ar": "مجلد header وبداخله الملف Header.jsx"
                    },
                    {
                        "he": "התיקייה main ובתוכה הקובץ Main.jsx",
                        "ar": "مجلد main وبداخله الملف Main.jsx"
                    },
                    {
                        "he": "הקובץ Layout.jsx",
                        "ar": "الملف Layout.jsx"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 212,
                "title": {
                    "he": "Header Component",
                    "ar": "مكون الرأس"
                },
                "type": "header-component",
                "icon": "📄",
                "content": {
                    "he": "Header.jsx",
                    "ar": "Header.jsx"
                },
                "code": {
                    "he": "import React from \"react\";\n\nconst Header = () => {\n  return <div>Header</div>;\n};\n\nexport default Header;",
                    "ar": "import React from \"react\";\n\nconst Header = () => {\n  return <div>Header</div>;\n};\n\nexport default Header;"
                },
                "explanation": [
                    {
                        "he": "בשלב זה ניצור את הקומפוננט כך שתציג את התוכן שלה בתבנית הכללית",
                        "ar": "في هذه المرحلة سننشئ المكون بحيث يعرض محتواه في القالب العام"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 213,
                "title": {
                    "he": "Main Component",
                    "ar": "المكون الرئيسي"
                },
                "type": "main-component",
                "icon": "📄",
                "content": {
                    "he": "Main.jsx",
                    "ar": "Main.jsx"
                },
                "code": {
                    "he": "import { node } from \"prop-types\";\nimport Box from \"@mui/material/Box\";\n\nconst Main = ({ children }) => {\n  return (\n    <Box sx={{ minHeight: \"85vh\", backgroundColor: \"#e3f2fd\" }}>\n      {children}\n    </Box>\n  );\n};\n\nMain.propTypes = {\n  children: node.isRequired,\n};\n\nexport default Main;",
                    "ar": "import { node } from \"prop-types\";\nimport Box from \"@mui/material/Box\";\n\nconst Main = ({ children }) => {\n  return (\n    <Box sx={{ minHeight: \"85vh\", backgroundColor: \"#e3f2fd\" }}>\n      {children}\n    </Box>\n  );\n};\n\nMain.propTypes = {\n  children: node.isRequired,\n};\n\nexport default Main;"
                },
                "explanation": [
                    {
                        "he": "קומפוננט זה תהיה אחראית על תצוגת התוכן",
                        "ar": "هذا المكون سيكون مسؤولاً عن عرض المحتوى"
                    },
                    {
                        "he": "הקומפוננט תקבל במפתח של אובייקט ה- props את המילה השמורה children (כלומר אלמנט javascript /HTML/React data בין התגית הפותחת לתגית הסוגרת)",
                        "ar": "المكون سيتلقى في مفتاح كائن props الكلمة المحجوزة children (أي عنصر javascript /HTML/React data بين العلامة الافتتاحية والعلامة الإغلاقية)"
                    },
                    {
                        "he": "התוכן הראשי יהיה עטוף באלמנט Box של MUI שאני קובע גובה מינימלי וצבע רקע",
                        "ar": "المحتوى الرئيسي سيكون ملفوفًا في عنصر Box من MUI حيث أحدد ارتفاعًا أدنى ولون خلفية"
                    },
                    {
                        "he": "בנקודה זאת התוכן יוצג",
                        "ar": "في هذه النقطة سيتم عرض المحتوى"
                    },
                    {
                        "he": "אני מוודא בעזרת ספריית propTypes שהקומפוננט אכן מקבלת אלמנט של React במפתח children שבאובייקט הפרופס",
                        "ar": "أتأكد باستخدام مكتبة propTypes أن المكون يتلقى بالفعل عنصر React في مفتاح children في كائن props"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 214,
                "title": {
                    "he": "Layout Component",
                    "ar": "مكون التخطيط"
                },
                "type": "layout-component",
                "icon": "📄",
                "content": {
                    "he": "Layout.jsx",
                    "ar": "Layout.jsx"
                },
                "code": {
                    "he": "import React from \"react\";\nimport { node } from \"prop-types\";\nimport Header from \"./header/Header\";\nimport Main from \"./main/Main\";\nimport Footer from \"./footer/Footer\";\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Header />\n      <Main>{children}</Main>\n      <Footer />\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: node.isRequired,\n};\n\nexport default Layout;",
                    "ar": "import React from \"react\";\nimport { node } from \"prop-types\";\nimport Header from \"./header/Header\";\nimport Main from \"./main/Main\";\nimport Footer from \"./footer/Footer\";\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Header />\n      <Main>{children}</Main>\n      <Footer />\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: node.isRequired,\n};\n\nexport default Layout;"
                },
                "explanation": [
                    {
                        "he": "בקומפוננט זה אסדר את התוכן כך שכל דף באתר יהיה לו Header ו-Footer קבועים, ורק תוכן הדפים ישתנה לפי הדף שהמשתמש נמצא בו",
                        "ar": "في هذا المكون سأرتب المحتوى بحيث يكون لكل صفحة في الموقع Header وFooter ثابتان، ويتغير فقط محتوى الصفحات حسب الصفحة التي يكون المستخدم فيها"
                    },
                    {
                        "he": "הקומפוננט תקבל את המילה השמורה children במפתח props",
                        "ar": "المكون سيتلقى الكلمة المحجوزة children في مفتاح props"
                    },
                    {
                        "he": "נעטוף את האלמנטים באלמנט React.Fragment",
                        "ar": "سنلف العناصر في عنصر React.Fragment"
                    },
                    {
                        "he": "נציג את הקומפוננטים למשתמש: Header - שיכלול תפריט ניווט בעתיד, Main - שאליו נעביר את התוכן של הדף שאנחנו רוצים להציג, Footer - יכלול תפריט ניווט בעתיד, לוגו וזכויות יוצרים",
                        "ar": "سنعرض المكونات للمستخدم: Header - سيحتوي على قائمة تنقل في المستقبل، Main - الذي سنمرر إليه محتوى الصفحة التي نريد عرضها، Footer - سيحتوي على قائمة تنقل في المستقبل، شعار وحقوق الطبع"
                    },
                    {
                        "he": "אני מוודא בעזרת ספריית propTypes שהקומפוננט אכן מקבלת אלמנט של React במפתח children שבאובייקט הפרופס",
                        "ar": "أتأكد باستخدام مكتبة propTypes أن المكون يتلقى بالفعل عنصر React في مفتاح children في كائن props"
                    },
                    {
                        "he": "! כרגע התוכן של הדף עדיין סטטי עד שנלמד להשתמש ב-routing מאוחר יותר במצגת",
                        "ar": "! حاليًا محتوى الصفحة لا يزال ثابتًا حتى نتعلم استخدام routing لاحقًا في العرض"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 215,
                "title": {
                    "he": "App.js Layout",
                    "ar": "App.js مع التخطيط"
                },
                "type": "app-js-layout",
                "icon": "📄",
                "content": {
                    "he": "App.js",
                    "ar": "App.js"
                },
                "code": {
                    "he": "import \"./App.css\";\nimport CardsPage from \"./cards/pages/CardsPage\";\nimport Layout from \"./layout/Layout\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <CardsPage />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;",
                    "ar": "import \"./App.css\";\nimport CardsPage from \"./cards/pages/CardsPage\";\nimport Layout from \"./layout/Layout\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <CardsPage />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;"
                },
                "explanation": [
                    {
                        "he": "נעטוף את הקומפוננט CardsPage בקומפוננט Layout כך שיוצג לנו תוכן הדף Header Footer ביחד עם CardsPage",
                        "ar": "سنلف مكون CardsPage في مكون Layout بحيث يُعرض لنا محتوى الصفحة Header Footer مع CardsPage"
                    },
                    {
                        "he": "למעשה אנו מעבירים לקומפוננט Layout במפתח children באובייקט ה-props את הקומפוננט React שהוא אלמנט של CardsPage",
                        "ar": "في الواقع نمرر لمكون Layout في مفتاح children في كائن props مكون React الذي هو عنصر من CardsPage"
                    },
                    {
                        "he": "בתוך הקומפוננט Layout מוצב הקומפוננט main שמקבל גם הוא את אלמנט ה-React במפתח children באובייקט ה-props ומציג אותו",
                        "ar": "داخل مكون Layout موضوع مكون main الذي يتلقى أيضًا عنصر React في مفتاح children في كائن props ويعرضه"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 216,
                "title": {
                    "he": "Browser Result Layout",
                    "ar": "نتيجة المتصفح للتخطيط"
                },
                "type": "browser-result-layout",
                "icon": "💻",
                "content": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "explanation": [
                    {
                        "he": "ניתן לראות כי בהתאם לתבנית שקבענו מוצג לגולש",
                        "ar": "يمكن رؤية أنه وفقاً للقالب الذي حددناه يُعرض للمستخدم"
                    },
                    {
                        "he": "את תפריט הניווט העליון",
                        "ar": "قائمة التنقل العلوية"
                    },
                    {
                        "he": "לאחר מכן את תוכן הדף",
                        "ar": "ثم محتوى الصفحة"
                    },
                    {
                        "he": "ולבסוף התפריט התחתון",
                        "ar": "وأخيرًا القائمة السفلية"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 217,
                "title": {
                    "he": "Error Page",
                    "ar": "صفحة الخطأ"
                },
                "type": "error-page",
                "icon": "❌",
                "content": {
                    "he": "ErrorPage.jsx",
                    "ar": "ErrorPage.jsx"
                },
                "code": {
                    "he": "import React from \"react\";\nimport { Container, PageHeader, Grid, Typography, Button } from \"@mui/material\";\n\nconst ErrorPage = () => {\n  return (\n    <Container>\n      <PageHeader title=\"Error 404\" subtitle=\"Page not found\" />\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={8}>\n          <Typography variant=\"h5\" color=\"initial\">\n            Oops... The requested URL was not found on this server\n          </Typography>\n          <Button variant=\"text\" color=\"primary\">\n            Click here to return to the home page...\n          </Button>\n        </Grid>\n        <Grid item xs={12} md={4} justifyContent=\"center\">\n          <img width=\"100%\" src=\"/assets/images/broken-robot.png\" alt=\"broken robot\" />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default ErrorPage;",
                    "ar": "import React from \"react\";\nimport { Container, PageHeader, Grid, Typography, Button } from \"@mui/material\";\n\nconst ErrorPage = () => {\n  return (\n    <Container>\n      <PageHeader title=\"Error 404\" subtitle=\"Page not found\" />\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={8}>\n          <Typography variant=\"h5\" color=\"initial\">\n            Oops... The requested URL was not found on this server\n          </Typography>\n          <Button variant=\"text\" color=\"primary\">\n            Click here to return to the home page...\n          </Button>\n        </Grid>\n        <Grid item xs={12} md={4} justifyContent=\"center\">\n          <img width=\"100%\" src=\"/assets/images/broken-robot.png\" alt=\"broken robot\" />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default ErrorPage;"
                },
                "explanation": [
                    {
                        "he": "ניצור את הנתיב src/pages/ErrorPage.jsx",
                        "ar": "سننشئ المسار src/pages/ErrorPage.jsx"
                    },
                    {
                        "he": "ניצור את הקומפוננט ErrorPage",
                        "ar": "سننشئ مكون ErrorPage"
                    },
                    {
                        "he": "הקומפוננט תציג לגולש כותרות מתאימות",
                        "ar": "المكون سيعرض للمستخدم عناوين مناسبة"
                    },
                    {
                        "he": "טקסט מתאים שיסביר לגולש שהדף שהוא ביקש לא נמצא",
                        "ar": "نص مناسب يشرح للمستخدم أن الصفحة التي طلبها غير موجودة"
                    },
                    {
                        "he": "כפתור שמאוחר יותר יהיה לינק חזרה לדף הבית",
                        "ar": "زر سيكون لاحقًا رابط عودة للصفحة الرئيسية"
                    },
                    {
                        "he": "תמונה להמחשה שהגולש הגיע לדף 404",
                        "ar": "صورة لتوضيح أن المستخدم وصل لصفحة 404"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 218,
                "title": {
                    "he": "Browser Result Error",
                    "ar": "نتيجة المتصفح للخطأ"
                },
                "type": "browser-result-error",
                "icon": "💻",
                "content": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "explanation": [
                    {
                        "he": "ניתן לראות כי בהתאם לתבנית שקבענו מוצג לגולש",
                        "ar": "يمكن رؤية أنه وفقاً للقالب الذي حددناه يُعرض للمستخدم"
                    },
                    {
                        "he": "אנחנו רואים את כותרות הדף",
                        "ar": "نرى عناوين الصفحة"
                    },
                    {
                        "he": "את החלק המיועד לטקס המסביר על האפליקציה",
                        "ar": "الجزء المخصص للنص الذي يشرح عن التطبيق"
                    },
                    {
                        "he": "ורואים את התמונה של הכרטיס",
                        "ar": "ونرى صورة البطاقة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 219,
                "title": {
                    "he": "React Router DOM",
                    "ar": "React Router DOM"
                },
                "type": "react-router-dom",
                "icon": "🛣️",
                "content": {
                    "he": "React Router Dom",
                    "ar": "React Router Dom"
                },
                "subtitle": {
                    "he": "Single Page Application ניתובים באפליקציה שהיא",
                    "ar": "تطبيق صفحة واحدة التوجيه في التطبيق الذي هو"
                },
                "link": {
                    "he": "https://reactrouter.com/en/main",
                    "ar": "https://reactrouter.com/en/main"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 220,
                "title": {
                    "he": "Router Definition",
                    "ar": "تعريف الموجه"
                },
                "type": "router-definition",
                "icon": "🔍",
                "content": {
                    "he": "Definition",
                    "ar": "تعريف"
                },
                "explanation": [
                    {
                        "he": "React Router DOM is an npm package that enables you to implement dynamic routing in a web app.",
                        "ar": "React Router DOM هو حزمة npm تمكنك من تنفيذ التوجيه الديناميكي في تطبيق ويب."
                    },
                    {
                        "he": "It allows you to display pages and allow users to navigate them.",
                        "ar": "يسمح لك بعرض الصفحات والسماح للمستخدمين بالتنقل بينها."
                    },
                    {
                        "he": "It is a fully-featured client and server-side routing library for React.",
                        "ar": "إنها مكتبة توجيه كاملة الميزات للعميل والخادم لـ React."
                    },
                    {
                        "he": "React Router Dom is used to build single-page applications i.e. applications that have many pages or components but the page is never refreshed instead the content is dynamically fetched based on the URL.",
                        "ar": "يُستخدم React Router Dom لبناء تطبيقات الصفحة الواحدة أي التطبيقات التي تحتوي على صفحات أو مكونات متعددة ولكن الصفحة لا يتم تحديثها أبدًا بدلاً من ذلك يتم جلب المحتوى ديناميكيًا بناءً على URL."
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 221,
                "title": {
                    "he": "Router Benefits",
                    "ar": "مزايا الموجه"
                },
                "type": "router-benefits",
                "icon": "👍",
                "content": {
                    "he": "Benefits",
                    "ar": "مزايا"
                },
                "benefits": [
                    {
                        "he": "The page does not have to be refreshed when a link to another page is clicked",
                        "ar": "الصفحة لا تحتاج إلى تحديث عند النقر على رابط لصفحة أخرى"
                    },
                    {
                        "he": "Very fast compared to traditional page navigation",
                        "ar": "سريع جدًا مقارنة بالتنقل التقليدي بين الصفحات"
                    },
                    {
                        "he": "Better user experience",
                        "ar": "تجربة مستخدم أفضل"
                    },
                    {
                        "he": "It uses React components",
                        "ar": "يستخدم مكونات React"
                    },
                    {
                        "he": "Single Page Application",
                        "ar": "تطبيق صفحة واحدة"
                    },
                    {
                        "he": "Easy to learn and apply",
                        "ar": "سهل التعلم والتطبيق"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 222,
                "title": {
                    "he": "Router Installation",
                    "ar": "تثبيت الموجه"
                },
                "type": "router-installation",
                "icon": "⚙️",
                "content": {
                    "he": "Installation",
                    "ar": "تثبيت"
                },
                "command": {
                    "he": "npm i react-router-dom",
                    "ar": "npm i react-router-dom"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 223,
                "title": {
                    "he": "Routes Infrastructure",
                    "ar": "بنية تحتية للمسارات"
                },
                "type": "routes-infrastructure",
                "icon": "🏗️",
                "content": {
                    "he": "הכנת תשתית",
                    "ar": "إعداد البنية التحتية"
                },
                "instructions": [
                    {
                        "he": "ניצור את הנתיב src/routes ובתוכו את הקבצים:",
                        "ar": "سننشئ المسار src/routes وبداخله الملفات:"
                    },
                    {
                        "he": "NavBarLink.jsx - קומפוננט שיעטוף אלמנט כך שלחיצה עליו תעביר לכתובת ה-URL המוגדרת",
                        "ar": "NavBarLink.jsx - مكون سيلف عنصرًا بحيث النقر عليه ينقل إلى عنوان URL المحدد"
                    },
                    {
                        "he": "NavItem.jsx - קומפוננט שישמש כלינק בתפריט הניווט",
                        "ar": "NavItem.jsx - مكون سيُستخدم كلينك في قائمة التنقل"
                    },
                    {
                        "he": "Router.jsx - הקובץ שינהל את התצוגה של הדפים",
                        "ar": "Router.jsx - الملف الذي سيدير عرض الصفحات"
                    },
                    {
                        "he": "routesModel.js - יכיל אובייקט שישמש כשפה משותפת לכל שמות הלינקים וערכם",
                        "ar": "routesModel.js - سيحتوي على كائن سيُستخدم كلغة مشتركة لجميع أسماء الروابط وقيمها"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 224,
                "title": {
                    "he": "Routes Model",
                    "ar": "نموذج المسارات"
                },
                "type": "routes-model",
                "icon": "🗺️",
                "content": {
                    "he": "routesModel.js",
                    "ar": "routesModel.js"
                },
                "code": {
                    "he": "const ROUTES = {\n  ROOT: \"/\",\n  ABOUT: \"/about\",\n  CARDS: \"/cards\",\n};\n\nexport default ROUTES;",
                    "ar": "const ROUTES = {\n  ROOT: \"/\",\n  ABOUT: \"/about\",\n  CARDS: \"/cards\",\n};\n\nexport default ROUTES;"
                },
                "explanation": [
                    {
                        "he": "מודול זה ישמש כשפה משותפת לכל שמות הלינקים וערכם",
                        "ar": "هذه الوحدة ستُستخدم كلغة مشتركة لجميع أسماء الروابط وقيمها"
                    },
                    {
                        "he": "ניצור קבוע בשם ROUTES שערכו יהיה אובייקט שהמפתחות שלו יהיו הדפים אליהם נרצה להגיע והערכים הם הנתיב שנעביר לקומפוננט שיבקש URL",
                        "ar": "سننشئ ثابتًا باسم ROUTES تكون قيمته كائنًا تكون مفاتيحه هي الصفحات التي نريد الوصول إليها والقيم هي المسار الذي سنمرره للمكون الذي يطلب URL"
                    },
                    {
                        "he": "נייצא את הקבוע שיצרנו מהמודול",
                        "ar": "سنصدر الثابت الذي أنشأناه من الوحدة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 225,
                "title": {
                    "he": "Routes Component",
                    "ar": "مكون المسارات"
                },
                "type": "routes-component",
                "icon": "🛣️",
                "content": {
                    "he": "Routes",
                    "ar": "المسارات"
                },
                "explanation": [
                    {
                        "he": "קומפוננט של react-router-dom שאחראי על ניתובים",
                        "ar": "مكون من react-router-dom مسؤول عن التوجيه"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 226,
                "title": {
                    "he": "Router Component",
                    "ar": "مكون الموجه"
                },
                "type": "router-component",
                "icon": "🛣️",
                "content": {
                    "he": "Router.jsx",
                    "ar": "Router.jsx"
                },
                "code": {
                    "he": "import React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport CardsPage from \"../cards/pages/CardsPage\";\nimport AboutPage from \"../pages/AboutPage\";\nimport ErrorPage from \"../pages/ErrorPage\";\nimport Sandbox from \"../sandbox/Sandbox\";\nimport ROUTES from \"./routesModel\";\n\nconst Router = () => {\n  return (\n    <Routes>\n      <Route path={ROUTES.CARDS} element={<CardsPage />} />\n      <Route path={ROUTES.ABOUT} element={<AboutPage />} />\n      <Route path=\"/sandbox\" element={<Sandbox />} />\n      <Route path=\"*\" element={<ErrorPage />} />\n    </Routes>\n  );\n};\n\nexport default Router;",
                    "ar": "import React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport CardsPage from \"../cards/pages/CardsPage\";\nimport AboutPage from \"../pages/AboutPage\";\nimport ErrorPage from \"../pages/ErrorPage\";\nimport Sandbox from \"../sandbox/Sandbox\";\nimport ROUTES from \"./routesModel\";\n\nconst Router = () => {\n  return (\n    <Routes>\n      <Route path={ROUTES.CARDS} element={<CardsPage />} />\n      <Route path={ROUTES.ABOUT} element={<AboutPage />} />\n      <Route path=\"/sandbox\" element={<Sandbox />} />\n      <Route path=\"*\" element={<ErrorPage />} />\n    </Routes>\n  );\n};\n\nexport default Router;"
                },
                "explanation": [
                    {
                        "he": "קובץ זה ינהל את תצוגת הדפים לגולש",
                        "ar": "هذا الملف سيدير عرض الصفحات للمستخدم"
                    },
                    {
                        "he": "נייבא את הקומפוננטות Routes ו-Route מספריית react-router-dom",
                        "ar": "سنستورد مكونات Routes و-Route من مكتبة react-router-dom"
                    },
                    {
                        "he": "ניצור קומפוננט בשם Router",
                        "ar": "سننشئ مكونًا باسم Router"
                    },
                    {
                        "he": "נעטוף את קומפוננטות ה-Route בקומפוננט Routes",
                        "ar": "سنلف مكونات Route في مكون Routes"
                    },
                    {
                        "he": "כל קומפוננט מסוג Route תקבל בשלב זה שני מאפיינים: path - כתובת URL, element - הקומפוננט שנרצה להציג, במידה ומגיעים לכתובת ה-URL של הקומפוננט",
                        "ar": "كل مكون من نوع Route سيتلقى في هذه المرحلة خاصيتين: path - عنوان URL، element - المكون الذي نريد عرضه، إذا وصلنا لعنوان URL للمكون"
                    },
                    {
                        "he": "הקומפוננט האחרונה שנציב תקבל במאפיין path את הכתובת \"*\" וכך היא תיירט את כל הכתובות שלא נתפסו בניתובים הקודמים ותציג קומפוננט ErrorPage",
                        "ar": "المكون الأخير الذي سنضعه سيتلقى في خاصية path العنوان \"*\" وهكذا ستعترض جميع العناوين التي لم تُلتقط في التوجيهات السابقة وتعرض مكون ErrorPage"
                    },
                    {
                        "he": "! יש חשיבות לסדר הקומפוננטות של Route",
                        "ar": "! ترتيب مكونات Route مهم"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 227,
                "title": {
                    "he": "BrowserRouter",
                    "ar": "BrowserRouter"
                },
                "type": "browser-router",
                "icon": "🌐",
                "content": {
                    "he": "BrowserRouter",
                    "ar": "BrowserRouter"
                },
                "explanation": [
                    {
                        "he": "קומפוננט של react-router-dom שתנתב לדף המתאים לפי הלוגיקה הרשומה בקומפוננט Routes",
                        "ar": "مكون من react-router-dom سيرشد للصفحة المناسبة حسب المنطق المسجل في مكون Routes"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 228,
                "title": {
                    "he": "Browser Result About",
                    "ar": "نتيجة المتصفح حول"
                },
                "type": "browser-result-about",
                "icon": "💻",
                "content": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "explanation": [
                    {
                        "he": "ניתן לראות כי בהתאם לתבנית שקבענו מוצג לגולש",
                        "ar": "يمكن رؤية أنه وفقاً للقالب الذي حددناه يُعرض للمستخدم"
                    },
                    {
                        "he": "את תפריט הניווט העליון",
                        "ar": "قائمة التنقل العلوية"
                    },
                    {
                        "he": "לאחר מכן את תוכן הדף",
                        "ar": "ثم محتوى الصفحة"
                    },
                    {
                        "he": "ולבסוף התפריט התחתון",
                        "ar": "وأخيرًا القائمة السفلية"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 361,
                "title": {
                    "he": "Highlights for creating forms",
                    "ar": "النقاط الرئيسية لإنشاء النماذج"
                },
                "type": "highlights-forms",
                "icon": "📝",
                "items": [
                    {
                        "he": "Validation on the form fields",
                        "ar": "التحقق من صحة حقول النموذج"
                    },
                    {
                        "he": "Release the submit button only when all the mandatory fields in the form have been filled",
                        "ar": "إطلاق زر الإرسال فقط عند ملء جميع الحقول الإجبارية في النموذج"
                    },
                    {
                        "he": "Managing the state of the form in React components",
                        "ar": "إدارة حالة النموذج في مكونات React"
                    },
                    {
                        "he": "Form style uniformity throughout the application",
                        "ar": "توحيد نمط النموذج في جميع أنحاء التطبيق"
                    },
                    {
                        "he": "Creating components and functions that will serve all the forms in the application",
                        "ar": "إنشاء مكونات ووظائف ستخدم جميع النماذج في التطبيق"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 362,
                "title": {
                    "he": "Infrastructure Preparation",
                    "ar": "إعداد البنية التحتية"
                },
                "type": "infrastructure-preparation-forms",
                "icon": "📁",
                "content": {
                    "he": "ניצור את הנתיב src/forms ובתוכו את התיקיות והקבצים:",
                    "ar": "سنقوم بإنشاء المسار src/forms وبداخله المجلدات والملفات:"
                },
                "fileStructure": {
                    "forms": {
                        "components": [
                            "Form.jsx",
                            "FormButton.jsx",
                            "Input.jsx"
                        ],
                        "hooks": [
                            "useForm.js"
                        ],
                        "utils": [
                            "algoMethods.js"
                        ]
                    }
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 363,
                "title": {
                    "he": "algoMethods.js",
                    "ar": "algoMethods.js"
                },
                "type": "algomethods-js",
                "icon": "⚙️",
                "code": {
                    "language": "javascript",
                    "content": "export const makeFirstLetterCapital = (string) => {\n  const term = string.toLowerCase().trim();\n  return term.charAt(0).toUpperCase() + term.slice(1);\n};"
                },
                "explanation": {
                    "he": "קובץ אלגוריתמים שיעזור לנו בפעולות על מערכים ואובייקטים",
                    "ar": "ملف خوارزميات سيساعدنا في العمليات على المصفوفات والكائنات"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 364,
                "title": {
                    "he": "Input.jsx Component",
                    "ar": "مكون Input.jsx"
                },
                "type": "input-jsx-component",
                "icon": "📝",
                "code": {
                    "language": "jsx",
                    "content": "import React from \"react\";\nimport { string, bool, object, func } from \"prop-types\";\nimport TextField from \"@mui/material/TextField\";\nimport { makeFirstLetterCapital } from \"../utils/algoMethods\";\nimport Grid from \"@mui/material/Grid\";\n\nconst Input = ({\n  variant,\n  type,\n  name,\n  data,\n  label,\n  required,\n  error,\n  handleChange,\n  ...rest\n}) => {\n  return (\n    <Grid item xs={12} {...rest}>\n      <TextField\n        variant={variant}\n        label={makeFirstLetterCapital(label)}\n        type={type}\n        id={name}\n        name={name}\n        value={data[name] ? data[name] : \"\"}\n        required={required}\n        helperText={error}\n        error={Boolean(error)}\n        onChange={handleChange}\n        fullWidth\n        autoComplete=\"off\"\n      />\n    </Grid>\n  );\n};"
                },
                "props": [
                    {
                        "name": "variant",
                        "description": {
                            "he": "סוג העיצוב של השדה",
                            "ar": "نوع تصميم الحقل"
                        }
                    },
                    {
                        "name": "label",
                        "description": {
                            "he": "השם שיופיע על תווית השדה",
                            "ar": "الاسم الذي سيظهر على تسمية الحقل"
                        }
                    },
                    {
                        "name": "type",
                        "description": {
                            "he": "קביעת סוג אלמנט ה-input שנמצא בבסיסו של הקומפוננט TextField",
                            "ar": "تحديد نوع عنصر input الموجود في أساس مكون TextField"
                        }
                    },
                    {
                        "name": "name",
                        "description": {
                            "he": "id שישמש את המאפיינים name ו-value בזיהוי השדה",
                            "ar": "id الذي سيستخدمه الخصائص name و value في تحديد الحقل"
                        }
                    },
                    {
                        "name": "required",
                        "description": {
                            "he": "האם להוסיף כוכבית בתווית השם (לא מדובר על ולידציה של HTML אלא רק מבחינה עיצובית)",
                            "ar": "ما إذا كان سيتم إضافة علامة النجمة في تسمية الاسم (ليس حول التحقق من HTML ولكن فقط من الناحية التصميمية)"
                        }
                    },
                    {
                        "name": "error",
                        "description": {
                            "he": "מחרוזת התווים שתוצג במאפיין helperText במידה והמאפיין error יהיה true",
                            "ar": "سلسلة الأحرف التي ستظهر في خاصية helperText إذا كانت خاصية error true"
                        }
                    },
                    {
                        "name": "handleChange",
                        "description": {
                            "he": "מטודה שתופעל כשהאירוע onChange יקרה בשדה",
                            "ar": "طريقة سيتم تفعيلها عند حدوث حدث onChange في الحقل"
                        }
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 365,
                "title": {
                    "he": "Input PropTypes & defaultProps",
                    "ar": "PropTypes و defaultProps لـ Input"
                },
                "type": "input-proptypes-defaultprops",
                "icon": "🔧",
                "code": {
                    "language": "javascript",
                    "content": "Input.propTypes = {\n  name: string.isRequired,\n  required: bool.isRequired,\n  type: string.isRequired,\n  error: string,\n  handleChange: func.isRequired,\n  variant: string,\n  data: object,\n};\n\nInput.defaultProps = {\n  required: true,\n  type: \"text\",\n  variant: \"outlined\",\n};\n\nexport default React.memo(Input);"
                },
                "explanation": {
                    "he": "נוודא שהקומפוננט מקבלת את הפרמטרים שהיא צריכה כדי שהלוגיקה שלה תפעל כראוי",
                    "ar": "سنتأكد من أن المكون يتلقى المعاملات التي يحتاجها حتى تعمل منطقها بشكل صحيح"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 366,
                "title": {
                    "he": "FormButton.jsx Component",
                    "ar": "مكون FormButton.jsx"
                },
                "type": "formbutton-jsx-component",
                "icon": "🔘",
                "content": {
                    "he": "קומפוננט שתשתמש בעיצוב של הקומפוננט Button של MUI ותקבע אם יהיה ניתן ללחוץ על הכפתור או לא. דבר שיכול להוביל לשליחת הטופס או הפעלת האירוע בטופס onSubmit",
                    "ar": "مكون سيستخدم تصميم مكون Button من MUI ويحدد ما إذا كان يمكن النقر على الزر أم لا. شيء يمكن أن يؤدي إلى إرسال النموذج أو تفعيل الحدث في النموذج onSubmit"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 367,
                "title": {
                    "he": "FormButton.jsx Implementation",
                    "ar": "تنفيذ FormButton.jsx"
                },
                "type": "formbutton-jsx-implementation",
                "icon": "💻",
                "code": {
                    "language": "jsx",
                    "content": "import React from \"react\";\nimport { string, bool, node, func } from \"prop-types\";\nimport Button from \"@mui/material/Button\";\n\nconst FormButton = ({\n  variant,\n  component,\n  size,\n  color,\n  onClick,\n  disabled,\n  node,\n}) => {\n  return (\n    <Button\n      variant={variant}\n      component={component}\n      size={size}\n      color={color}\n      onClick={onClick}\n      disabled={disabled}\n      fullWidth\n    >\n      {node}\n    </Button>\n  );\n};"
                },
                "props": [
                    {
                        "name": "variant",
                        "description": {
                            "he": "מחרוזת תווים שתקבע את עיצוב הכפתור",
                            "ar": "سلسلة أحرف ستحدد تصميم الزر"
                        }
                    },
                    {
                        "name": "component",
                        "description": {
                            "he": "אלמנט ה-HTML",
                            "ar": "عنصر HTML"
                        }
                    },
                    {
                        "name": "size",
                        "description": {
                            "he": "מחרוזת תווים שתקבע את גודל הכפתור",
                            "ar": "سلسلة أحرف ستحدد حجم الزر"
                        }
                    },
                    {
                        "name": "color",
                        "description": {
                            "he": "מחרוזת תווים שתקבע את צבע הכפתור",
                            "ar": "سلسلة أحرف ستحدد لون الزر"
                        }
                    },
                    {
                        "name": "onClick",
                        "description": {
                            "he": "פרמטר מסוג פונקציית callback שתופעל כאשר האירוע onClick על הכפתור יקרה",
                            "ar": "معامل من نوع دالة callback سيتم تفعيلها عند حدوث حدث onClick على الزر"
                        }
                    },
                    {
                        "name": "disabled",
                        "description": {
                            "he": "פרמטר בוליאני שיקבע אם הכפתור יהיה מושבת או לא",
                            "ar": "معامل منطقي سيحدد ما إذا كان الزر معطل أم لا"
                        }
                    },
                    {
                        "name": "node",
                        "description": {
                            "he": "מחרוזת תווים / component / element שיהוו הכיתוב על הכפתור",
                            "ar": "سلسلة أحرف / مكون / عنصر ستشكل النص على الزر"
                        }
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 368,
                "title": {
                    "he": "FormButton PropTypes & defaultProps",
                    "ar": "PropTypes و defaultProps لـ FormButton"
                },
                "type": "formbutton-proptypes-defaultprops",
                "icon": "🔧",
                "code": {
                    "language": "javascript",
                    "content": "FormButton.propTypes = {\n  variant: string.isRequired,\n  component: string.isRequired,\n  size: string.isRequired,\n  color: string.isRequired,\n  onClick: func.isRequired,\n  disabled: bool.isRequired,\n  node: node.isRequired,\n};\n\nFormButton.defaultProps = {\n  variant: \"contained\",\n  component: \"button\",\n  size: \"medium\",\n  color: \"primary\",\n  disabled: false,\n};\n\nexport default React.memo(FormButton);"
                },
                "explanation": {
                    "he": "בחלק זה נקבע את סוג הערכים שהמפתחות באובייקט ה-props יקבלו. בחלק זה נעביר ערכים דיפולטיביים למפתחות באובייקט ה-props. לבסוף נעטוף את ייצוא הקומפוננט במטודת React.memo על מנת שהפונקציות שיועברו אליה יעברו תהליך של memoization",
                    "ar": "في هذا الجزء سنحدد نوع القيم التي ستتلقاها المفاتيح في كائن props. في هذا الجزء سنمرر قيم افتراضية للمفاتيح في كائن props. أخيراً سنلف تصدير المكون بطريقة React.memo حتى تمر الوظائف التي يتم تمريرها إليها بعملية memoization"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 369,
                "title": {
                    "he": "Form.jsx Component",
                    "ar": "مكون Form.jsx"
                },
                "type": "form-jsx-component",
                "icon": "📋",
                "content": {
                    "he": "קומפוננט שתקבע עיצוב אחיד לטפסים ותעבוד עם הקומפוננטות Input.jsx ו-FormButton.jsx בצורה מיטבית",
                    "ar": "مكون سيحدد تصميم موحد للنماذج وسيعمل مع مكونات Input.jsx و FormButton.jsx بشكل مثالي"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 370,
                "title": {
                    "he": "Form.jsx Implementation",
                    "ar": "تنفيذ Form.jsx"
                },
                "type": "form-jsx-implementation",
                "icon": "💻",
                "code": {
                    "language": "jsx",
                    "content": "import React from \"react\";\nimport { node, func, string, number, object } from \"prop-types\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport FormButton from \"./FormButton\";\nimport { useNavigate } from \"react-router-dom\";\nimport Typography from \"@mui/material/Typography\";\nimport LoopIcon from \"@mui/icons-material/Loop\";\n\nconst Form = ({\n  title,\n  onSubmit,\n  onReset,\n  onChange,\n  to,\n  color,\n  spacing,\n  styles,\n  children,\n}) => {\n  const navigate = useNavigate();\n\n  return (\n    <Box\n      component=\"form\"\n      color={color}\n      sx={{\n        mt: 3,\n        p: 2,\n        ...styles,\n      }}\n      onSubmit={onSubmit}\n      autoComplete=\"off\"\n      noValidate\n    >\n      <Typography\n        align=\"center\"\n        variant=\"h5\"\n        component=\"h1\"\n        mb={2}\n      >\n        {title.toUpperCase()}\n      </Typography>\n      <Grid container spacing={spacing}>\n        {children}\n      </Grid>\n      <Grid\n        container\n        spacing={1}\n        my={2}\n        direction=\"row\"\n        width=\"100%\"\n      >\n        <Grid item xs={4}>\n          <FormButton\n            node=\"cancel\"\n            color=\"error\"\n            component=\"div\"\n            variant=\"outlined\"\n            onClick={() => navigate(to)}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <FormButton\n            node={<LoopIcon />}\n            variant=\"outlined\"\n            component=\"div\"\n            onClick={onReset}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <FormButton\n            node=\"Submit\"\n            onClick={onSubmit}\n            disabled={!!onChange()}\n            size=\"large\"\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};"
                },
                "props": [
                    {
                        "name": "title",
                        "description": {
                            "he": "כותרת הטופס",
                            "ar": "عنوان النموذج"
                        }
                    },
                    {
                        "name": "onSubmit",
                        "description": {
                            "he": "פרמטר מסוג פונקציית callback",
                            "ar": "معامل من نوع دالة callback"
                        }
                    },
                    {
                        "name": "onReset",
                        "description": {
                            "he": "פרמטר מסוג פונקציית callback שתופעל כאשר ילחצו על כפתור reset",
                            "ar": "معامل من نوع دالة callback سيتم تفعيلها عند الضغط على زر reset"
                        }
                    },
                    {
                        "name": "onChange",
                        "description": {
                            "he": "פרמטר מסוג פונקציית callback שתופעל בכל פעם שיכניסו נתונים לאחד מהשדות בטופס. הערך שחוזר ממנה הוא בוליאני ויחליט האם לשחרר את הכפתור או לא",
                            "ar": "معامل من نوع دالة callback سيتم تفعيلها في كل مرة يتم إدخال بيانات في أحد حقول النموذج. القيمة التي ترجع منها منطقية وستقرر ما إذا كان سيتم تحرير الزر أم لا"
                        }
                    },
                    {
                        "name": "to",
                        "description": {
                            "he": "מחרוזת תווים שתקבע לאן יועבר הגולש כאשר ילחץ על כפתור cancel",
                            "ar": "سلسلة أحرف ستحدد إلى أين سيتم توجيه المستخدم عند الضغط على زر cancel"
                        }
                    },
                    {
                        "name": "color",
                        "description": {
                            "he": "מחרוזת תווים שתקבע את צבע הטופס",
                            "ar": "سلسلة أحرف ستحدد لون النموذج"
                        }
                    },
                    {
                        "name": "spacing",
                        "description": {
                            "he": "הרווחים בין האלמנטים בטופס",
                            "ar": "المسافات بين العناصر في النموذج"
                        }
                    },
                    {
                        "name": "styles",
                        "description": {
                            "he": "מקבל אובייקט עם פרמטרים של css במקרה ומעוניינים לשנות את עיצוב הטופס",
                            "ar": "يتلقى كائن مع معاملات CSS في حالة الرغبة في تغيير تصميم النموذج"
                        }
                    },
                    {
                        "name": "children",
                        "description": {
                            "he": "קומפוננטות/ element / מחרוזת תווים",
                            "ar": "مكونات / عنصر / سلسلة أحرف"
                        }
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 371,
                "title": {
                    "he": "Form Return",
                    "ar": "إرجاع Form"
                },
                "type": "form-return",
                "icon": "↩️",
                "explanation": {
                    "he": "הקומפוננט מחזירה את:",
                    "ar": "المكون يرجع:"
                },
                "components": [
                    {
                        "name": "MUI Box Component as a Form",
                        "description": {
                            "he": "הקומפוננט box של MUI כאשר אלמנט ה-HTML שייווצר יהיה form. יקבל את העיצוב לפי הערכים הדיפולטיביים ולפי מה שהטופס קיבל בפרמטרים. יאזין לאירוע לחיצה על כפתור בתוך הטופס ויפעיל את מטודת onSubmit",
                            "ar": "مكون box من MUI عندما يكون عنصر HTML الذي سيتم إنشاؤه هو form. سيتلقى التصميم حسب القيم الافتراضية وما تلقاه النموذج في المعاملات. سيستمع لحدث النقر على زر داخل النموذج ويفعل طريقة onSubmit"
                        }
                    },
                    {
                        "name": "MUI Typography Component",
                        "description": {
                            "he": "נשתמש בקומפוננט Typography של MUI ונקבע שהכיתוב ימורכז, יראה כמו h5, אולם אלמנט ה-HTML יהיה h1, נמיר את הטקסט שקיבלנו בפרמטר title לאותיות גדולות",
                            "ar": "سنستخدم مكون Typography من MUI ونحدد أن النص سيكون مركزاً، سيبدو مثل h5، لكن عنصر HTML سيكون h1، سنحول النص الذي تلقيناه في معامل title إلى أحرف كبيرة"
                        }
                    },
                    {
                        "name": "MUI Grid Component for Layout",
                        "description": {
                            "he": "נעמד את הטופס באמצעות הקומפוננט Grid של MUI שיעטוף את קומפוננט שיתקבלו כילדים של קומפוננט ה-Form (children), קומפוננט FormButton שיקבל את הכיתוב cancel, קומפוננט FormButton שיקבל אייקון של MUI, קומפוננט FormButton עם הכיתוב submit",
                            "ar": "سنرتب النموذج باستخدام مكون Grid من MUI الذي سيلف المكونات التي ستُستقبل كأطفال لمكون Form (children)، مكون FormButton الذي سيتلقى نص cancel، مكون FormButton الذي سيتلقى أيقونة من MUI، مكون FormButton مع نص submit"
                        }
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 372,
                "title": {
                    "he": "Form PropTypes & defaultProps",
                    "ar": "PropTypes و defaultProps لـ Form"
                },
                "type": "form-proptypes-defaultprops",
                "icon": "🔧",
                "code": {
                    "language": "javascript",
                    "content": "Form.propTypes = {\n  children: node.isRequired,\n  onSubmit: func.isRequired,\n  color: string.isRequired,\n  to: string.isRequired,\n  spacing: number.isRequired,\n  onReset: func.isRequired,\n  onChange: func.isRequired,\n  title: string.isRequired,\n  styles: object.isRequired,\n};\n\nForm.defaultProps = {\n  color: \"inherit\",\n  to: \"/\",\n  spacing: 1,\n  title: \"\",\n  styles: {},\n};\n\nexport default React.memo(Form);"
                },
                "explanation": {
                    "he": "נוודא באמצעות ספריית propTypes שהקומפוננט תקבל את כל המפתחות באובייקט ה-props הדרושים לה כדי לבצע את הלוגיקה שבתוכה. ניתן ערכים דיפולטיביים למפתחות באובייקט ה-props. לבסוף נעטוף את ייצוא הקומפוננט במטודת React.memo על מנת שהפונקציות שיועברו אליה יעברו תהליך של memoization",
                    "ar": "سنتأكد باستخدام مكتبة propTypes أن المكون سيتلقى جميع المفاتيح في كائن props المطلوبة لها لتنفيذ المنطق الموجود بداخلها. يمكن إعطاء قيم افتراضية للمفاتيح في كائن props. أخيراً سنلف تصدير المكون بطريقة React.memo حتى تمر الوظائف التي يتم تمريرها إليها بعملية memoization"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 373,
                "title": {
                    "he": "useForm.js Custom Hook",
                    "ar": "Custom Hook useForm.js"
                },
                "type": "useform-js-custom-hook",
                "icon": "🪝",
                "content": {
                    "he": "Custom hook שיעזור לנו בניהול טפסים",
                    "ar": "Custom hook سيساعدنا في إدارة النماذج"
                },
                "note": {
                    "he": "יש לעבור על מצגת joi לפני שממשיכים במצגת זאת!",
                    "ar": "يجب المرور على عرض joi قبل المتابعة في هذا العرض!"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 374,
                "title": {
                    "he": "useForm.js Implementation",
                    "ar": "تنفيذ useForm.js"
                },
                "type": "useform-js-implementation",
                "icon": "💻",
                "code": {
                    "language": "javascript",
                    "content": "import { useState, useCallback, useMemo } from \"react\";\nimport { object, func } from \"prop-types\";\nimport Joi from \"joi\";\n\nconst useForm = (initialForm, schema, handleSubmit) => {\n  const [data, setData] = useState(initialForm);\n  const [errors, setErrors] = useState({});"
                },
                "explanation": {
                    "he": "ניצור קבוע בשם useForm שיהיה שווה ערך לפונקציה אנונימית שתקבל שלושה פרמטרים: initialForm - אובייקט עם כל המפתחות שאנו מעוניינים לשנות באמצעות הטופס, schema - סכמה של Joi שתעזור לנו לבצע את הוולידציות על הנתונים שיוכנסו לשדות בטופס, handleSubmit - פונקציית callback שתופעל כאשר הטופס יישלח. נפעיל את מטודת useState עם הארגומנט initialForm ונחלץ ממנה את המשתנה data ואת מטודת setData. נפעיל את מטודת useState עם אובייקט ריק ונחלץ ממנה את המשתנה errors ואת מטודת setErrors",
                    "ar": "سنقوم بإنشاء ثابت باسم useForm سيكون مساوياً لدالة مجهولة ستتلقى ثلاثة معاملات: initialForm - كائن مع جميع المفاتيح التي نريد تغييرها باستخدام النموذج، schema - مخطط Joi سيساعدنا في إجراء التحقق من صحة البيانات التي سيتم إدخالها في حقول النموذج، handleSubmit - دالة callback سيتم تفعيلها عند إرسال النموذج. سنفعل طريقة useState مع المعامل initialForm ونستخرج منها المتغير data وطريقة setData. سنفعل طريقة useState مع كائن فارغ ونستخرج منها المتغير errors وطريقة setErrors"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 375,
                "title": {
                    "he": "useCallback Hook in useForm",
                    "ar": "Hook useCallback في useForm"
                },
                "type": "usecallback-hook-useform",
                "icon": "🔄",
                "code": {
                    "language": "javascript",
                    "content": "const onSubmit = useCallback(() => {\n  handleSubmit(data);\n}, [handleSubmit, data]);"
                },
                "explanation": {
                    "he": "ניצור קבוע בשם onSubmit שהערך שלו יהיה הפונקציה שתחזור מהפעלת מטודת useCallback כאשר בארגומנט הראשון נעביר לו פונקציה אנונימית שתפעיל את מטודת handleSubmit עם המשתנה data הדינאמי, ובארגומנט השני מערך של תלויות עם המשתנים handleSubmit, data",
                    "ar": "سنقوم بإنشاء ثابت باسم onSubmit قيمته ستكون الدالة التي سترجع من استدعاء طريقة useCallback عندما نمرر في المعامل الأول دالة مجهولة ستستدعي طريقة handleSubmit مع المتغير data الديناميكي، وفي المعامل الثاني مصفوفة من التبعيات مع المتغيرات handleSubmit، data"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 376,
                "title": {
                    "he": "Value return & propTypes",
                    "ar": "إرجاع القيمة و propTypes"
                },
                "type": "value-return-proptypes",
                "icon": "↩️",
                "code": {
                    "language": "javascript",
                    "content": "const value = useMemo(() => {\n  return { data, errors };\n}, [data, errors]);\n\nreturn {\n  value,\n  onSubmit,\n  handleChange,\n  handleReset,\n  validateForm,\n};\n\nuseForm.propTypes = {\n  initialForm: object.isRequired,\n  schema: object.isRequired,\n  handleSubmit: func.isRequired,\n};\n\nexport default useForm;"
                },
                "explanation": {
                    "he": "ניצור תהליך של memoization למפתחות data, errors. ניצור קבוע בשם value שהערך שלו יהיה הערך שיחזור מהפעלת מטודת useMemo שבארגומנט הראשון מקבלת פונקציה אנונימית שמחזירה אובייקט עם המפתחות והערכים של data, errors ובארגומנט השני מקבלת מערך תלויות עם אותם משתנים. הפונקציה useForm מחזירה את value ואת כל הפונקציות שיצרנו. בעזרת ספריית propTypes אני מוודא שהפונקציה useForm מקבלת כארגומנטים את סוגי הערכים שהיא צריכה לכדי להפעיל את הלוגיקה שלה. ולבסוף נייצא את הפונקציה מהמודול",
                    "ar": "سنقوم بإنشاء عملية memoization للمفاتيح data، errors. سنقوم بإنشاء ثابت باسم value قيمته ستكون القيمة التي سترجع من استدعاء طريقة useMemo التي في المعامل الأول تستقبل دالة مجهولة ترجع كائن مع مفاتيح وقيم data، errors وفي المعامل الثاني تستقبل مصفوفة تبعيات مع نفس المتغيرات. الدالة useForm ترجع value وجميع الدوال التي أنشأناها. بمساعدة مكتبة propTypes أتأكد أن الدالة useForm تستقبل كمعاملات أنواع القيم التي تحتاجها لتفعيل منطقها. وأخيراً سنصدر الدالة من الوحدة"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 377,
                "title": {
                    "he": "Form implementation",
                    "ar": "تنفيذ النموذج"
                },
                "type": "form-implementation",
                "icon": "📋",
                "content": {
                    "he": "דוגמה לעבודה עם הקומפוננטות והמטודות שקשורות לטפסים שיצרנו",
                    "ar": "مثال على العمل مع المكونات والطرق المتعلقة بالنماذج التي أنشأناها"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 378,
                "title": {
                    "he": "FormTest.jsx Component",
                    "ar": "مكون FormTest.jsx"
                },
                "type": "formtest-jsx-component",
                "icon": "🧪",
                "code": {
                    "language": "jsx",
                    "content": "import React from \"react\";\nimport Form from \"../../forms/components/Form\";\nimport Input from \"../../forms/components/Input\";\nimport useForm from \"../../forms/hooks/useForm\";\nimport Joi from \"joi\";\nimport { Container } from \"@mui/material\";\n\nconst FormTest = () => {\n  const handleSubmit = data => console.log(data);\n  \n  const schema = {\n    first: Joi.string().min(2).required(),\n    last: Joi.string().min(2).required(),\n  };\n  \n  const INITIAL_FORM = { first: \"\", last: \"\" };\n  \n  const { value, ...rest } = useForm(INITIAL_FORM, schema, handleSubmit);"
                },
                "explanation": {
                    "he": "נייבא את הקומפוננט Form, המטודה useForm וכל הספריות הנדרשות. ניצור קומפוננט בשם FormTest. ניצור קבוע בשם handleSubmit שיהיה שווה ערך לפונקציה אנונימית שמקבלת פרמטר data מסוג אובייקט ומדפיסה אותו לקונסול. ניצור קבוע בשם schema שיהיה שווה ערך לאובייקט עם מפתחות שאנו רוצים לשנות בתוך הטופס, וכערכים נקבע מטודות Joi שבאמצעותן המטודה useForm תבצע ולידציה על הנתונים שיוכנסו לשדות. ניצור קבוע בשם INITIAL_FORM שיהיה שווה ערך לאובייקט עם המפתחות שאנו רוצים לתת להם ערכים באמצעות הטופס. נקרא למטודת useForm עם שלושת הארגומנטים שיצרנו בסדר שהמטודה מצפה לקבל את הארגומנטים, ונחלץ ממנה את value ואת אובייקט rest שיכיל את כל המטודות של הפונקציה המוחזרת",
                    "ar": "سنستورد مكون Form، طريقة useForm وجميع المكتبات المطلوبة. سنقوم بإنشاء مكون باسم FormTest. سنقوم بإنشاء ثابت باسم handleSubmit سيكون مساوياً لدالة مجهولة تستقبل معامل data من نوع كائن وتطبعه في وحدة التحكم. سنقوم بإنشاء ثابت باسم schema سيكون مساوياً لكائن مع مفاتيح نريد تغييرها داخل النموذج، وكقيم نحدد طرق Joi التي من خلالها ستقوم طريقة useForm بإجراء التحقق من صحة البيانات التي سيتم إدخالها في الحقول. سنقوم بإنشاء ثابت باسم INITIAL_FORM سيكون مساوياً لكائن مع المفاتيح التي نريد إعطاءها قيماً باستخدام النموذج. سنستدعي طريقة useForm مع المعاملات الثلاثة التي أنشأناها بالترتيب الذي تتوقع الطريقة استقبال المعاملات، وسنستخرج منها value وكائن rest الذي سيحتوي على جميع طرق الدالة المُرجعة"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 379,
                "title": {
                    "he": "FormTest return",
                    "ar": "إرجاع FormTest"
                },
                "type": "formtest-return",
                "icon": "↩️",
                "code": {
                    "language": "jsx",
                    "content": "return (\n  <Container\n    sx={{\n      marginTop: 8,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    }}\n  >\n    <Form\n      title=\"enter name\"\n      onSubmit={rest.onSubmit}\n      onReset={rest.handleReset}\n      onChange={rest.validateForm}\n      styles={{ maxWidth: \"450px\" }}\n    >\n      <Input\n        label=\"first\"\n        name=\"first\"\n        type=\"first\"\n        error={value.errors.first}\n        onChange={rest.handleChange}\n        data={value.data}\n      />\n      <Input\n        label=\"last\"\n        name=\"last\"\n        type=\"last\"\n        error={value.errors.last}\n        onChange={rest.handleChange}\n        data={value.data}\n      />\n    </Form>\n  </Container>\n);"
                },
                "explanation": {
                    "he": "הקומפוננט תחזיר: נעטוף את הטופס עם הקומפוננט Container של MUI. נציב את הקומפוננט Form שיצרנו עם המאפיינים: title - כותרת הטופס, onSubmit - כשילחצו על כפתור onSubmit תופעל מטודת rest מתוך האובייקט onSubmit, onReset - כשילחצו על כפתור reset תופעל מטודת handleReset, onChange - בכל שינוי כפתור ה-submit יפעיל את מטודת validateForm, styles - עיצוב הטופס. הקומפוננט Form יעטוף קומפוננטות בנים של Input שיקבלו את המאפיינים: label - הכיתוב על השדה, name - מחרוזת תווים שתהווה שם השדה, type - סוג אלמנט ה-input, error - המפתח בתוך אובייקט errors, onChange - האירוע יפעיל את מטודת handleChange של useForm, data - אובייקט data שחילצנו ממטודת useForm",
                    "ar": "المكون سيرجع: سنلف النموذج مع مكون Container من MUI. سنضع مكون Form الذي أنشأناه مع الخصائص: title - عنوان النموذج، onSubmit - عند الضغط على زر onSubmit ستُفعل طريقة rest من كائن onSubmit، onReset - عند الضغط على زر reset ستُفعل طريقة handleReset، onChange - في كل تغيير زر submit سيفعل طريقة validateForm، styles - تصميم النموذج. مكون Form سيلف مكونات أطفال من Input التي ستستقبل الخصائص: label - النص على الحقل، name - سلسلة أحرف ستكون اسم الحقل، type - نوع عنصر input، error - المفتاح داخل كائن errors، onChange - الحدث سيفعل طريقة handleChange من useForm، data - كائن data الذي استخرجناه من طريقة useForm"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 380,
                "title": {
                    "he": "Browser Result Form",
                    "ar": "نتيجة المتصفح للنموذج"
                },
                "type": "browser-result-form",
                "icon": "🌐",
                "content": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "description": {
                    "he": "כאשר קוראים לקומפוננט useEffect נכנס לפעולה ומעדכן את הערך של david - ל name. כאשר כותבים באלמנט input שבקומפוננט C כל שאר הקומפוננטות מתעדכנות בערך",
                    "ar": "عند استدعاء مكون useEffect يدخل في العمل ويحدث قيمة david - إلى name. عند الكتابة في عنصر input الذي في مكون C جميع المكونات الأخرى تتحدث بالقيمة"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 381,
                "title": {
                    "he": "Login Page",
                    "ar": "صفحة تسجيل الدخول"
                },
                "type": "login-page",
                "icon": "🔐",
                "content": {
                    "he": "התחברות לאפליקציה",
                    "ar": "الاتصال بالتطبيق"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 382,
                "title": {
                    "he": "Infrastructure Preparation Users",
                    "ar": "إعداد البنية التحتية للمستخدمين"
                },
                "type": "infrastructure-preparation-users",
                "icon": "👥",
                "content": {
                    "he": "ניצור את הנתיב src/users ובתוכו את התיקיות והקבצים:",
                    "ar": "سنقوم بإنشاء المسار src/users وبداخله المجلدات والملفات:"
                },
                "fileStructure": {
                    "users": {
                        "helpers": {
                            "initialForms": [
                                "initialLoginForm.js"
                            ]
                        },
                        "hooks": [
                            "useUsers.js"
                        ],
                        "models": {
                            "joi-schema": [
                                "loginSchema.js"
                            ]
                        },
                        "types": [],
                        "pages": [
                            "LoginPage.jsx"
                        ],
                        "providers": [
                            "UserProvider.jsx"
                        ],
                        "services": [
                            "localStorageService.js",
                            "usersApiService.js"
                        ]
                    }
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 383,
                "title": {
                    "he": "jwt-decode Library",
                    "ar": "مكتبة jwt-decode"
                },
                "type": "jwt-decode-library",
                "icon": "🔑",
                "content": {
                    "he": "A small browser library that helps decoding JWTs token",
                    "ar": "مكتبة متصفح صغيرة تساعد في فك تشفير رموز JWT"
                },
                "installation": {
                    "he": "npm jwt-decode",
                    "ar": "npm jwt-decode"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 384,
                "title": {
                    "he": "Joi-schema Introduction",
                    "ar": "مقدمة Joi-schema"
                },
                "type": "joi-schema-introduction",
                "icon": "✅",
                "content": {
                    "he": "יש לעבור אל המצגת של Joi לפני שממשיכים לחלק זה של המצגת",
                    "ar": "يجب المرور على عرض Joi قبل المتابعة إلى هذا الجزء من العرض"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 385,
                "title": {
                    "he": "loginSchema.js",
                    "ar": "loginSchema.js"
                },
                "type": "loginschema-js",
                "icon": "🔐",
                "code": {
                    "language": "javascript",
                    "content": "import Joi from \"joi\";\n\nconst loginSchema = {\n  email: Joi.string()\n    .pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/)\n    .messages({\n      \"string.pattern.base\": \"Pleas enter a valid mail\",\n    })\n    .required(),\n  password: Joi.string()\n    .pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*-]).{7,20}$/)\n    .messages({\n      \"string.pattern.base\":\n        \"Password must be at least 7 characters long and contain at least one uppercase letter, one lowercase letter, one number and one of the following characters: !@#$%^&*-\",\n    })\n    .required(),\n};\n\nexport default loginSchema;"
                },
                "explanation": {
                    "he": "ניצור אובייקט שישמש אותנו בבניית ה-useForm בתוך schema. נייבא מופע מספריית Joi. ניצור קבוע בשם loginSchema ונשווה את ערכו לאובייקט עם המפתחות שאנו מעוניינים לשנות באמצעות שדות הטופס והערכים יהיו מטודות של Joi. נייצא את האובייקט מהמודול",
                    "ar": "سنقوم بإنشاء كائن سيخدمنا في بناء useForm داخل schema. سنستورد مثيل من مكتبة Joi. سنقوم بإنشاء ثابت باسم loginSchema ونقارن قيمته بكائن مع المفاتيح التي نريد تغييرها باستخدام حقول النموذج والقيم ستكون طرق Joi. سنصدر الكائن من الوحدة"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 386,
                "title": {
                    "he": "Initial Form Data",
                    "ar": "بيانات النموذج الأولية"
                },
                "type": "initial-form-data",
                "icon": "📄",
                "content": {
                    "he": "מידע ראשוני על המפתחות באובייקט שהטופס יצטרך למלא את שדותיהם",
                    "ar": "معلومات أولية حول المفاتيح في الكائن التي سيحتاج النموذج لملء حقولها"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 387,
                "title": {
                    "he": "initialLoginForm.js",
                    "ar": "initialLoginForm.js"
                },
                "type": "initial-login-form-js",
                "icon": "📝",
                "code": {
                    "language": "javascript",
                    "content": "const initialLoginForm = {\n  email: \"\",\n  password: \"\",\n};\n\nexport default initialLoginForm;"
                },
                "explanation": {
                    "he": "ניצור קבוע בשם initialLoginForm שערכו יהיה שווה לאובייקט עם המפתחות שאת ערכיהם נרצה להזין באמצעות הטופס וערכים ריקים. נייצא את האובייקט שיצרנו מהמודול",
                    "ar": "سنقوم بإنشاء ثابت باسم initialLoginForm قيمته ستكون مساوية لكائن مع المفاتيح التي نريد إدخال قيمها باستخدام النموذج وقيم فارغة. سنصدر الكائن الذي أنشأناه من الوحدة"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 388,
                "title": {
                    "he": "Axios interceptor",
                    "ar": "Axios interceptor"
                },
                "type": "axios-interceptor",
                "icon": "🔄",
                "content": {
                    "he": "מידע ראשוני על המפתחות באובייקט שהטופס יצטרך למלא את שדותיהם",
                    "ar": "معلومات أولية حول المفاتيح في الكائن التي سيحتاج النموذج لملء حقولها"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 389,
                "title": {
                    "he": "useAxios.js",
                    "ar": "useAxios.js"
                },
                "type": "usexios-js",
                "icon": "🌐",
                "code": {
                    "language": "javascript",
                    "content": "import axios from \"axios\";\nimport { useSnackbar } from \"../providers/SnackbarProvider\";\nimport { useEffect } from \"react\";\nimport { useUser } from \"../users/providers/UserProvider\";\n\nconst useAxios = () => {\n  const snack = useSnackbar();\n  const { token } = useUser();\n\n  useEffect(() => {\n    axios.defaults.headers.common[\"x-auth-token\"] = token;\n    if (snack) {\n      axios.interceptors.request.use(data => {\n        return Promise.resolve(data);\n      }, null);\n    }\n    axios.interceptors.response.use(null, error => {\n      const expectedError = error.response && error.response.status >= 400;\n      if (expectedError) snack(\"error\", error.message);\n      return Promise.reject(error);\n    });\n  }, [snack, token]);\n};\n\nexport default useAxios;"
                },
                "explanation": {
                    "he": "נוסיף באמצעות מודול זה את הערך של המפתח token שיישמר ב-localStorage אל כל בקשה שנשלח לשרת במפתח headers. נייבא את useUser. נחלץ מהפעלת הפונקציה useUser את המפתח token. ניצור מפתח בתוך אובייקט הבקשה בשם x-auth-token באמצעות מטודה המתאימה ונשווה את הערך שלו ל-token שחילצנו מהפעלת מטודת useUser. ניירט את הבקשות לשרת באמצעות axios.interceptors כך שנוכל להוסיף לאובייקט הבקשה את המפתח שיצרנו ונעביר אותו הלאה לשרת באמצעות Promise.resolve",
                    "ar": "سنضيف باستخدام هذه الوحدة قيمة مفتاح token الذي سيُحفظ في localStorage إلى كل طلب نرسله للخادم في مفتاح headers. سنستورد useUser. سنستخرج من استدعاء الدالة useUser مفتاح token. سنقوم بإنشاء مفتاح داخل كائن الطلب باسم x-auth-token باستخدام الطريقة المناسبة ونقارن قيمته بـ token الذي استخرجناه من استدعاء طريقة useUser. سنعترض الطلبات للخادم باستخدام axios.interceptors حتى نتمكن من إضافة المفتاح الذي أنشأناه إلى كائن الطلب ونمرره للخادم باستخدام Promise.resolve"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 390,
                "title": {
                    "he": "LoginPage.jsx",
                    "ar": "LoginPage.jsx"
                },
                "type": "loginpage-jsx",
                "icon": "🔐",
                "content": {
                    "he": "דף התחברות",
                    "ar": "صفحة تسجيل الدخول"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 391,
                "title": {
                    "he": "LoginPage.jsx Implementation",
                    "ar": "تنفيذ LoginPage.jsx"
                },
                "type": "loginpage-jsx-implementation",
                "icon": "💻",
                "code": {
                    "language": "jsx",
                    "content": "import React from \"react\";\nimport Form from \"../../forms/components/Form\";\nimport Input from \"../../forms/components/Input\";\nimport useForm from \"../../forms/hooks/useForm\";\nimport { Container } from \"@mui/material\";\nimport initialLoginForm from \"../helpers/initialForms/initialLoginForm\";\nimport loginSchema from \"../models/joi-schema/loginSchema\";\nimport useUsers from \"./../hooks/useUsers\";\nimport { useUser } from \"../providers/UserProvider\";\nimport { Navigate } from \"react-router-dom\";\nimport ROUTES from \"../../routes/routesModel\";\n\nconst LoginPage = () => {\n  const { user } = useUser();\n  const { handleLogin } = useUsers();\n  \n  const { value, ...rest } = useForm(initialLoginForm, loginSchema, handleLogin);\n  \n  if (user) return <Navigate replace to={ROUTES.CARDS} />;"
                },
                "explanation": {
                    "he": "נייבא את כל המשתנים המופעים הקומפוננטות והפונקציות שאנו זקוקים להם לצורך הלוגיקה בקומפוננט. ניצור קומפוננט בשם LoginPage. נחלץ את המשתנה הדינאמי user מתוך הפעלת מטודת useUser. נחלץ את המטודה handleLogin מתוך הפעלת מטודת useUsers. נחלץ את המפתחות value ואת אובייקט rest מתוך הפעלת מטודת useForm אליה נעביר בארגומנטים את: initialLoginForm - שאת הערכים של המפתחות שלו נעדכן באמצעות הטופס, loginSchema - אובייקט שיעזור לנו בוולידציות על הנתונים שיוכנסו לשדות הטופס, handleLogin - הפונקציה שמטודת useForm תפעיל כשאירוע onSubmit ייקרה. נתנה ואם יש ערך למפתח הדינאמי user שייבאנו מוך ה-UserProvider (כלומר המשתמש מחובר כבר) נעביר אותו לדף הכרטיסים באמצעות הקומפוננט Navigate של react-router-dom",
                    "ar": "سنستورد جميع المتغيرات والمكونات والوظائف التي نحتاجها لمنطق المكون. سنقوم بإنشاء مكون باسم LoginPage. سنستخرج المتغير الديناميكي user من استدعاء طريقة useUser. سنستخرج طريقة handleLogin من استدعاء طريقة useUsers. سنستخرج المفاتيح value وكائن rest من استدعاء طريقة useForm التي سنمرر لها في المعاملات: initialLoginForm - التي سنحدث قيم مفاتيحها باستخدام النموذج، loginSchema - كائن سيساعدنا في التحقق من صحة البيانات التي سيتم إدخالها في حقول النموذج، handleLogin - الدالة التي ستستدعيها طريقة useForm عند حدوث حدث onSubmit. بشرط أنه إذا كان هناك قيمة للمفتاح الديناميكي user الذي استوردناه من UserProvider (أي أن المستخدم متصل بالفعل) سنوجهه إلى صفحة البطاقات باستخدام مكون Navigate من react-router-dom"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 392,
                "title": {
                    "he": "LoginPage Return",
                    "ar": "إرجاع LoginPage"
                },
                "type": "loginpage-return",
                "icon": "↩️",
                "code": {
                    "language": "jsx",
                    "content": "return (\n  <Container\n    sx={{\n      paddingTop: 8,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    }}\n  >\n    <Form\n      onSubmit={rest.onSubmit}\n      onReset={rest.handleReset}\n      onChange={rest.validateForm}\n      title=\"login\"\n      styles={{ maxWidth: \"450px\" }}\n      to={ROUTES.CARDS}\n    >\n      <Input\n        label=\"email\"\n        name=\"email\"\n        type=\"email\"\n        error={value.errors.email}\n        onChange={rest.handleChange}\n        data={value.data}\n      />\n      <Input\n        label=\"password\"\n        name=\"password\"\n        type=\"password\"\n        error={value.errors.password}\n        onChange={rest.handleChange}\n        data={value.data}\n      />\n    </Form>\n  </Container>\n);"
                },
                "explanation": {
                    "he": "בחלק זה ניצור את הטופס שבעזרתו נשנה את הערכים של המפתחות באובייקט initialLoginForm. נעטוף את הטופס בקומפוננט Container של MUI ונמרכז אותו. נציב את הקומפוננט Form שיצרנו ונעביר לה את המאפיינים: onSubmit - מעביר את המטודה onSubmit מאובייקט rest שחילצנו מ-useForm, onReset - מטודה לאיפוס שדות הטופס, errors - האובייקט האחראי על הודעות שגיאה, גם חולץ מ-useForm במשתנה value, onChange - מטודה שתופעל בשינויי Input, תפעיל את validateForm כדי לשחרר את כפתור submit, styles - קובע את הרוחב המקסימלי לטופס, title - קובע את כותרת הטופס. נציב את הקומפוננט Input שיצרנו כאשר באמצעות המאפיינים שלהם נקבע את שמם, את סוג האלמנט נעביר לו את המפתח באובייקט השגיאה הרלוונטי לשדה, נעביר לו את אובייקט data ובכל שינוי בשדה תופעל מטודת handleChange. נעטוף את הקומפוננט במטודת React.memo",
                    "ar": "في هذا الجزء سنقوم بإنشاء النموذج الذي من خلاله سنغير قيم المفاتيح في كائن initialLoginForm. سنلف النموذج بمكون Container من MUI ونركزه. سنضع مكون Form الذي أنشأناه ونمرر له الخصائص: onSubmit - يمرر طريقة onSubmit من كائن rest الذي استخرجناه من useForm، onReset - طريقة لإعادة تعيين حقول النموذج، errors - الكائن المسؤول عن رسائل الخطأ، أيضاً مستخرج من useForm في متغير value، onChange - طريقة ستُفعل في تغييرات Input، ستفعل validateForm لتحرير زر submit، styles - يحدد العرض الأقصى للنموذج، title - يحدد عنوان النموذج. سنضع مكون Input الذي أنشأناه عندما من خلال خصائصه نحدد اسمه، نوع العنصر نمرر له المفتاح في كائن الخطأ المناسب للحقل، نمرر له كائن data وفي كل تغيير في الحقل ستُفعل طريقة handleChange. سنلف المكون بطريقة React.memo"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 393,
                "title": {
                    "he": "Browser Result Login",
                    "ar": "نتيجة المتصفح لتسجيل الدخول"
                },
                "type": "browser-result-login",
                "icon": "🌐",
                "content": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "description": {
                    "he": "כפתור ה-submit ישתחרר רק לאחר שכל שדות החובה ימולאו לפי דרישות הוולידציה",
                    "ar": "زر submit سيتم تحريره فقط بعد ملء جميع الحقول الإجبارية وفقاً لمتطلبات التحقق من الصحة"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 394,
                "title": {
                    "he": "Get Current User",
                    "ar": "الحصول على المستخدم الحالي"
                },
                "type": "get-current-user",
                "icon": "👤",
                "content": {
                    "he": "קבלת אובייקט עם המידע על המשתמש הרשום",
                    "ar": "الحصول على كائن مع معلومات المستخدم المسجل"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 395,
                "title": {
                    "he": "Browser Result Cards",
                    "ar": "نتيجة المتصفح للبطاقات"
                },
                "type": "browser-result-cards",
                "icon": "🌐",
                "content": {
                    "he": "התוצאה בדפדפן",
                    "ar": "النتيجة في المتصفح"
                },
                "description": {
                    "he": "כאשר המשתמש מחובר והוא מסוג admin רואים בתפריט הניווט השמאלי את הלינקים לכל הדפים שיש למשתמש הרשאה לראות אותם ובתפריט הניווט הימני רואים את תמונה האבתר במקום הלינקים לדפי הירשמות והתחברות",
                    "ar": "عندما يكون المستخدم متصلاً وهو من نوع admin، نرى في قائمة التنقل اليسرى الروابط لجميع الصفحات التي لديه إذن لرؤيتها، وفي قائمة التنقل اليمنى نرى صورة الصورة الرمزية بدلاً من الروابط لصفحات التسجيل وتسجيل الدخول"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 396,
                "title": {
                    "he": "Get Current User Task",
                    "ar": "مهمة الحصول على المستخدم الحالي"
                },
                "type": "get-current-user-task",
                "icon": "📋",
                "content": {
                    "he": "משימת",
                    "ar": "مهمة"
                },
                "description": {
                    "he": "Business-cards-app",
                    "ar": "Business-cards-app"
                },
                "task": {
                    "he": "מודול Footer.jsx: הראה את כפתור fav card רק אם המשתמש מחובר, הראה את הכפתור my cards רק אם המשתמש עסקי. מודול CardActionBar.jsx: הראה את כפתור עריכת הכרטיס רק למשתמש שיצר את הכרטיס, הראה את כפתור מחיקת הכרטיס רק למשתמש שיצר את הכרטיס או למשתמש מסוג admin, הראה את כפתור Like רק למשתמש מחובר, תן גישה למודות sandbox רק למשתמש שהינו admin. מודול MenuBar.jsx: הצג את תפריט הניווט הנפתח בהתאם לסטאטוס המשתמש כלומר אם הוא מחובר הראה את תפריט הניווט הרלוונטי ואם הוא לא תראה את תפריט הניווט הרלוונטי לסטאטוס לא מחובר",
                    "ar": "وحدة Footer.jsx: أظهر زر fav card فقط إذا كان المستخدم متصلاً، أظهر زر my cards فقط إذا كان المستخدم تجارياً. وحدة CardActionBar.jsx: أظهر زر تعديل البطاقة فقط للمستخدم الذي أنشأ البطاقة، أظهر زر حذف البطاقة فقط للمستخدم الذي أنشأ البطاقة أو لمستخدم من نوع admin، أظهر زر Like فقط للمستخدم المتصل، امنح الوصول لوحدات sandbox فقط للمستخدم الذي هو admin. وحدة MenuBar.jsx: اعرض قائمة التنقل المنسدلة وفقاً لحالة المستخدم أي إذا كان متصلاً اعرض قائمة التنقل ذات الصلة وإذا لم يكن اعرض قائمة التنقل ذات الصلة لحالة غير متصل"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 397,
                "title": {
                    "he": "Logout",
                    "ar": "تسجيل الخروج"
                },
                "type": "logout",
                "icon": "🚪",
                "content": {
                    "he": "ניתוק המשתמש מהאפליקציה",
                    "ar": "قطع اتصال المستخدم من التطبيق"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 398,
                "title": {
                    "he": "handleLogout",
                    "ar": "handleLogout"
                },
                "type": "handlelogout",
                "icon": "🔓",
                "content": {
                    "he": "מטודה בתוך המודול useUsers שאחראית על ניתוק המשתמש",
                    "ar": "طريقة داخل وحدة useUsers مسؤولة عن قطع اتصال المستخدم"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 399,
                "title": {
                    "he": "useUsers.js Implementation with handleLogout",
                    "ar": "تنفيذ useUsers.js مع handleLogout"
                },
                "type": "useusers-js-handlelogout",
                "icon": "💻",
                "code": {
                    "language": "javascript",
                    "content": "const handleLogout = useCallback(() => {\n  removeToken();\n  setUser(null);\n}, [setUser]);\n\nreturn {\n  value,\n  handleLogin,\n  handleLogout,\n  handleSignup,\n};\n\nexport default useUsers;"
                },
                "explanation": {
                    "he": "נוסיף את מטודת logout. ניצור קבוע בשם handleLogout שיהיה שווה ערך למטודה שתחזור מהפעלת מטודת useCallback כאשר בארגומנט הראשון נעביר לה פונקציה אנונימית ש: תפעיל את מטודת removeToken מתוך localStorageService ולמעשה תסיר את המפתח והערך של token מתוך אובייקט ה-localStorage, תפעיל את מטודת setUser עם הערך null, ובארגומנט השני מערך תלויות שיסתכל על מטודת setUser. נייצא את handleLogout",
                    "ar": "سنضيف طريقة logout. سنقوم بإنشاء ثابت باسم handleLogout سيكون مساوياً للطريقة التي ستعود من استدعاء طريقة useCallback عندما في المعامل الأول نمرر لها دالة مجهولة التي: ستستدعي طريقة removeToken من localStorageService وستزيل فعلياً المفتاح وقيمة token من كائن localStorage، ستستدعي طريقة setUser بالقيمة null، وفي المعامل الثاني مصفوفة تبعيات ستنظر إلى طريقة setUser. سنصدر handleLogout"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 400,
                "title": {
                    "he": "MenuLink.jsx",
                    "ar": "MenuLink.jsx"
                },
                "type": "menulink-jsx",
                "icon": "🔗",
                "content": {
                    "he": "קומפוננט שאחראי על הקישורים בתוך התפריט הניווט בחלון הקופץ",
                    "ar": "مكون مسؤول عن الروابط داخل قائمة التنقل في النافذة المنبثقة"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 401,
                "title": {
                    "he": "Menu.jsx",
                    "ar": "Menu.jsx"
                },
                "type": "menu-jsx",
                "icon": "📋",
                "content": {
                    "he": "תפריט ניווט דינאמי בחלון קופץ שנפתח כאשר נלחץ על הכפתורים שנגדיר שלחיצה עליהם תפתח אותו",
                    "ar": "قائمة تنقل ديناميكية في نافذة منبثقة تفتح عند النقر على الأزرار التي نحددها والتي سيفتحها النقر عليها"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 402,
                "title": {
                    "he": "Menu.jsx Implementation",
                    "ar": "تنفيذ Menu.jsx"
                },
                "type": "menu-jsx-implementation",
                "icon": "💻",
                "code": {
                    "language": "jsx",
                    "content": "import { MuiMenu, MenuItem, Box } from \"@mui/material\";\nimport ROUTES from \"../../../../routes/routesModel\";\nimport { useUser } from \"../../../../users/providers/UserProvider\";\nimport { useUsers } from \"../../../../users/hooks/useUsers\";\nimport MenuLink from \"./MenuLink\";\n\nconst Menu = ({ isopen, anchorEl, onClose }) => {\n  const { user } = useUser();\n  const { handleLogout } = useUsers();\n  \n  const onLogout = () => {\n    handleLogout();\n    onClose();\n  };"
                },
                "explanation": {
                    "he": "קומפוננט שאחראית על תצוגת חלון קופץ עם תפריט ניווט. נייבא את הקומפוננטות, המופעים והמטודות הדרושים לנו ללוגיקה של הקומפוננט. ניצור את הקומפוננט Menu. הקומפוננט תקבל מפתחות באובייקט ה-props. נחלץ את המשתנה user מתוך הפעלת useUser מטודת. נחלץ את מטודת handleLogout מתוך useUsers הפעלת מטודת. ניצור קבוע בשם onLogout שערכו יהיה פונקציה אנונימית שתפעיל את מטודות handleLogout onClose",
                    "ar": "مكون مسؤول عن عرض نافذة منبثقة مع قائمة تنقل. سنستورد المكونات والخطافات والطرق التي نحتاجها لمنطق المكون. سنقوم بإنشاء مكون Menu. المكون سيتلقى مفاتيح في كائن props. سنستخرج متغير user من استدعاء طريقة useUser. سنستخرج طريقة handleLogout من استدعاء طريقة useUsers. سنقوم بإنشاء ثابت باسم onLogout قيمته ستكون دالة مجهولة ستستدعي طرق handleLogout onClose"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 403,
                "title": {
                    "he": "Menu.jsx MUI Components",
                    "ar": "مكونات MUI في Menu.jsx"
                },
                "type": "menu-jsx-mui-components",
                "icon": "🎨",
                "code": {
                    "language": "jsx",
                    "content": "<MuiMenu\n  open={isOpen}\n  onClose={onClose}\n  anchorEl={anchorEl}\n  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n  keepMounted\n  transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n>\n  <Box>\n    <MenuLink\n      text=\"about\"\n      navigateTo={ROUTES.ABOUT}\n      onClick={onClose}\n      styles={{ display: { xs: \"block\", md: \"none\" } }}\n    />\n  </Box>\n</MuiMenu>"
                },
                "explanation": {
                    "he": "מעטפת תפריט הניווט ולינקים שאין צורך במשתמש מחובר כדי להראות אותם. נציב את הקומפוננט Menu של MUI נעביר לה את המאפיינים: open - אם הערך יהיה true תפריט הניווט ייפתח, onClose - פונקציית callback שתוביל לסגירת תפריט הניווט, anchorEl - האלמנט עליו יעגון תפריט הניווט, anchorOrigin - מיקום תפריט הניווט ביחס לאלמנט אליו היא מקושרת. נציב את הקומפוננט Box של mui כמיכל של הלינקים בתפריט הניווט. נציב את הקומפוננט MenuLink שיצרנו ונעביר לה את: text - הכיתוב שיופיע על הלינק, navigateTo - כתובת ה-url אליה נעביר את הגולש במקרה וילחץ על הלינק, onClick - נפעיל את מטודת onClose, styles - אובייקט הגדרות css",
                    "ar": "غلاف قائمة التنقل والروابط التي لا تحتاج مستخدم متصل لإظهارها. سنضع مكون Menu من MUI ونمرر له الخصائص: open - إذا كانت القيمة true ستفتح قائمة التنقل، onClose - دالة callback ستؤدي إلى إغلاق قائمة التنقل، anchorEl - العنصر الذي سترسو عليه قائمة التنقل، anchorOrigin - موقع قائمة التنقل بالنسبة للعنصر المرتبط به. سنضع مكون Box من mui كحاوية للروابط في قائمة التنقل. سنضع مكون MenuLink الذي أنشأناه ونمرر له: text - النص الذي سيظهر على الرابط، navigateTo - عنوان url الذي سنوجه إليه المستخدم في حالة النقر على الرابط، onClick - سنستدعي طريقة onClose، styles - كائن إعدادات css"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 404,
                "title": {
                    "he": "Menu.jsx Conditional Rendering - No User",
                    "ar": "العرض الشرطي في Menu.jsx - بدون مستخدم"
                },
                "type": "menu-jsx-conditional-no-user",
                "icon": "👤",
                "code": {
                    "language": "jsx",
                    "content": "{!user && (\n  <>\n    <MenuLink\n      text=\"login\"\n      navigateTo={ROUTES.LOGIN}\n      onClick={onClose}\n      styles={{ display: { xs: \"block\", md: \"none\" } }}\n    />\n    <MenuLink\n      text=\"signup\"\n      navigateTo={ROUTES.SIGNUP}\n      onClick={onClose}\n      styles={{ display: { xs: \"block\", md: \"none\" } }}\n    />\n  </>\n)}"
                },
                "explanation": {
                    "he": "לינקים שיוצגו כאשר אין משתמש מחובר. נתנה ואם המשתמש אינו מחובר. ניצור את הקישורים שיובילו את המשתמש לדפים: Login ו-signup בעזרת הקומפוננט שיצרנו MenuLink",
                    "ar": "الروابط التي ستظهر عندما لا يوجد مستخدم متصل. بشرط أن المستخدم غير متصل. سنقوم بإنشاء الروابط التي ستوجه المستخدم للصفحات: Login و-signup باستخدام المكون الذي أنشأناه MenuLink"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 405,
                "title": {
                    "he": "Menu.jsx Conditional Rendering - With User",
                    "ar": "العرض الشرطي في Menu.jsx - مع مستخدم"
                },
                "type": "menu-jsx-conditional-with-user",
                "icon": "👥",
                "code": {
                    "language": "jsx",
                    "content": "{user && (\n  <>\n    <MenuLink\n      text=\"profile\"\n      navigateTo={ROUTES.USER_PROFILE}\n      onClick={onClose}\n    />\n    <MenuLink\n      text=\"edit account\"\n      navigateTo={ROUTES.EDIT_USER}\n      onClick={onClose}\n    />\n    <MenuItem onClick={onLogout}>\n      Logout\n    </MenuItem>\n  </>\n)}"
                },
                "explanation": {
                    "he": "לינקים שיופיעו כשיש משתמש מחובר. נתנה ואם המשתמש מחובר. ניצור קישור שלחיצה עליו תפעיל את מטודת onLogout שתמחק את מפתח ה-token מתוך אובייקט ה-localStorage ותעדכן את ה-UserProvider שהמשתמש אינו מחובר יותר",
                    "ar": "الروابط التي ستظهر عندما يكون هناك مستخدم متصل. بشرط أن المستخدم متصل. سنقوم بإنشاء رابط النقر عليه سيستدعي طريقة onLogout التي ستحذف مفتاح token من كائن localStorage وتحدث UserProvider أن المستخدم لم يعد متصلاً"
                },
                "backgroundColor": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
            },
            {
                "id": 406,
                "title": {
                    "he": "MenuProvider.jsx",
                    "ar": "MenuProvider.jsx"
                },
                "type": "menuprovider-jsx",
                "icon": "🔧",
                "content": {
                    "he": "תפריט הניווט דינאמי בחלון קופץ שנפתח כאשר נלחץ על הכפתורים שנגדיר שלחיצה עליהם תפתח אותו",
                    "ar": "قائمة تنقل ديناميكية في نافذة منبثقة تفتح عند النقر على الأزرار التي نحددها والتي سيفتحها النقر عليها"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 407,
                "title": {
                    "he": "MenuProvider.jsx Implementation",
                    "ar": "تنفيذ MenuProvider.jsx"
                },
                "type": "menuprovider-jsx-implementation",
                "icon": "💻",
                "code": {
                    "language": "jsx",
                    "content": "import React, { useState, useContext, useRef, useEffect } from \"react\";\nimport { node } from \"prop-types\";\nimport { Box } from \"@mui/material/Box\";\nimport Menu from \"./Menu\";\nimport { useMediaQuery } from \"@mui/material\";\nimport { useTheme as useMuiTheme } from \"@mui/material/styles\";\n\nconst MenuContext = React.createContext(null);\n\nexport const MenuProvider = ({ children }) => {\n  const theme = useMuiTheme();\n  const screenSize = useMediaQuery(theme.breakpoints.up(\"md\"));\n  const [isOpen, setOpen] = useState(true);\n  const [anchorEL, setAnchor] = useState(null);\n  const anchorRef = useRef();\n\n  useEffect(() => {\n    setAnchor(anchorRef.current);\n  }, []);\n\n  useEffect(() => {\n    setOpen(false);\n  }, [screenSize]);"
                },
                "explanation": {
                    "he": "ניצור קבוע בשם MenuContext שיהיה שווה ערך לאובייקט שיחזור מהפעלת מטודת React.createContext. ניצור ונייצא את הקומפוננט MenuProvider שתקבל children. ניצור קבוע בשם theme ונשווה את הערך שלו למטודת useMuiTheme של MUI. ניצור קבוע בשם screenSize שערכו יהיה הפעלת מדת useMediaQuery של MUI שתעקוב אחר שינוי בגודל המסך בכלל ובמעבר על מס' הפיקסלים שמוגדרים בתוך הארגומנט שלה בפרט. נחלץ את המשתנה isOpen ואת מטודת setOpen מתוך הפעלת useState עם הארגומנט true. נחלץ את המשתנה anchorEl ואת מטודת setAnchor מתוך הפעלת מטודת useState עם הארגומנט null. ניצור קבוע בשם anchorRef שיהיה שווה ערך להפעלת מטודת useRef. נפעיל את מטודת useEffect שתפעיל את מטודת setAnchor פעם אחת עם טעינת הקומפוננט ותקבע את ערכו של anchorEl לקבוע anchorRef. נפעיל את מטודת useEffect שתפעיל את מטודת setOpen עם הארגומנט false בכל פעם שהקבוע screenSize משתנה. הקבוע screenSize יחזיר ערך בוליאני בהתאם לגודל המסך",
                    "ar": "سنقوم بإنشاء ثابت باسم MenuContext سيكون مساوياً للكائن الذي سيعود من استدعاء طريقة React.createContext. سنقوم بإنشاء وتصدير مكون MenuProvider الذي سيتلقى children. سنقوم بإنشاء ثابت باسم theme ونقارن قيمته بطريقة useMuiTheme من MUI. سنقوم بإنشاء ثابت باسم screenSize قيمته ستكون استدعاء طريقة useMediaQuery من MUI التي ستتابع تغيير حجم الشاشة بشكل عام وعند المرور على عدد البكسل المحدد داخل معاملها بشكل خاص. سنستخرج متغير isOpen وطريقة setOpen من استدعاء useState بالمعامل true. سنستخرج متغير anchorEl وطريقة setAnchor من استدعاء طريقة useState بالمعامل null. سنقوم بإنشاء ثابت باسم anchorRef سيكون مساوياً لاستدعاء طريقة useRef. سنستدعي طريقة useEffect التي ستستدعي طريقة setAnchor مرة واحدة عند تحميل المكون وستحدد قيمة anchorEl للثابت anchorRef. سنستدعي طريقة useEffect التي ستستدعي طريقة setOpen بالمعامل false في كل مرة يتغير فيها الثابت screenSize. الثابت screenSize سيعيد قيمة منطقية وفقاً لحجم الشاشة"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 408,
                "title": {
                    "he": "Signup",
                    "ar": "التسجيل"
                },
                "type": "signup",
                "icon": "📝",
                "content": {
                    "he": "דף הרשמה לאפליקציה עם טופס מקיף",
                    "ar": "صفحة تسجيل للتطبيق مع نموذج شامل"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 409,
                "title": {
                    "he": "Infrastructure Preparation Signup",
                    "ar": "إعداد البنية التحتية للتسجيل"
                },
                "type": "infrastructure-preparation-signup",
                "icon": "🏗️",
                "content": {
                    "he": "ניצור את הנתיב src/users עם helpers, hooks, models/joi-schema, pages, providers, services",
                    "ar": "سنقوم بإنشاء المسار src/users مع helpers، hooks، models/joi-schema، pages، providers، services"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 410,
                "title": {
                    "he": "initialSignupForm.js",
                    "ar": "initialSignupForm.js"
                },
                "type": "initial-signup-form-js",
                "icon": "📋",
                "code": {
                    "language": "javascript",
                    "content": "export const initialSignupForm = {\n  first: \"\",\n  middle: \"\",\n  last: \"\",\n  phone: \"\",\n  email: \"\",\n  password: \"\",\n  url: \"\",\n  alt: \"\",\n  state: \"\",\n  country: \"\",\n  city: \"\",\n  street: \"\",\n  houseNumber: \"\",\n  zip: \"\",\n  isBusiness: false\n};"
                },
                "explanation": {
                    "he": "אובייקט עם ערכי ברירת מחדל לכל השדות בטופס ההרשמה",
                    "ar": "كائن بقيم افتراضية لجميع الحقول في نموذج التسجيل"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 411,
                "title": {
                    "he": "Normalize User",
                    "ar": "تطبيع المستخدم"
                },
                "type": "normalize-user",
                "icon": "🔄",
                "content": {
                    "he": "פונקציה שמטפלת בעיבוד נתוני המשתמש לפני שליחה לשרת",
                    "ar": "دالة تتعامل مع معالجة بيانات المستخدم قبل الإرسال إلى الخادم"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 412,
                "title": {
                    "he": "normalizeUser.js",
                    "ar": "normalizeUser.js"
                },
                "type": "normalize-user-js",
                "icon": "⚙️",
                "code": {
                    "language": "javascript",
                    "content": "import { makeFirstLetterCapital } from \"../forms/utils/algoMethods\";\n\nconst normalizeUser = (user) => {\n  return {\n    name: {\n      first: makeFirstLetterCapital(user.first),\n      middle: makeFirstLetterCapital(user.middle),\n      last: makeFirstLetterCapital(user.last)\n    },\n    phone: user.phone,\n    email: user.email.toLowerCase(),\n    password: user.password,\n    image: {\n      url: user.url,\n      alt: user.alt\n    },\n    address: {\n      state: user.state,\n      country: user.country,\n      city: user.city,\n      street: user.street,\n      houseNumber: user.houseNumber,\n      zip: user.zip\n    },\n    isBusiness: user.isBusiness\n  };\n};\n\nexport default normalizeUser;"
                },
                "explanation": {
                    "he": "פונקציה שמעבדת את נתוני המשתמש ומארגנת אותם במבנה הנכון לשרת",
                    "ar": "دالة تعالج بيانات المستخدم وتنظمها في الهيكل الصحيح للخادم"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 413,
                "title": {
                    "he": "Joi-schema",
                    "ar": "مخطط Joi"
                },
                "type": "joi-schema",
                "icon": "✅",
                "content": {
                    "he": "סקימה לאימות נתוני ההרשמה בצד הלקוח והשרת",
                    "ar": "مخطط للتحقق من صحة بيانات التسجيل على جانب العميل والخادم"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 414,
                "title": {
                    "he": "signupSchema.js",
                    "ar": "signupSchema.js"
                },
                "type": "signup-schema-js",
                "icon": "📝",
                "code": {
                    "language": "javascript",
                    "content": "import Joi from \"joi\";\n\nconst signupSchema = Joi.object({\n  first: Joi.string().min(2).max(256).required(),\n  middle: Joi.string().min(2).max(256).allow(\"\"),\n  last: Joi.string().min(2).max(256).required(),\n  phone: Joi.string().min(9).max(11).required(),\n  email: Joi.string().email({ tlds: { allow: false } }).required(),\n  password: Joi.string().min(7).max(20).required(),\n  url: Joi.string().min(14).max(1024).allow(\"\"),\n  alt: Joi.string().min(2).max(256).allow(\"\"),\n  state: Joi.string().min(2).max(256).allow(\"\"),\n  country: Joi.string().min(2).max(256).required(),\n  city: Joi.string().min(2).max(256).required(),\n  street: Joi.string().min(2).max(256).required(),\n  houseNumber: Joi.string().min(1).max(256).required(),\n  zip: Joi.string().min(2).max(256).allow(\"\"),\n  isBusiness: Joi.boolean().required()\n});\n\nexport default signupSchema;"
                },
                "explanation": {
                    "he": "סקימה מקיפה לאימות כל השדות בטופס ההרשמה",
                    "ar": "مخطط شامل للتحقق من صحة جميع الحقول في نموذج التسجيل"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 415,
                "title": {
                    "he": "MyCardsPage.jsx",
                    "ar": "MyCardsPage.jsx"
                },
                "type": "mycardspage-jsx",
                "icon": "📄",
                "content": {
                    "he": "קומפוננט שתציג את הכרטיסים של המשתמש הרשום",
                    "ar": "مكون سيعرض بطاقات المستخدم المسجل"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 416,
                "title": {
                    "he": "MyCardsPage Return",
                    "ar": "إرجاع MyCardsPage"
                },
                "type": "mycardspage-return",
                "icon": "🔄",
                "code": {
                    "language": "jsx",
                    "content": "return (\n  <Container sx={{ position: \"relative\", minHeight: \"92vh\" }}>\n    <PageHeader \n      title=\"Cards\" \n      subtitle=\"Here you can find business cards from all categories\" \n    />\n    {cards && (\n      <Fab\n        onClick={() => navigate(ROUTES.CREATE_CARD)}\n        color=\"primary\"\n        aria-label=\"add\"\n        sx={{ position: \"absolute\", bottom: 75, right: 16 }}\n      >\n        <AddIcon />\n      </Fab>\n    )}\n    <CardsFeedback \n      isLoading={isLoading}\n      error={error}\n      cards={cards}\n      onDelete={onDeleteCard}\n    />\n  </Container>\n);"
                },
                "explanation": {
                    "he": "נציב את הקומפוננט Container של MUI ובתוכה PageHeader, כפתור Fab ליצירת כרטיס חדש, ו-CardsFeedback",
                    "ar": "سنضع مكون Container من MUI وبداخله PageHeader، زر Fab لإنشاء بطاقة جديدة، وCardsFeedback"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 417,
                "title": {
                    "he": "Create Card Task",
                    "ar": "مهمة إنشاء البطاقة"
                },
                "type": "create-card-task",
                "icon": "📋",
                "items": [
                    {
                        "he": "צור את הנתיב src/cards/pages/CreateCardPage.jsx",
                        "ar": "أنشئ المسار src/cards/pages/CreateCardPage.jsx"
                    },
                    {
                        "he": "ייבא את כל הקומפוננטים, משתנים ומתודות הנדרשים ליצירת קומפוננט זה",
                        "ar": "استورد جميع المكونات والمتغيرات والطرق المطلوبة لإنشاء هذا المكون"
                    },
                    {
                        "he": "אם המשתמש לא מחובר או לא משתמש עסקי, הפנה אותו לדף הכרטיסים",
                        "ar": "إذا لم يكن المستخدم متصلاً أو لم يكن مستخدمًا تجاريًا، أعد توجيهه إلى صفحة البطاقات"
                    },
                    {
                        "he": "צור טופס עם כל השדות הנדרשים למלא את כל המפתחות שאובייקט כרטיס עסקי צריך",
                        "ar": "أنشئ نموذجًا بجميع الحقول المطلوبة لملء جميع المفاتيح التي يحتاجها كائن البطاقة التجارية"
                    },
                    {
                        "he": "השתמש בפונקציות המתאימות לביצוע תהליך normalize - mapToModel על הכרטיס שנוצר",
                        "ar": "استخدم الوظائف المناسبة لتنفيذ عملية normalize - mapToModel على البطاقة المُنشأة"
                    },
                    {
                        "he": "צור כרטיס עסקי חדש",
                        "ar": "أنشئ بطاقة تجارية جديدة"
                    },
                    {
                        "he": "לאחר יצירת הכרטיס העסקי, הפנה את המשתמש לדף MyCardsPage.jsx",
                        "ar": "بعد إنشاء البطاقة التجارية، أعد توجيه المستخدم إلى صفحة MyCardsPage.jsx"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 418,
                "title": {
                    "he": "Delete Card",
                    "ar": "حذف البطاقة"
                },
                "type": "delete-card",
                "icon": "🗑️",
                "content": {
                    "he": "מחיקת כרטיס ביקור",
                    "ar": "حذف بطاقة زيارة"
                },
                "backgroundColor": "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
            },
            {
                "id": 419,
                "title": {
                    "he": "Delete Card Emphasis",
                    "ar": "تأكيد حذف البطاقة"
                },
                "type": "delete-card-emphasis",
                "icon": "⚠️",
                "content": {
                    "he": "מחיקת כרטיס ממאגר המידע היא פעולה דסטרוקטיבית שאנו לא מעוניינים שהגולש יבצע אותה בטעות. על כן נרצה לוודא שהגולש אכן התכוון למחוק את הכרטיס על ידי פתיחת חלון נפתח שבו נשאל אותו אם הוא בטוח ורק אם הוא יאשר נמחק אותו",
                    "ar": "حذف البطاقة من قاعدة البيانات هو إجراء مدمر لا نريد أن يقوم به المستخدم عن طريق الخطأ. لذلك نريد التأكد من أن المستخدم قد قصد بالفعل حذف البطاقة عن طريق فتح نافذة منبثقة نسأله فيها عما إذا كان متأكداً وفقط إذا أكد سنحذفها"
                },
                "backgroundColor": "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
            },
            {
                "id": 420,
                "title": {
                    "he": "Infrastructure Preparation Delete",
                    "ar": "إعداد البنية التحتية للحذف"
                },
                "type": "infrastructure-preparation-delete",
                "icon": "🏗️",
                "content": {
                    "he": "ניצור את הנתיב src/cards/components/card/CardDeleteDialog.jsx",
                    "ar": "سنقوم بإنشاء المسار src/cards/components/card/CardDeleteDialog.jsx"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 421,
                "title": {
                    "he": "CardDeleteDialog.jsx",
                    "ar": "CardDeleteDialog.jsx"
                },
                "type": "carddeletedialog-jsx",
                "icon": "💬",
                "code": {
                    "language": "jsx",
                    "content": "import { bool, func } from \"prop-types\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button\n} from \"@mui/material\";\n\nconst CardDeleteDialog = ({ isDialogOpen, onDelete, onChangeDialog }) => {\n  return (\n    <Dialog\n      open={isDialogOpen}\n      onClose={onChangeDialog}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n      maxWidth=\"xs\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Are you sure you want to delete this card?\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          This operation will completely delete the business card and all its data from the database and it will not be possible to retrieve the card afterwards\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onChangeDialog} color=\"error\">\n          cancel\n        </Button>\n        <Button onClick={onDelete} autoFocus color=\"info\">\n          Delete card\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nCardDeleteDialog.propTypes = {\n  isDialogOpen: bool.isRequired,\n  onChangeDialog: func.isRequired,\n  onDelete: func.isRequired\n};\n\nexport default CardDeleteDialog;"
                },
                "explanation": {
                    "he": "קומפוננט שיהיה החלון הקופץ שבו המשתמש יצטרך לאשר את מחיקת הכרטיס",
                    "ar": "مكون سيكون النافذة المنبثقة التي سيحتاج فيها المستخدم إلى تأكيد حذف البطاقة"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 422,
                "title": {
                    "he": "CardActionBar.jsx",
                    "ar": "CardActionBar.jsx"
                },
                "type": "cardactionbar-jsx",
                "icon": "⚡",
                "code": {
                    "language": "jsx",
                    "content": "const CardActionBar = ({ onDelete, cardId }) => {\n  const [isDialogOpen, setDialog] = useState(false);\n\n  const handleDialog = term => {\n    if (term === \"open\") return setDialog(true);\n    setDialog(false);\n  };\n\n  const handelDeleteCard = () => {\n    handleDialog();\n    onDelete(cardId);\n  };\n\n  return (\n    <CardActions>\n      <IconButton\n        onClick={() => handleDialog(\"open\")}\n        aria-label=\"delete card\"\n        color=\"error\"\n      >\n        <DeleteIcon />\n      </IconButton>\n      <CardDeleteDialog\n        isDialogOpen={isDialogOpen}\n        onChangeDialog={handleDialog}\n        onDelete={handelDeleteCard}\n      />\n    </CardActions>\n  );\n};"
                },
                "explanation": {
                    "he": "נוסיף את הלוגיקה שלחיצה על כפתור מחיקת כרטיס תפתח את חלון הניווט",
                    "ar": "سنضيف المنطق الذي يجعل النقر على زر حذف البطاقة يفتح نافذة التنقل"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 423,
                "title": {
                    "he": "Card.jsx",
                    "ar": "Card.jsx"
                },
                "type": "card-jsx",
                "icon": "🃏",
                "code": {
                    "language": "jsx",
                    "content": "const Card = ({ card, onDelete }) => {\n  const navigate = useNavigate();\n  return (\n    <MuiCard sx={{ minWidth: 280 }}>\n      <CardActionArea\n        onClick={() => navigate(`${ROUTES.CARD_INFO}/${card._id}`)}>\n        <CardHead image={card.image} />\n        <CardBody card={card} />\n      </CardActionArea>\n      <CardActionBar onDelete={onDelete} cardId={card._id} />\n    </MuiCard>\n  );\n};\n\nCard.propTypes = {\n  card: cardType.isRequired,\n  onDelete: func.isRequired,\n};\n\nexport default React.memo(Card);"
                },
                "explanation": {
                    "he": "נעביר לקומפוננט CardActionBar את card._id ואת onDelete המטודה",
                    "ar": "سنمرر إلى مكون CardActionBar الـ card._id وطريقة onDelete"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 424,
                "title": {
                    "he": "Browser Result Delete Dialog",
                    "ar": "نتيجة المتصفح - نافذة الحذف"
                },
                "type": "browser-result-delete-dialog",
                "icon": "🌐",
                "content": {
                    "he": "התוצאה בדפדפן - חלון אישור מחיקת כרטיס",
                    "ar": "النتيجة في المتصفح - نافذة تأكيد حذف البطاقة"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 425,
                "title": {
                    "he": "Business Cards App Delete Task",
                    "ar": "مهمة حذف تطبيق البطاقات التجارية"
                },
                "type": "business-cards-app-delete-task",
                "icon": "📋",
                "items": [
                    {
                        "he": "צור את הקומפוננט CardDeleteDialog.jsx",
                        "ar": "أنشئ مكون CardDeleteDialog.jsx"
                    },
                    {
                        "he": "הוסף לוגיקה ל-CardActionBar.jsx לפתיחת החלון הקופץ",
                        "ar": "أضف منطقًا إلى CardActionBar.jsx لفتح النافذة المنبثقة"
                    },
                    {
                        "he": "עדכן את Card.jsx להעברת הפרמטרים הנדרשים",
                        "ar": "حدث Card.jsx لتمرير المعاملات المطلوبة"
                    },
                    {
                        "he": "בדוק שהמחיקה עובדת כראוי עם אישור המשתמש",
                        "ar": "تأكد من أن الحذف يعمل بشكل صحيح مع تأكيد المستخدم"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 426,
                "title": {
                    "he": "CardsPage.jsx",
                    "ar": "CardsPage.jsx"
                },
                "type": "cardspage-jsx",
                "icon": "📄",
                "code": {
                    "language": "jsx",
                    "content": "import { useCards } from \"../hooks/useCards\";\nimport { Container } from \"@mui/material/Container\";\nimport PageHeader from \"../../components/PageHeader\";\nimport { useEffect } from \"react\";\nimport CardsFeedback from \"../components/CardsFeedback\";\n\nconst CardsPage = () => {\n  const { value, handleGetCards, handleDeleteCard } = useCards();\n  const { isLoading, error, filteredCards } = value;\n\n  useEffect(() => {\n    handleGetCards();\n  }, []);\n\n  const onDeleteCard = async cardId => {\n    await handleDeleteCard(cardId);\n    await handleGetCards();\n  };\n\n  return (\n    <Container>\n      <PageHeader \n        title=\"Cards Page\" \n        subtitle=\"Here you can find business cards from all categories\" \n      />\n      <CardsFeedback \n        isLoading={isLoading}\n        error={error}\n        cards={filteredCards}\n        onDelete={onDeleteCard}\n      />\n    </Container>\n  );\n};\n\nexport default CardsPage;"
                },
                "explanation": {
                    "he": "נחלץ את המטודה handleDeleteCard מהפעלת המטודה useCards. ניצור את המטודה onDeleteCard שתקבל cardId מסוג מחרוזת תווים. הפונקציה תפעיל את המטודה האסינכרונית handleDeleteCard ותעביר לה את המשתנה cardId כארגומנט (מטודה זו תמחק את כרטיס העסק עם כל הנתונים שלו ממאגר המידע). אחר כך תפעיל את המטודה handleGetCards להצגת כל הכרטיסים שנמצאים כרגע במאגר המידע לגולש. נעביר את המטודה onDeleteCard לקומפוננט CardFeedback",
                    "ar": "سنستخرج طريقة handleDeleteCard من استدعاء طريقة useCards. سنقوم بإنشاء طريقة onDeleteCard التي ستتلقى cardId من نوع string. الدالة ستستدعي الطريقة غير المتزامنة handleDeleteCard وتمرر لها متغير cardId كمعامل (هذه الطريقة ستحذف البطاقة التجارية مع جميع بياناتها من قاعدة البيانات). بعد ذلك ستستدعي طريقة handleGetCards لعرض جميع البطاقات الموجودة حاليًا في قاعدة البيانات للمستخدم. سنمرر طريقة onDeleteCard إلى مكون CardFeedback"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 427,
                "title": {
                    "he": "Browser Result Delete Dialog",
                    "ar": "نتيجة المتصفح - نافذة الحذف"
                },
                "type": "browser-result-delete-dialog-success",
                "icon": "🌐",
                "content": {
                    "he": "התוצאה בדפדפן - חלון אישור מחיקת כרטיס עם הודעת הצלחה",
                    "ar": "النتيجة في المتصفح - نافذة تأكيد حذف البطاقة مع رسالة نجاح"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 428,
                "title": {
                    "he": "Browser Result Delete Success",
                    "ar": "نتيجة المتصفح - نجاح الحذف"
                },
                "type": "browser-result-delete-success",
                "icon": "✅",
                "content": {
                    "he": "התוצאה בדפדפן - הודעת הצלחה לאחר מחיקת כרטיס",
                    "ar": "النتيجة في المتصفح - رسالة نجاح بعد حذف البطاقة"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 429,
                "title": {
                    "he": "Delete Card Task",
                    "ar": "مهمة حذف البطاقة"
                },
                "type": "delete-card-task",
                "icon": "📋",
                "content": {
                    "he": "צור את האפשרות של מחיקת כרטיס בקומפוננט MyCardsPage.jsx",
                    "ar": "أنشئ إمكانية حذف البطاقة في مكون MyCardsPage.jsx"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 430,
                "title": {
                    "he": "Edit Card",
                    "ar": "تحرير البطاقة"
                },
                "type": "edit-card",
                "icon": "✏️",
                "content": {
                    "he": "עריכת כרטיס ביקור",
                    "ar": "تحرير بطاقة زيارة"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 431,
                "title": {
                    "he": "Infrastructure Preparation Edit",
                    "ar": "إعداد البنية التحتية للتحرير"
                },
                "type": "infrastructure-preparation-edit",
                "icon": "🏗️",
                "content": {
                    "he": "ניצור את התיקיות הבאות בתוך הנתיב /src/cards/helpers: initialForms (ובתוכה הקובץ initialCardForm.js), normalization (ובתוכה הקבצים mapCardToModel.js ו-normalizeCard.js)",
                    "ar": "سنقوم بإنشاء المجلدات التالية داخل المسار /src/cards/helpers: initialForms (وبداخله ملف initialCardForm.js)، normalization (وبداخله الملفات mapCardToModel.js و-normalizeCard.js)"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 432,
                "title": {
                    "he": "mapToModel",
                    "ar": "mapToModel"
                },
                "type": "maptomodel",
                "icon": "🔄",
                "content": {
                    "he": "טכניקה בה נקבל אובייקט מהשרת ונרצה להשתמש בחלק מהמפתחות שלו לטובת השמת ערכיהם בשדות טופס כמו לדוגמה בטופס לעריכת כרטיס",
                    "ar": "تقنية نحصل من خلالها على كائن من الخادم ونريد استخدام بعض مفاتيحه لغرض تعيين قيمها في حقول النموذج، على سبيل المثال في نموذج تحرير البطاقة"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 433,
                "title": {
                    "he": "mapCardToModel.js",
                    "ar": "mapCardToModel.js"
                },
                "type": "mapcardtomodel-js",
                "icon": "🗺️",
                "code": {
                    "language": "javascript",
                    "content": "const mapCardToModel = card => {\n  return {\n    title: card.title,\n    subtitle: card.subtitle,\n    description: card.description,\n    phone: card.phone,\n    email: card.email,\n    webUrl: card.web,\n    imageUrl: card.image.url,\n    imageAlt: card.image.alt,\n    state: card.address.state,\n    country: card.address.country,\n    city: card.address.city,\n    street: card.address.street,\n    houseNumber: card.address.houseNumber,\n    zip: card.address.zip\n  };\n};\n\nexport default mapCardToModel;"
                },
                "explanation": {
                    "he": "ניצור קבוע בשם mapCardToModel שערכו יהיה פונקציה אנונימית שמקבלת card מסוג אובייקט כפרמטר ומחזירה אובייקט שכל המפתחות שלו נמצאים ברמה הראשונה של האובייקט ולא מקוננים בתוך אובייקטים בתוך האובייקט",
                    "ar": "سنقوم بإنشاء ثابت باسم mapCardToModel قيمته ستكون دالة مجهولة تتلقى card من نوع object كمعامل وتعيد object تكون جميع مفاتيحه في المستوى الأول من الكائن وليس متداخلة داخل كائنات داخل الكائن"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 434,
                "title": {
                    "he": "normalizeCard.js",
                    "ar": "normalizeCard.js"
                },
                "type": "normalizecard-js",
                "icon": "⚙️",
                "code": {
                    "language": "javascript",
                    "content": "const normalizeCard = card => {\n  return {\n    title: card.title,\n    subtitle: card.subtitle,\n    description: card.description,\n    phone: card.phone,\n    email: card.email,\n    web: card.webUrl,\n    image: {\n      url: card.imageUrl,\n      alt: card.imageAlt\n    },\n    address: {\n      state: card.state,\n      country: card.country,\n      city: card.city,\n      street: card.street,\n      houseNumber: card.houseNumber,\n      zip: card.zip\n    }\n  };\n};\n\nexport default normalizeCard;"
                },
                "explanation": {
                    "he": "ניצור קבוע בשם normalizeCard שערכו יהיה פונקציה אנונימית שמקבלת card מסוג אובייקט כפרמטר ומחזירה אובייקט מנורמל כפי שהשרת מצפה לקבל",
                    "ar": "سنقوم بإنشاء ثابت باسم normalizeCard قيمته ستكون دالة مجهولة تتلقى card من نوع object كمعامل وتعيد object مُطبع كما يتوقع الخادم أن يتلقاه"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 435,
                "title": {
                    "he": "Business Cards App Edit Task",
                    "ar": "مهمة تحرير تطبيق البطاقات التجارية"
                },
                "type": "business-cards-app-edit-task",
                "icon": "📋",
                "items": [
                    {
                        "he": "צור את הנתיב src/cards/pages/EditCardPage.jsx",
                        "ar": "أنشئ المسار src/cards/pages/EditCardPage.jsx"
                    },
                    {
                        "he": "ייבא את כל הקומפוננטים, משתנים ומתודות הנדרשים ליצירת קומפוננט זה",
                        "ar": "استورد جميع المكونات والمتغيرים والطرق المطلوبة لإنشاء هذا المكون"
                    },
                    {
                        "he": "אם המשתמש לא מחובר או לא משתמש עסקי, הפנה אותו לדף הכרטיסים",
                        "ar": "إذا لم يكن المستخدم متصلاً أو لم يكن مستخدمًا تجاريًا، أعد توجيهه إلى صفحة البطاقات"
                    },
                    {
                        "he": "צור טופס עם כל השדות הנדרשים לעריכת כרטיס עסקי",
                        "ar": "أنشئ نموذجًا بجميع الحقول المطلوبة لتحرير بطاقة تجارية"
                    },
                    {
                        "he": "השתמש בפונקציות המתאימות לביצוע תהליך mapToModel ו-normalize על הכרטיס",
                        "ar": "استخدم الوظائف المناسبة لتنفيذ عملية mapToModel و-normalize على البطاقة"
                    },
                    {
                        "he": "עדכן כרטיס עסקי קיים",
                        "ar": "حدث بطاقة تجارية موجودة"
                    },
                    {
                        "he": "לאחר עדכון הכרטיס העסקי, הפנה את המשתמש לדף MyCardsPage.jsx",
                        "ar": "بعد تحديث البطاقة التجارية، أعد توجيه المستخدم إلى صفحة MyCardsPage.jsx"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 436,
                "title": {
                    "he": "useCards.js handleUpdateCard",
                    "ar": "useCards.js handleUpdateCard"
                },
                "type": "usecards-handleupdatecard",
                "icon": "🔄",
                "code": {
                    "language": "javascript",
                    "content": "const handleUpdateCard = useCallback(\n  async (cardId, cardFromClient) => {\n    try {\n      setLoading(true);\n      const card = await editCard(cardId, cardFromClient);\n      requestStatus(false, null, null, card);\n      snack(\"success\", \"The business card has been successfully updated\");\n      navigate(ROUTES.MY_CARDS);\n    } catch (error) {\n      requestStatus(false, error, null);\n    }\n  },\n  [snack]\n);"
                },
                "explanation": {
                    "he": "ניצור פונקציה חדשה בשם handleUpdateCard. הפונקציה האסינכרונית תקבל כפרמטרים cardId מסוג של מחרוזת תווים ו-cardFromClient מסוג של אובייקט. היא תפעיל את המטודה setLoading עם הארגומנט true. ניצור משתנה בשם card שערכו יהיה האובייקט שיחזור מהפעלת המטודה האסינכרונית editCard מתוך cardApiService עם הארגומנטים cardId, cardFromClient. נפעיל את המטודה requestStatus עם האובייקט שחזר לנו ממאגר המידע. נפעיל את המטודה snack על מנת לעדכן את הגולש בהצלחת פעולת העדכון. ננתב את הגולש לדף הכרטיסים שלו. אם תהיה שגיאה נתפוס אותה באמצעות מנגנון try & catch ונפעיל את המטודה requestStatus עם השגיאה",
                    "ar": "سنقوم بإنشاء دالة جديدة باسم handleUpdateCard. الدالة غير المتزامنة ستتلقى كمعاملات cardId من نوع string و-cardFromClient من نوع object. ستستدعي طريقة setLoading بالمعامل true. سنقوم بإنشاء متغير باسم card قيمته ستكون الكائن الذي سيعود من استدعاء الطريقة غير المتزامنة editCard من cardApiService بالمعاملات cardId، cardFromClient. سنستدعي طريقة requestStatus مع الكائن الذي عاد لنا من قاعدة البيانات. سنستدعي طريقة snack لتحديث المستخدم بنجاح عملية التحديث. سنوجه المستخدم إلى صفحة بطاقاته. إذا حدث خطأ سنلتقطه باستخدام آلية try & catch ونستدعي طريقة requestStatus مع الخطأ"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 437,
                "title": {
                    "he": "EditCardPage.jsx",
                    "ar": "EditCardPage.jsx"
                },
                "type": "editcardpage-jsx",
                "icon": "✏️",
                "content": {
                    "he": "דף עריכת כרטיס ביקור לעסק",
                    "ar": "صفحة تحرير بطاقة زيارة للعمل"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 438,
                "title": {
                    "he": "EditCardPage.jsx Implementation",
                    "ar": "تنفيذ EditCardPage.jsx"
                },
                "type": "editcardpage-jsx-implementation",
                "icon": "💻",
                "code": {
                    "language": "jsx",
                    "content": "import { useEffect } from \"react\";\nimport { useForm } from \"../../forms/hooks/useForm\";\nimport { useUser } from \"../../users/hooks/useUser\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Container } from \"@mui/material/Container\";\nimport Form from \"../../forms/components/Form\";\nimport Input from \"../../forms/components/Input\";\nimport { initialCardForm } from \"../helpers/initialForms/initialCardForm\";\nimport { cardSchema } from \"../models/joi-schema/cardSchema\";\nimport { useCards } from \"../hooks/useCards\";\nimport { ROUTES } from \"../../routes/routesModel\";\nimport { mapCardToModel } from \"../helpers/normalization/mapCardToModel\";\nimport { normalizeCard } from \"../helpers/normalization/normalizeCard\";\n\nconst EditCardPage = () => {\n  const { handleUpdateCard, handleGetCard, card } = useCards();\n  const { user } = useUser();\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const { value, ...rest } = useForm(\n    initialCardForm,\n    cardSchema,\n    () => {\n      handleUpdateCard(card._id, {\n        ...normalizeCard({ ...value.data }),\n        bizNumber: card.bizNumber,\n        user_id: card.user_id\n      });\n    }\n  );\n\n  useEffect(() => {\n    handleGetCard(id).then(data => {\n      if (user._id !== data.user_id) navigate(ROUTES.CARDS);\n      const modeledCard = mapCardToModel(data);\n      rest.setData(modeledCard);\n    });\n  }, []);\n\n  if (!user) return <Navigate replace to={ROUTES.CARDS} />;\n\n  return (\n    <Container sx={{ paddingTop: 8, display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n      <Form\n        onSubmit={rest.onSubmit}\n        onReset={rest.handleReset}\n        onChange={rest.validateForm}\n        styles={{ maxWidth: \"800px\" }}\n        to={ROUTES.CARDS}\n        title=\"Edit card\"\n      >\n        <Input\n          name=\"title\"\n          label=\"title\"\n          error={value.errors.title}\n          onChange={rest.handleChange}\n          data={value.data}\n          sm={6}\n        />\n      </Form>\n    </Container>\n  );\n};\n\nexport default EditCardPage;"
                },
                "explanation": {
                    "he": "נייבא את כל הקומפוננטים, משתנים ומתודות הנדרשים ליצירת קומפוננט זה ולוגיקתו. ניצור את הקומפוננט EditCardPage. נחלץ מתוך useCards את המתודות והמשתנים. נחלץ מתוך useUser את המשתנה user. נחלץ מתוך useParams את הפרמטר id מכתובת ה-URL. ניצור קבוע navigate באמצעות useNavigate. נחלץ מתוך useForm את value ושאר המשתנים/מתודות, ונעביר לו את initialCardForm ו-cardSchema. initialCardForm הוא אובייקט עם כל המפתחות שאנו מעוניינים לשנות את ערכם באמצעות שדות הטופס. cardSchema הוא אובייקט עם ולידציה לכל מפתח שיבדק. פונקציה אנונימית שתפעיל את handleUpdateCard מתוך useCards. הפונקציה תקבל את card._id כארגומנט ראשון ואובייקט כארגומנט שני. על האובייקט נבצע נרמול על אובייקט data באמצעות normalizeCard ונפזר את המפתחות והערכים שלו, ונוסיף את המפתחות bizNumber ו-user_id מהמשתנה card",
                    "ar": "سنستورد جميع المكونات والمتغيرات والطرق المطلوبة لإنشاء هذا المكون ومنطقه. سنقوم بإنشاء مكون EditCardPage. سنستخرج من useCards الطرق والمتغيرات. سنستخرج من useUser متغير user. سنستخرج من useParams المعامل id من عنوان URL. سنقوم بإنشاء ثابت navigate باستخدام useNavigate. سنستخرج من useForm الـ value وباقي المتغيرات/الطرق، ونمرر له initialCardForm و-cardSchema. initialCardForm هو كائن بجميع المفاتيح التي نريد تغيير قيمها باستخدام حقول النموذج. cardSchema هو كائن مع التحقق من صحة كل مفتاح سيتم فحصه. دالة مجهولة ستستدعي handleUpdateCard من useCards. الدالة ستتلقى card._id كمعامل أول وكائن كمعامل ثاني. على الكائن سنقوم بتطبيع كائن data باستخدام normalizeCard ونوزع مفاتيحه وقيمه، ونضيف المفاتيح bizNumber و-user_id من متغير card"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 439,
                "title": {
                    "he": "EditCardPage useEffect",
                    "ar": "EditCardPage useEffect"
                },
                "type": "editcardpage-useeffect",
                "icon": "⚡",
                "code": {
                    "language": "jsx",
                    "content": "useEffect(() => {\n  handleGetCard(id).then(data => {\n    if (user._id !== data.user_id) navigate(ROUTES.CARDS);\n    const modeledCard = mapCardToModel(data);\n    rest.setData(modeledCard);\n  });\n}, []);"
                },
                "explanation": {
                    "he": "נפעיל את המטודה useEffect שתופעל עם טעינת הקומפוננט בלבד. נפעיל בתוך הפונקציה האנונימית שבארגומנט הראשון שלה את המטודה handleGetCard ונעביר לה את המשתנה id שחילצנו מכתובת ה-URL באמצעות המטודה useParams של react-router-dom. נשרשר את המטודה then שתשפוך לתוך הארגומנט בפונקציה האנונימית שבתוכה את האובייקט שיחזור מהמטודה הקודמת. נתנה שאם המפתח _id מתוך המשתנה user שחילצנו מתוך המטודה useUser לא זהה לערך של המפתח user_id מתוך האובייקט data שהתקבל נעביר את הגולש לדף הכרטיסים (כי המשמעות היא שזה לא הכרטיס שלו ואנו לא מעוניינים לתת לו הרשאה לערוך אותו). ניצור קבוע בשם modeledCard שיהיה שווה ערך להפעלת המטודה mapCardToModel עם הארגומנט data על מנת שכל מפתחות האובייקט יהיו ברמה הראשונה שלו ולא nested בתוך ערכים של מפתחות. נפעיל את המטודה setData מתוך האובייקט rest שחילצנו ממטודת useForm עם האובייקט לאחר שעבר את תהליך הנרמול",
                    "ar": "سنستدعي طريقة useEffect التي ستُفعل عند تحميل المكون فقط. سنستدعي داخل الدالة المجهولة في معاملها الأول طريقة handleGetCard ونمرر لها متغير id الذي استخرجناه من عنوان URL باستخدام طريقة useParams من react-router-dom. سنقوم بسلسلة طريقة then التي ستسكب في المعامل في الدالة المجهولة بداخلها الكائن الذي سيعود من الطريقة السابقة. نظراً لأن المفتاح _id من متغير user الذي استخرجناه من طريقة useUser ليس مطابقاً لقيمة المفتاح user_id من كائن data المستلم سنوجه المستخدم إلى صفحة البطاقات (لأن المعنى هو أن هذه ليست بطاقته ولا نريد منحه إذن لتحريرها). سنقوم بإنشاء ثابت باسم modeledCard سيكون مساوياً لاستدعاء طريقة mapCardToModel مع معامل data لكي تكون جميع مفاتيح الكائن في مستواه الأول وليس متداخلة داخل قيم المفاتيح. سنستدعي طريقة setData من كائن rest الذي استخرجناه من طريقة useForm مع الكائن بعد أن مر بعملية التطبيع"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 440,
                "title": {
                    "he": "EditCardPage Return",
                    "ar": "إرجاع EditCardPage"
                },
                "type": "editcardpage-return",
                "icon": "🔄",
                "code": {
                    "language": "jsx",
                    "content": "if (!user) return <Navigate replace to={ROUTES.CARDS} />;\n\nreturn (\n  <Container sx={{ paddingTop: 8, display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n    <Form\n      onSubmit={rest.onSubmit}\n      onReset={rest.handleReset}\n      onChange={rest.validateForm}\n      styles={{ maxWidth: \"800px\" }}\n      to={ROUTES.CARDS}\n      title=\"Edit card\"\n    >\n      <Input\n        name=\"title\"\n        label=\"title\"\n        error={value.errors.title}\n        onChange={rest.handleChange}\n        data={value.data}\n        sm={6}\n      />\n    </Form>\n  </Container>\n);"
                },
                "explanation": {
                    "he": "נתנה ואם אין משתמש נעביר את הגולש לדף הכרטיסים. אחרת נציב את הקומפוננט Container של MUI. בתוכה נציב את קומפוננט Form ונעביר לה את כל המתודות והמשתנים שהיא זקוקה להם לצורך הלוגיקה הפנימית. ובתוך הקומפוננט Form נציב על כל מפתח שאנו מעוניינים לשנות את ערכו באמצעות הטופס את הקומפוננט Input שיצרנו בפיצ'ר forms ונעביר לכל אחת מהן את המשתנים והמתודות שהן זקוקות להם לביצוע הלוגיקה הפנימית שבתוכם",
                    "ar": "نظراً لأنه إذا لم يكن هناك مستخدم سنوجه المستخدم إلى صفحة البطاقات. وإلا سنضع مكون Container من MUI. بداخله سنضع مكون Form ونمرر له جميع الطرق والمتغيرات التي يحتاجها للمنطق الداخلي. وداخل مكون Form سنضع على كل مفتاح نريد تغيير قيمته باستخدام النموذج مكون Input الذي أنشأناه في ميزة forms ونمرر لكل منها المتغيرات والطرق التي تحتاجها لتنفيذ المنطق الداخلي بداخلها"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 441,
                "title": {
                    "he": "Edit User Task",
                    "ar": "مهمة تحرير المستخدم"
                },
                "type": "edit-user-task",
                "icon": "📋",
                "items": [
                    {
                        "he": "הוסף לוגיקה כך שלחיצה על הקישור \"עריכת חשבון\" בקומפוננט MenuBar.jsx (תפריט ניווט ימני) תעביר את הגולש לדף עריכת הפרופיל שלו",
                        "ar": "أضف منطقًا بحيث يؤدي النقر على الرابط \"تحرير الحساب\" في مكون MenuBar.jsx (قائمة التنقل اليمنى) إلى توجيه المستخدم إلى صفحة تحرير ملفه الشخصي"
                    },
                    {
                        "he": "בקומפוננט EditUserPage.jsx ודא שהמשתמש מחובר, אם לא הפנה אותו לדף הכרטיסים",
                        "ar": "في مكون EditUserPage.jsx تأكد من أن المستخدم متصل، إذا لم يكن كذلك أعد توجيهه إلى صفحة البطاقات"
                    },
                    {
                        "he": "השתמש בקומפוננטים ובמתודות מהפיצ'ר forms ליצירת טופס עריכת משתמש",
                        "ar": "استخدم المكونات والطرق من ميزة forms لإنشاء نموذج تحرير المستخدم"
                    },
                    {
                        "he": "צור מתודות ומודולים מתאימים לשמירת שינויי פרטי המשתמש במאגר המידע",
                        "ar": "أنشئ طرق ووحدات مناسبة لحفظ تغييرات تفاصيل المستخدم في قاعدة البيانات"
                    },
                    {
                        "he": "עדכן את הגולש על הצלחת או כישלון ניסיון עריכת הפרופיל שלו",
                        "ar": "حدث المستخدم عن نجاح أو فشل محاولة تحرير ملفه الشخصي"
                    },
                    {
                        "he": "אם המשתמש עדכן בהצלחה את הפרטים שלו, הפנה אותו לדף הכרטיסים",
                        "ar": "إذا قام المستخدم بتحديث تفاصيله بنجاح، أعد توجيهه إلى صفحة البطاقات"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 442,
                "title": {
                    "he": "Like Card",
                    "ar": "إعجاب بالبطاقة"
                },
                "type": "like-card",
                "icon": "❤️",
                "content": {
                    "he": "סימון כרטיס ביקור כמועדף",
                    "ar": "تحديد بطاقة زيارة كمفضلة"
                },
                "backgroundColor": "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
            },
            {
                "id": 443,
                "title": {
                    "he": "cardApiService.js changeLikeStatus",
                    "ar": "cardApiService.js changeLikeStatus"
                },
                "type": "cardapiservice-changelikestatus",
                "icon": "🔄",
                "code": {
                    "language": "javascript",
                    "content": "export const changeLikeStatus = async cardId => {\n  try {\n    const { data } = await axios.patch(`${apiUrl}/cards/${cardId}`);\n    return data;\n  } catch (error) {\n    return Promise.reject(error.message);\n  }\n};"
                },
                "explanation": {
                    "he": "ניצור את המטודה changeLikeStatus שערכה יהיה פונקציית callback אסינכרונית. הפונקציה תקבל בפרמטר שלה cardId מסוג מחרוזת תווים לזיהוי הכרטיס. תחלץ את המשתנה data מתוך הפעלת המטודה האסינכרונית axios.patch כאשר הארגומנט הראשון הוא כתובת ה-URL הרלוונטית והארגומנט השני הוא cardId. תחזיר את המשתנה data. אם תהיה שגיאה היא תיתפס במנגנון try & catch ותחזיר Promise.reject עם הודעת השגיאה של axios",
                    "ar": "سنقوم بإنشاء طريقة changeLikeStatus التي ستكون دالة callback غير متزامنة. الدالة ستتلقى في معاملها cardId من نوع string لتحديد البطاقة. ستستخرج متغير data من استدعاء الطريقة غير المتزامنة axios.patch حيث المعامل الأول هو عنوان URL ذو الصلة والمعامل الثاني هو cardId. ستعيد متغير data. إذا حدث خطأ ستُلتقط بآلية try & catch وستعيد Promise.reject مع رسالة الخطأ من axios"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 444,
                "title": {
                    "he": "Browser Result Like Card",
                    "ar": "نتيجة المتصفح - إعجاب بالبطاقة"
                },
                "type": "browser-result-like-card",
                "icon": "🌐",
                "content": {
                    "he": "התוצאה בדפדפן - סימון כרטיס כמועדף",
                    "ar": "النتيجة في المتصفح - تحديد البطاقة كمفضلة"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 445,
                "title": {
                    "he": "Business Cards App Like Task",
                    "ar": "مهمة إعجاب تطبيق البطاقات التجارية"
                },
                "type": "business-cards-app-like-task",
                "icon": "📋",
                "items": [
                    {
                        "he": "הוסף פונקציונליות של סימון כרטיס כמועדף",
                        "ar": "أضف وظيفة تحديد البطاقة كمفضلة"
                    },
                    {
                        "he": "צור API endpoint לשינוי סטטוס הלייק של כרטיס",
                        "ar": "أنشئ نقطة نهاية API لتغيير حالة الإعجاب للبطاقة"
                    },
                    {
                        "he": "הוסף כפתור לייק לקומפוננט Card",
                        "ar": "أضف زر إعجاب لمكون Card"
                    },
                    {
                        "he": "עדכן את הסטטוס החזותי של הכפתור בהתאם למצב הלייק",
                        "ar": "حدث الحالة البصرية للزر وفقاً لحالة الإعجاب"
                    },
                    {
                        "he": "הוסף הודעת הצלחה לאחר סימון הכרטיס כמועדף",
                        "ar": "أضف رسالة نجاح بعد تحديد البطاقة كمفضلة"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 446,
                "title": {
                    "he": "CardActionBar.jsx with Like",
                    "ar": "CardActionBar.jsx مع الإعجاب"
                },
                "type": "cardactionbar-jsx-with-like",
                "icon": "❤️",
                "code": {
                    "language": "jsx",
                    "content": "import React, { useState } from \"react\";\nimport CardActions from \"@mui/material/CardActions\";\nimport IconButton from \"@mui/material/IconButton\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport Box from \"@mui/material/Box\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport ModeEditIcon from \"@mui/icons-material/ModeEdit\";\nimport { func, string } from \"prop-types\";\nimport CallIcon from \"@mui/icons-material/Call\";\nimport CardDeleteDialog from \"./CardDeleteDialog\";\nimport { useNavigate } from \"react-router-dom\";\nimport ROUTES from \"../../../routes/routesModel\";\nimport { useUser } from \"../../../users/providers/UserProvider\";\nimport useCards from \"../../hooks/useCards\";\n\nconst CardActionBar = ({ onDelete, cardId, cardUserId, cardLikes, onLike }) => {\n  const navigate = useNavigate();\n  const { user } = useUser();\n  const { handleLikeCard } = useCards();\n\n  const [isDialogOpen, setDialog] = useState(false);\n  const [isliked, setLike] = useState(\n    () => !!cardLikes.find(id => id === user._id)\n  );\n\n  const handleLike = async () => {\n    setLike(prev => !prev);\n    await handleLikeCard(cardId);\n    onLike();\n  };\n\n  return (\n    <CardActions>\n      {user && (\n        <IconButton aria-label=\"add to favorites\" onClick={handleLike}>\n          <FavoriteIcon color={isLiked ? \"error\" : \"inherit\"} />\n        </IconButton>\n      )}\n      <IconButton\n        onClick={() => handleDialog(\"open\")}\n        aria-label=\"delete card\"\n        color=\"error\"\n      >\n        <DeleteIcon />\n      </IconButton>\n      <CardDeleteDialog\n        isDialogOpen={isDialogOpen}\n        onChangeDialog={handleDialog}\n        onDelete={handelDeleteCard}\n      />\n    </CardActions>\n  );\n};"
                },
                "explanation": {
                    "he": "נוסיף לקומפוננט CardActionBar שלושה מפתחות נוספים שנזדקק להם על מנת ליצור את הלוגיקה של סימון כרטיס כמועדף cardUserId, cardLikes, onLike. נחלץ את המשתנה isLike ואת המטודה setLike מהפעלת המטודה useState ונעביר בארגומנט פונקציית callback אנונימית שתחזיר את הערך הבוליאני של הפעלת המטודה find על מערך מחרוזות התווים cardLikes כאשר בפונקציה האנונימית שבתוכה נערוך איטרציה על המערך ונחזיר את מחרוזת התווים (id) שזהה לערך של useUser מתוך user.id. ניצור קבוע בשם handleLike שערכו יהיה פונקציה אנונימית אסינכרונית שתפעיל את המטודה setLike עם הערך הנגדי למשתנה isLike, תפעיל את המטודה האסינכרונית handleLikeCard שתקבל בארגומנט את cardId, ותפעיל פונקציית ה-callback בשם onLike. בחלק של ה-HTML, נראה את כפתור סימון כמועדף רק למשתמש מחובר, בלחיצה על הכפתור תופעל הפונקציה handleLike, ונקבע את צבעו של הכפתור בהתאם לערך הבוליאני isLike של המשתנה",
                    "ar": "سنضيف ثلاثة مفاتيح إضافية إلى مكون CardActionBar سنحتاجها لإنشاء منطق تحديد البطاقة كمفضلة: cardUserId، cardLikes، onLike. سنستخرج المتغير isLike وطريقة setLike من استدعاء طريقة useState ونمرر دالة رد اتصال مجهولة كمعامل التي ستعيد القيمة المنطقية لاستدعاء طريقة find على مصفوفة سلاسل الأحرف cardLikes، حيث في الدالة المجهولة سنقوم بالتكرار على المصفوفة ونعيد سلسلة الأحرف (id) المطابقة لقيمة user.id من useUser. سنقوم بإنشاء ثابت باسم handleLike ستكون قيمته دالة مجهولة غير متزامنة ستقوم بتفعيل طريقة setLike بالقيمة المعاكسة للمتغير isLike، ستقوم بتفعيل الطريقة غير المتزامنة handleLikeCard التي ستستقبل cardId كمعامل، وستقوم بتفعيل دالة رد الاتصال المسماة onLike. في جزء HTML، سنعرض زر الإشارة كمفضل فقط للمستخدم المسجل الدخول، عند النقر على الزر، سيتم تفعيل الدالة handleLike، وسيتم تحديد لون الزر وفقًا للقيمة المنطقية للمتغير isLike"
                },
                "backgroundColor": "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"
            },
            {
                "id": 447,
                "title": {
                    "he": "Card.jsx with onLike",
                    "ar": "Card.jsx مع onLike"
                },
                "type": "card-jsx-with-onlike",
                "icon": "🃏",
                "code": {
                    "language": "jsx",
                    "content": "const Card = ({ card, onDelete, onLike }) => {\n  const navigate = useNavigate();\n  return (\n    <MuiCard sx={{ minWidth: 280 }}>\n      <CardActionArea\n        onClick={() => navigate(`${ROUTES.CARD_INFO}/${card._id}`)}>\n        <CardHead image={card.image} />\n        <CardBody card={card} />\n      </CardActionArea>\n      <CardActionBar \n        onDelete={onDelete} \n        cardId={card._id} \n        cardUserId={card.user_id}\n        cardLikes={card.likes}\n        onLike={onLike}\n      />\n    </MuiCard>\n  );\n};\n\nCard.propTypes = {\n  card: cardType.isRequired,\n  onDelete: func.isRequired,\n  onLike: func.isRequired,\n};\n\nexport default React.memo(Card);"
                },
                "explanation": {
                    "he": "נוסיף את onLike שהקומפוננט צריכה לקבל בפרמטר. נעביר את הפונקציה onLike לקומפוננט CardActionBar יחד עם cardUserId ו-cardLikes",
                    "ar": "سنضيف onLike الذي يجب أن يستقبله المكون كمعامل. سنمرر دالة onLike إلى مكون CardActionBar مع cardUserId و-cardLikes"
                },
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            },
            {
                "id": 448,
                "title": {
                    "he": "Cards.jsx with onLike",
                    "ar": "Cards.jsx مع onLike"
                },
                "type": "cards-jsx-with-onlike",
                "icon": "📄",
                "code": {
                    "language": "jsx",
                    "content": "const Cards = ({ cards, onDelete, onLike }) => {\n  if (!cards.length)\n    return (\n      <Typography m={2}>\n        Oops... it seems there are no business cards to display\n      </Typography>\n    );\n\n  return (\n    <Grid container spacing={2} pb={2}>\n      {cards.map((card, i) => (\n        <Grid item xs={12} sm={6} md={4} lg={3} key={i}>\n          <Card card={card} onDelete={onDelete} onLike={onLike} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nCards.propTypes = {\n  cards: arrayOf(cardType).isRequired,\n  onDelete: func.isRequired,\n  onLike: func.isRequired,\n};\n\nexport default Cards;"
                },
                "explanation": {
                    "he": "נוסיף את onLike שהקומפוננט צריכה לקבל בפרמטר. נעביר את הפונקציה onLike לקומפוננט Card",
                    "ar": "سنضيف onLike الذي يجب أن يستقبله المكون كمعامل. سنمرر دالة onLike إلى مكون Card"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 449,
                "title": {
                    "he": "CardsFeedback.jsx with onLike",
                    "ar": "CardsFeedback.jsx مع onLike"
                },
                "type": "cardsfeedback-jsx-with-onlike",
                "icon": "💬",
                "code": {
                    "language": "jsx",
                    "content": "const CardsFeedback = ({ isLoading, error, cards, onDelete, onLike }) => {\n  if (isLoading) return <Spinner />;\n  if (error) return <Error errorMessage={error} />;\n  if (cards && !cards.length)\n    return (\n      <div>\n        {\"\"}\n        Oops, there are no business cards in the database that match the\n        parameters you entered\n      </div>\n    );\n  if (cards) return <Cards cards={cards} onDelete={onDelete} onLike={onLike} />;\n  return null;\n};\n\nCardsFeedback.propTypes = {\n  isLoading: bool.isRequired,\n  error: string,\n  cards: arrayOf(object),\n  onDelete: func.isRequired,\n  onLike: func.isRequired,\n};\n\nCardsFeedback.defaultProps = {\n  onLike: () => {},\n};\n\nexport default React.memo(CardsFeedback);"
                },
                "explanation": {
                    "he": "נוסיף את onLike שהקומפוננט צריכה לקבל בפרמטר. נעביר את הפונקציה onLike לקומפוננט Cards. ניתן ערך דיפולטיבי למטודה onLike של פונקציה אנונימית שלא עושה דבר כך שאם יעבירו לקומפוננט זאת פונקציה אז לחיצה על כפתור המועדפים יפעיל אותה אחרת תופעל המטודה האנונימית שבערך הדיפולטיבי",
                    "ar": "سنضيف onLike الذي يجب أن يستقبله المكون كمعامل. سنمرر دالة onLike إلى مكون Cards. سنعطي قيمة افتراضية لطريقة onLike لدالة مجهولة لا تفعل شيئًا بحيث إذا تم تمرير دالة إلى هذا المكون فسيتم تفعيلها عند النقر على زر المفضلة، وإلا سيتم تفعيل الطريقة المجهولة في القيمة الافتراضية"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 450,
                "title": {
                    "he": "FavCardsPage.jsx",
                    "ar": "FavCardsPage.jsx"
                },
                "type": "favcardspage-jsx",
                "icon": "⭐",
                "content": {
                    "he": "דף הכרטיסים המועדפים על הגולש",
                    "ar": "صفحة بطاقات المستخدم المفضلة"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 451,
                "title": {
                    "he": "FavCardsPage.jsx Implementation",
                    "ar": "تنفيذ FavCardsPage.jsx"
                },
                "type": "favcardspage-jsx-implementation",
                "icon": "💻",
                "code": {
                    "language": "jsx",
                    "content": "import { useCallback } from \"react\";\nimport { useCards } from \"../hooks/useCards\";\nimport { Container } from \"@mui/material/Container\";\nimport PageHeader from \"../../components/PageHeader\";\nimport { useEffect } from \"react\";\nimport CardsFeedback from \"../components/CardsFeedback\";\n\nconst FavCardsPage = () => {\n  const { value, ...rest } = useCards();\n  const { isLoading, error, cards } = value;\n  const { handleDeleteCard, handleGetFavCards } = rest;\n\n  useEffect(() => {\n    handleGetFavCards();\n  }, []);\n\n  const onDeleteCard = useCallback(async cardId => {\n    await handleDeleteCard(cardId);\n    await handleGetFavCards();\n  }, [handleDeleteCard, handleGetFavCards]);\n\n  return (\n    <Container>\n      <PageHeader \n        title=\"Favorite Cards\" \n        subtitle=\"Here you can find your favorite business cards\" \n      />\n      <CardsFeedback \n        isLoading={isLoading}\n        error={error}\n        cards={cards}\n        onDelete={onDeleteCard}\n      />\n    </Container>\n  );\n};\n\nexport default FavCardsPage;"
                },
                "explanation": {
                    "he": "ניצור את הנתיב src/cards/pages/FavCardsPage.jsx. נייבא את כל הקומפוננטות המשתנים והמטודות הדרושים לנו לביצוע הלוגיקה של הקומפוננט. ניצור קבוע בשם FavCardsPage. נחלץ את המשתנה value ואת אובייקט rest מתוך האובייקט שיחזור אלינו מהפעלת המטודה useCards. נחלץ את המשתנים מתוך המשתנה value. נחלץ את המטודות הדרושות לנו מתוך אובייקט rest. נפעיל את המטודה useEffect כך שהיא תופעל פעם אחת עם טעינת הקומפוננט. נפעיל את המטודה handleGetFavCards מתוך useCards",
                    "ar": "سنقوم بإنشاء المسار src/cards/pages/FavCardsPage.jsx. سنستورد جميع المكونات والمتغيرات والطرق المطلوبة لتنفيذ منطق المكون. سنقوم بإنشاء ثابت باسم FavCardsPage. سنستخرج متغير value وكائن rest من الكائن الذي سيعود لنا من استدعاء طريقة useCards. سنستخرج المتغيرات من متغير value. سنستخرج الطرق المطلوبة من كائن rest. سنستدعي طريقة useEffect بحيث تُفعل مرة واحدة عند تحميل المكون. سنستدعي طريقة handleGetFavCards من useCards"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 452,
                "title": {
                    "he": "useCards.js handleGetFavCards",
                    "ar": "useCards.js handleGetFavCards"
                },
                "type": "usecards-handlegetfavcards",
                "icon": "⭐",
                "code": {
                    "language": "javascript",
                    "content": "const handleGetFavCards = useCallback(async () => {\n  try {\n    setLoading(true);\n    const cards = await handleGetCards();\n    const favCards = cards.filter(\n      card => !!card.likes.find(id => id === user._id)\n    );\n    requestStatus(false, null, favCards);\n  } catch (error) {\n    requestStatus(false, error, null);\n  }\n}, [user]);"
                },
                "explanation": {
                    "he": "ניצור קבוע בשם handleGetFavCards שערכו יהיה פונקציה אסינכרונית שיחזור מהפעלת המטודה useCallback. isLoading יעודכן ל-false. ניצור קבוע בשם cards שערכו יהיה מערך הכרטיסים שיחזור מהמטודה האסינכרונית handleGetCards. ניצור קבוע בשם favCards שערכו יהיה המערך שיתקבל מהפעלת המטודה filter על מערך cards. המטודה filter תחזיר רק כרטיסים שבהם user_id נמצא בתוך מערך likes של הכרטיס. נעדכן את המשתנה cards עם המערך החדש באמצעות המטודה requestStatus. אם תהיה שגיאה היא תיתפס במנגנון try & catch והגולש יעודכן עם הודעת השגיאה",
                    "ar": "سنقوم بإنشاء ثابت باسم handleGetFavCards ستكون قيمته دالة غير متزامنة ستعود من استدعاء طريقة useCallback. سيتم تحديث isLoading إلى false. سنقوم بإنشاء ثابت باسم cards ستكون قيمته مصفوفة البطاقات التي ستعود من الطريقة غير المتزامنة handleGetCards. سنقوم بإنشاء ثابت باسم favCards ستكون قيمته المصفوفة التي ستُستقبل من استدعاء طريقة filter على مصفوفة cards. طريقة filter ستعيد فقط البطاقات التي يكون فيها user_id موجود داخل مصفوفة likes للبطاقة. سنحدث متغير cards بالمصفوفة الجديدة باستخدام طريقة requestStatus. إذا حدث خطأ سيتم التقاطه بآلية try & catch وسيتم تحديث المستخدم برسالة الخطأ"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 453,
                "title": {
                    "he": "useCards.js with filteredCards",
                    "ar": "useCards.js مع filteredCards"
                },
                "type": "usecards-with-filteredcards",
                "icon": "🔍",
                "code": {
                    "language": "javascript",
                    "content": "const [query, setQuery] = useState(\"\");\nconst [filteredCards, setFilter] = useState(null);\nconst [searchParams] = useSearchParams();\n\nuseEffect(() => {\n  setQuery(searchParams.get(\"q\") || \"\");\n}, [searchParams]);\n\nuseEffect(() => {\n  if (cards) {\n    setFilter(\n      cards.filter(\n        card =>\n          card.title.toLowerCase().includes(query.toLowerCase()) ||\n          card.bizNumber.includes(query)\n      )\n    );\n  }\n}, [cards, query]);\n\nconst value = useMemo(() => {\n  return { cards, card, isLoading, error, filteredCards };\n}, [cards, card, isLoading, error, filteredCards]);\n\nreturn {\n  value,\n  handleGetCard,\n  handleDeleteCard,\n  handleGetCards,\n  handleCreateCard,\n  handleGetMyCards,\n  handleUpdateCard,\n  handleLikeCard,\n  setCards,\n  handleGetFavCards\n};"
                },
                "explanation": {
                    "he": "נחלץ את המשתנה query ואת המטודה setQuery מהפעלת המטודה useState עם מחרוזת תווים ריקה כארגומנט. נחלץ את המשתנה filteredCards ואת המטודה setFilter מהפעלת המטודה useState עם null כארגומנט. נחלץ את המשתנה searchParams מהפעלת המטודה useSearchParams של react-router-dom. נפעיל את המטודה useEffect ונעביר לה פונקציה שתפעיל את המטודה setQuery עם הערך שיחזור מהפעלת searchParams.get(\"q\") או מחרוזת תווים ריקה אם אין ערך. נעביר את המשתנה searchParams למערך התלויות של useEffect הראשון. נפעיל את המטודה useEffect שוב, כאשר אם למשתנה cards יש ערך, נבצע סינון באמצעות המטודה setFilter שתחזיר מערך של כרטיסים שעומדים בקריטריוני הסינון. נעביר את המשתנים cards ו-query למערך התלויות של useEffect השני. נוסיף לתוך המשתנה value את המשתנה filteredCards",
                    "ar": "سنستخرج متغير query وطريقة setQuery من استدعاء طريقة useState بسلسلة أحرف فارغة كمعامل. سنستخرج متغير filteredCards وطريقة setFilter من استدعاء طريقة useState بـ null كمعامل. سنستخرج متغير searchParams من استدعاء طريقة useSearchParams من react-router-dom. سنستدعي طريقة useEffect ونمرر لها دالة ستستدعي طريقة setQuery بالقيمة التي ستعود من استدعاء searchParams.get(\"q\") أو سلسلة أحرف فارغة إذا لم تكن هناك قيمة. سنمرر متغير searchParams إلى مصفوفة التبعيات لـ useEffect الأول. سنستدعي طريقة useEffect مرة أخرى، حيث إذا كان لمتغير cards قيمة، سنقوم بالتصفية باستخدام طريقة setFilter التي ستعيد مصفوفة من البطاقات التي تلبي معايير التصفية. سنمرر المتغيرات cards و-query إلى مصفوفة التبعيات لـ useEffect الثاني. سنضيف إلى متغير value متغير filteredCards"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 454,
                "title": {
                    "he": "SearchBar Implementation",
                    "ar": "تنفيذ SearchBar"
                },
                "type": "searchbar-implementation",
                "icon": "🔍",
                "content": {
                    "he": "דוגמה לשימוש בפונקציונליות של ה-CardsPage.jsx בקומפוננט SearchBar",
                    "ar": "مثال على استخدام وظائف CardsPage.jsx في مكون SearchBar"
                },
                "backgroundColor": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
            },
            {
                "id": 455,
                "title": {
                    "he": "Search Bar Task Part A",
                    "ar": "مهمة Search Bar الجزء أ"
                },
                "type": "search-bar-task-part-a",
                "icon": "📋",
                "items": [
                    {
                        "he": "במודול useUsers הוסף אפשרות של חיפוש משתמש לפי: שם פרטי, שם משפחה, isBusiness",
                        "ar": "في وحدة useUsers أضف إمكانية البحث عن المستخدم حسب: الاسم الأول، اسم العائلة، isBusiness"
                    },
                    {
                        "he": "וודא שרק משתמש מסוג admin יוכל לראות לינק בתפריט הניווט העליון עם הכיתוב CRM ושלחיצה עליו תעביר את הגולש לקומפוננט שמופיעה בשקף הבא",
                        "ar": "تأكد من أن المستخدم من نوع admin فقط يمكنه رؤية رابط في قائمة التنقل العلوية مع النص CRM وأن النقر عليه سينقل المستخدم إلى المكون المعروض في الشريحة التالية"
                    }
                ],
                "backgroundColor": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
            }
        ]
    }
}